{
	"info": {
		"name": "QA Smoke",
		"_postman_id": "6468af28-0592-27a4-8306-5b6d89a6ee3d",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "01 InitialUserSetup",
			"description": "To be run before negative tests",
			"item": [
				{
					"name": "authenticate usm_admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"usm_admin\",\n   \"password\": \"password\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "get roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"",
									"for (var i = 0; i < data.length; i++) {",
									"    var feature = data[i];",
									"    ",
									"    if (feature.name === 'rep_power_role') {",
									"        postman.setGlobalVariable(\"rep_power_role_id\", feature.roleId);",
									"        ",
									"    } else if (feature.name === 'rep_share_role') {",
									"        postman.setGlobalVariable(\"rep_share_role_id\", feature.roleId);",
									"        ",
									"    } else if (feature.name === 'rep_private_role') {",
									"        postman.setGlobalVariable(\"rep_private_role_id\", feature.roleId);",
									"    }",
									"}",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"Body contains results\"] = responseBody.has(\"results\");",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains roles ids\"] = responseBody.has(\"roleId\");",
									"tests[\"Response contains update features attribute\"] = responseBody.has(\"updateFeatures\");",
									"tests[\"Response contains features attribute\"] = responseBody.has(\"features\");",
									"tests[\"Response contains roles description\"] = responseBody.has(\"description\");",
									"tests[\"Response contains status of the roles\"] = responseBody.has(\"status\");",
									"tests[\"Response contains names of the roles\"] = responseBody.has(\"name\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_share\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/roles"
					},
					"response": []
				},
				{
					"name": "get datasets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"var datasetsIDs = [];",
									"",
									"for (var i = 0; i < data.length; i++) {",
									"    datasetsIDs.push(data[i].datasetId);",
									"}",
									"",
									"postman.setGlobalVariable(\"dataSets\",  datasetsIDs.join());",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"Body contains results\"] = responseBody.has(\"results\");",
									"tests[\"Response contains the scopes of the datasets\"] = responseBody.has(\"scopes\");",
									"tests[\"Response contains the applications of the datasets\"] = responseBody.has(\"application\");",
									"tests[\"Response contains the categories of the datasets\"] = responseBody.has(\"category\");",
									"tests[\"Response contains the dataset id of the datasets\"] = responseBody.has(\"datasetId\");",
									"tests[\"Response contains the discriminator of the datasets\"] = responseBody.has(\"discriminator\");",
									"tests[\"Response contains the description of the datasets\"] = responseBody.has(\"description\");",
									"tests[\"Response contains the name of the datasets\"] = responseBody.has(\"name\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_share\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/scopes/datasets"
					},
					"response": []
				},
				{
					"name": "get features",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"var featureIDs = [];",
									"",
									"for (var i = 0; i < data.length; i++) {",
									"    if(!(data[i].name === \"MANAGE_ALL_REPORTS\")){",
									"        featureIDs.push(data[i].featureId);",
									"    }",
									"}",
									"",
									"postman.setGlobalVariable(\"features\",  featureIDs.join());",
									"",
									"",
									"tests[\"Body contains results\"] = responseBody.has(\"results\");",
									"",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains roles ids\"] = responseBody.has(\"roleId\");",
									"tests[\"Response contains features attribute\"] = responseBody.has(\"features\");",
									"tests[\"Response contains roles description\"] = responseBody.has(\"description\");",
									"tests[\"Response contains status of the roles\"] = responseBody.has(\"status\");",
									"tests[\"Response contains names of the groups\"] = responseBody.has(\"group\");",
									"tests[\"Response containsthe feature id's\"] = responseBody.has(\"featureId\");",
									"tests[\"Response contains names of the applications\"] = responseBody.has(\"applicationName\");",
									"tests[\"Response contains the list of the roles\"] = responseBody.has(\"roles\");",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_share\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/applications/features"
					},
					"response": []
				},
				{
					"name": "edit_rep_power_role_features",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains roles ids\"] = responseBody.has(\"roleId\");",
									"tests[\"Response contains features attribute\"] = responseBody.has(\"features\");",
									"tests[\"Response contains roles description\"] = responseBody.has(\"description\");",
									"tests[\"Response contains status of the roles\"] = responseBody.has(\"status\");",
									"tests[\"Response contains names of the groups\"] = responseBody.has(\"group\");",
									"tests[\"Response containsthe feature id's\"] = responseBody.has(\"featureId\");",
									"tests[\"Response contains names of the applications\"] = responseBody.has(\"applicationName\");",
									"tests[\"Response contains the list of the roles\"] = responseBody.has(\"roles\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"features\": [{{features}}],\r\n\t\"roleId\": {{rep_power_role_id}},\r\n\t\"status\": \"E\",\r\n\t\"name\": \"rep_power_role\"\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/roles"
					},
					"response": []
				},
				{
					"name": "edit_rep_private_role_features",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains roles ids\"] = responseBody.has(\"roleId\");",
									"tests[\"Response contains features attribute\"] = responseBody.has(\"features\");",
									"tests[\"Response contains roles description\"] = responseBody.has(\"description\");",
									"tests[\"Response contains status of the roles\"] = responseBody.has(\"status\");",
									"tests[\"Response contains names of the groups\"] = responseBody.has(\"group\");",
									"tests[\"Response containsthe feature id's\"] = responseBody.has(\"featureId\");",
									"tests[\"Response contains names of the applications\"] = responseBody.has(\"applicationName\");",
									"tests[\"Response contains the list of the roles\"] = responseBody.has(\"roles\");"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"features\": [{{features}}],\r\n\t\"roleId\": {{rep_private_role_id}},\r\n\t\"status\": \"E\",\r\n\t\"name\": \"rep_private_role\"\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/roles"
					},
					"response": []
				},
				{
					"name": "edit_rep_share_role_features",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains roles ids\"] = responseBody.has(\"roleId\");",
									"tests[\"Response contains features attribute\"] = responseBody.has(\"features\");",
									"tests[\"Response contains roles description\"] = responseBody.has(\"description\");",
									"tests[\"Response contains status of the roles\"] = responseBody.has(\"status\");",
									"tests[\"Response contains names of the groups\"] = responseBody.has(\"group\");",
									"tests[\"Response containsthe feature id's\"] = responseBody.has(\"featureId\");",
									"tests[\"Response contains names of the applications\"] = responseBody.has(\"applicationName\");",
									"tests[\"Response contains the list of the roles\"] = responseBody.has(\"roles\");"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"features\": [{{features}}],\r\n\t\"roleId\": {{rep_share_role_id}},\r\n\t\"status\": \"E\",\r\n\t\"name\": \"rep_share_role\"\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/roles"
					},
					"response": []
				},
				{
					"name": "get scopes",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"for (var i = 0; i < data.length; i++) {",
									"    var scope = data[i];",
									"",
									"    if(scope.name === 'EC'){",
									"        postman.setGlobalVariable(\"EC_SCOPE_ID\", scope.scopeId);",
									"        postman.setGlobalVariable(\"EC_ACTIVE_FROM\", scope.activeFrom);",
									"        postman.setGlobalVariable(\"EC_ACTIVE_TO\", scope.activeTo);",
									"        ",
									"    }",
									"    if(scope.name === \"DG_MARE\"){",
									"        postman.setGlobalVariable(\"DG_MARE_SCOPE_ID\", scope.scopeId);",
									"        postman.setGlobalVariable(\"DG_MARE_ACTIVE_FROM\", scope.activeFrom);",
									"        postman.setGlobalVariable(\"DG_MARE_ACTIVE_TO\", scope.activeTo);",
									"    }",
									"}",
									"",
									"tests[\"Response contains results\"] = responseBody.has(\"results\");",
									"",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains active from date\"] = responseBody.has(\"activeFrom\");",
									"tests[\"Response contains active to date\"] = responseBody.has(\"activeTo\");",
									"tests[\"Response contains access to data from date\"] = responseBody.has(\"dataFrom\");",
									"tests[\"Response contains access to data to date\"] = responseBody.has(\"dataTo\");",
									"tests[\"Response contains update datasets attribute\"] = responseBody.has(\"updateDatasets\");",
									"tests[\"Response contains datasets attribute\"] = responseBody.has(\"dataSets\");",
									"tests[\"Response contains scope id's\"] = responseBody.has(\"scopeId\");",
									"tests[\"Response contains status attribute\"] = responseBody.has(\"status\");",
									"tests[\"Response contains scope names\"] = responseBody.has(\"name\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_share\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/scopes"
					},
					"response": []
				},
				{
					"name": "edit_EC_datasets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains active from date\"] = responseBody.has(\"activeFrom\");",
									"tests[\"Response contains active to date\"] = responseBody.has(\"activeTo\");",
									"tests[\"Response contains access to data from date\"] = responseBody.has(\"dataFrom\");",
									"tests[\"Response contains access to data to date\"] = responseBody.has(\"dataTo\");",
									"tests[\"Response contains update datasets attribute\"] = responseBody.has(\"updateDatasets\");",
									"tests[\"Response contains datasets attribute\"] = responseBody.has(\"dataSets\");",
									"tests[\"Response contains scope id's\"] = responseBody.has(\"scopeId\");",
									"tests[\"Response contains status attribute\"] = responseBody.has(\"status\");",
									"tests[\"Response contains scope names\"] = responseBody.has(\"name\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"updateDatasets\": true,\r\n\t\"status\": \"E\",\r\n\t\"name\": \"EC\",\r\n\t\"activeFrom\": \"{{EC_ACTIVE_FROM}}\",\r\n\t\"activeTo\": \"{{EC_ACTIVE_TO}}\",\r\n\t\"scopeId\": {{EC_SCOPE_ID}},\r\n\t\"dataSets\": [{{dataSets}}]\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/scopes"
					},
					"response": []
				},
				{
					"name": "edit_DG_MARE_datasets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains active from date\"] = responseBody.has(\"activeFrom\");",
									"tests[\"Response contains active to date\"] = responseBody.has(\"activeTo\");",
									"tests[\"Response contains access to data from date\"] = responseBody.has(\"dataFrom\");",
									"tests[\"Response contains access to data to date\"] = responseBody.has(\"dataTo\");",
									"tests[\"Response contains update datasets attribute\"] = responseBody.has(\"updateDatasets\");",
									"tests[\"Response contains datasets attribute\"] = responseBody.has(\"dataSets\");",
									"tests[\"Response contains scope id's\"] = responseBody.has(\"scopeId\");",
									"tests[\"Response contains status attribute\"] = responseBody.has(\"status\");",
									"tests[\"Response contains scope names\"] = responseBody.has(\"name\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"updateDatasets\": true,\r\n\t\"status\": \"E\",\r\n\t\"name\": \"EC\",\r\n\t\"activeFrom\": \"{{EC_ACTIVE_FROM}}\",\r\n\t\"activeTo\": \"{{EC_ACTIVE_TO}}\",\r\n\t\"scopeId\": {{EC_SCOPE_ID}},\r\n\t\"dataSets\": [{{dataSets}}]\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/scopes"
					},
					"response": []
				}
			]
		},
		{
			"name": "02 NegativeTests",
			"item": [
				{
					"name": "authenticate with wrong user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is false\"] = data.authenticated === false;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is null\"] = data.jwtoken === null;",
									"tests[\"session id is null\"] = data.sessionId === null;",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"{{$guid}}\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "authenticate with wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is false\"] = data.authenticated === false;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is null\"] = data.jwtoken === null;",
									"tests[\"session id is null\"] = data.sessionId === null;",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_power\",\n   \"password\": \"{{$guid}}\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "authenticate rep_share",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_share\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "Create Report No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 403\"] = responseCode.code === 403;",
									"",
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Error message is Forbidden\"] = jsonObject.html.body === \"Forbidden\";",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"private\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 50\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Report No Scope ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Error message is USER_SCOPE_MISSING\"] = jsonData.msg === \"USER_SCOPE_MISSING\";"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"private\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 50\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Report No Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Error message is Unable to get user context and/or user features.\"] = jsonObject.html.body === \"Unable to get user context and/or user features.\";",
									"",
									"tests[\"Status code is 401 - Unauthorized\"] = responseCode.code === 401;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"private\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 50\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Report for Negative Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"negativeReportId\", jsonData.data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Public visibility\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"private\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 50\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "authenticate rep_power",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_power\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "Run Report No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 403\"] = responseCode.code === 403;",
									"",
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Error message is Forbidden\"] = jsonObject.html.body === \"Forbidden\";",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{negativeReportId}}"
					},
					"response": []
				},
				{
					"name": "Run Report No Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"",
									"tests[\"Response is: No report found with id\"] = responseBody.has(\"No report found with id\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response contains 500 code\"] = jsonData.code === 500;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{negativeReportId}}"
					},
					"response": []
				},
				{
					"name": "Run Report No Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Error message is Unable to get user context and/or user features.\"] = jsonObject.html.body === \"Unable to get user context and/or user features.\";",
									"",
									"tests[\"Status code is 401 - Unaothorized\"] = responseCode.code === 401;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/44444"
					},
					"response": []
				},
				{
					"name": "Delete Report No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 403\"] = responseCode.code === 403;",
									"",
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Error message is Forbidden\"] = jsonObject.html.body === \"Forbidden\";",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{negativeReportId}}"
					},
					"response": []
				},
				{
					"name": "Delete Report No Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{negativeReportId}}"
					},
					"response": []
				},
				{
					"name": "Delete Report No Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Error message is Unable to get user context and/or user features.\"] = jsonObject.html.body === \"Unable to get user context and/or user features.\";",
									"",
									"tests[\"Status code is 401 - Unaothorized\"] = responseCode.code === 401;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{negativeReportId}}"
					},
					"response": []
				},
				{
					"name": "Create User Area No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 403\"] = responseCode.code === 403;",
									"",
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Error message is Forbidden\"] = jsonObject.html.body === \"Forbidden\";",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n        \"type\": \"MultiPolygon\",\r\n          \"coordinates\": [\r\n            [\r\n                [\r\n                    [-99.028, 46.985], [-99.028, 50.979],\r\n                    [-82.062, 50.979], [-82.062, 47.002],\r\n                    [-99.028, 46.985]\r\n                ]\r\n            ],\r\n            [\r\n                [\r\n                    [-109.028, 36.985], [-109.028, 40.979],\r\n                    [-102.062, 40.979], [-102.062, 37.002],\r\n                    [-109.028, 36.985]\r\n                ]\r\n             ]\r\n          ]\r\n  },\r\n  \"properties\": {\r\n    \"name\": \"{{$guid}}\",\r\n    \"description\": \"Test description 2\",\r\n    \"startDate\": \"2015-10-11T13:02:23\",\r\n    \"endDate\": \"2015-10-11T13:02:23\",\r\n    \"subType\": \"ABC\",\r\n    \"isShared\": \"true\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/userarea"
					},
					"response": []
				},
				{
					"name": "Create User Area No Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Error message is Unable to get user context and/or user features.\"] = jsonObject.html.body === \"Unable to get user context and/or user features.\";",
									"",
									"tests[\"Status code is 401 - Unaothorized\"] = responseCode.code === 401;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n        \"type\": \"MultiPolygon\",\r\n          \"coordinates\": [\r\n            [\r\n                [\r\n                    [-99.028, 46.985], [-99.028, 50.979],\r\n                    [-82.062, 50.979], [-82.062, 47.002],\r\n                    [-99.028, 46.985]\r\n                ]\r\n            ],\r\n            [\r\n                [\r\n                    [-109.028, 36.985], [-109.028, 40.979],\r\n                    [-102.062, 40.979], [-102.062, 37.002],\r\n                    [-109.028, 36.985]\r\n                ]\r\n             ]\r\n          ]\r\n  },\r\n  \"properties\": {\r\n    \"name\": \"{{$guid}}\",\r\n    \"description\": \"Test description 2\",\r\n    \"startDate\": \"2015-10-11T13:02:23\",\r\n    \"endDate\": \"2015-10-11T13:02:23\",\r\n    \"subType\": \"ABC\",\r\n    \"isShared\": \"true\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/userarea"
					},
					"response": []
				},
				{
					"name": "Create Asset No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 403\"] = responseCode.code === 403;",
									"",
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Error message is Forbidden\"] = jsonObject.html.body === \"Forbidden\";"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var randomtext=\"\";",
									"var charset = \"abcdefghijklmnopqrstuvwxyz0123456789\";",
									"",
									"    for( var i=0; i < 8; i++ )",
									"        randomtext += charset.charAt(Math.floor(Math.random() * charset.length));",
									"       ",
									"var uniqueCFR = \"ROU0\"+randomtext;",
									"var uniqueIRCS = randomtext;",
									"",
									"postman.setGlobalVariable(\"assetCFR\", uniqueCFR);",
									"postman.setGlobalVariable(\"assetIRCS\", uniqueIRCS);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\": true,\n    \"source\": \"INTERNAL\",\n    \"cfr\": \"{{assetCFR}}\",\n    \"name\": \"Test Name\",\n    \"countryCode\": \"ROU\",\n    \"imo\": null,\n    \"externalMarking\": \"ExtTest\",\n    \"hasIrcs\": \"Y\",\n    \"ircs\": \"{{assetIRCS}}\",\n    \"hasLicense\": false,\n    \"powerMain\": null,\n    \"grossTonnage\": null,\n    \"grossTonnageUnit\": \"LONDON\",\n    \"contact\": [],\n    \"producer\": {\n        \"code\": null\n    },\n    \"notes\": []\n}\n"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/asset/rest/asset"
					},
					"response": []
				},
				{
					"name": "Create Draft Position No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"tests[\"Status code is 403\"] = responseCode.code === 403;",
									"",
									"try{",
									"    var jsonObject = xml2Json(responseBody);",
									"    tests[\"Error message is Forbidden\"] = jsonObject.html.body === \"Forbidden\";",
									"",
									"} catch(e){",
									"    tests[\"Format failed\"] = false;",
									"}",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"speed\": 10,\r\n    \"course\": 15,\r\n    \"time\": \"2017-02-01 16:00:15 +00:00\",\r\n    \"status\": \"010\",\r\n    \"state\": \"DRAFT\",\r\n    \"asset\": {\r\n        \"cfr\": \"{{assetCFR}}\",\r\n        \"name\": \"Test Name\",\r\n        \"extMarking\": \"ExtTest\",\r\n        \"ircs\": \"{{assetIRCS}}\",\r\n        \"flagState\": \"ROU\"\r\n    },\r\n    \"position\": {\r\n        \"longitude\": \"29.970703124999996\",\r\n        \"latitude\": \"44.809121700077355\"\r\n    }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/movement/rest/tempmovement"
					},
					"response": []
				},
				{
					"name": "Create Sent Position No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 403\"] = responseCode.code === 403;",
									"",
									"try{",
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Error message is Forbidden\"] = jsonObject.html.body === \"Forbidden\";",
									"} catch(e){",
									"    tests[\"Format failed\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"guid\": \"{{position1_guid}}\",\r\n    \"speed\": 10,\r\n    \"course\": 15,\r\n    \"time\": \"2017-02-01 16:00:15 +0000\",\r\n    \"updatedTime\": \"2017-02-14 16:01:53 +0000\",\r\n    \"status\": \"010\",\r\n    \"state\": \"DRAFT\",\r\n    \"carrier\": {\r\n        \"cfr\": \"ROU0ptl7ja1t\",\r\n        \"name\": \"Test Name\",\r\n        \"externalMarking\": \"ExtTest\",\r\n        \"ircs\": \"ptl7ja1t\",\r\n        \"flagState\": \"ROU\"\r\n    },\r\n    \"position\": {\r\n        \"longitude\": 29.970703124999998,\r\n        \"latitude\": 44.809121700077358\r\n    }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/movement/rest/tempmovement/send/{{position1_guid}}"
					},
					"response": []
				},
				{
					"name": "Check Asset List No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 403\"] = responseCode.code === 403;",
									"",
									"try{",
									"var jsonObject = xml2Json(responseBody);",
									"tests[\"Error message is Forbidden\"] = jsonObject.html.body === \"Forbidden\";",
									"} catch(e){",
									"    tests[\"Format failed\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pagination\": {\r\n    \"page\": 1,\r\n    \"listSize\": 100000\r\n  },\r\n  \"assetSearchCriteria\": {\r\n    \"isDynamic\": false,\r\n    \"criterias\": [\r\n           {\r\n        \"key\": \"CFR\",\r\n        \"value\": \"{{assetCFR}}\"\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/asset/rest/asset/list"
					},
					"response": []
				},
				{
					"name": "authenticate rep_share",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_share\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "List Should Contain Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Report list does contain the negative report\"] = responseBody.has(globals.negativeReportId);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/list"
					},
					"response": []
				}
			]
		},
		{
			"name": "03 Preferences - Admin",
			"item": [
				{
					"name": "authenticate rep_power",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_power\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "Get Admin Settings Values",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Response contains the tool settings\"] = responseBody.has(\"toolSettings\");",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the system settings\"] = responseBody.has(\"systemSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"postman.setEnvironmentVariable(\"adminSettings\", JSON.stringify(jsonData.data));",
									"postman.setEnvironmentVariable(\"initialAdminSettings\", JSON.stringify(jsonData.data));",
									"",
									"",
									"",
									"postman.setEnvironmentVariable(\"geoserverURL\", jsonData.data.systemSettings.geoserverUrl);",
									"postman.setEnvironmentVariable(\"mapSettingsVar\", JSON.stringify(jsonData.data.mapSettings));",
									"postman.setEnvironmentVariable(\"stylesSettingsVar\", JSON.stringify(jsonData.data.stylesSettings));",
									"postman.setEnvironmentVariable(\"visibilitySettingsVar\", JSON.stringify(jsonData.data.visibilitySettings));",
									"postman.setEnvironmentVariable(\"layerSettingsVar\", JSON.stringify(jsonData.data.layerSettings));",
									"postman.setEnvironmentVariable(\"refDataSettingsVar\", JSON.stringify(jsonData.data.referenceDataSettings));",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin"
					},
					"response": []
				},
				{
					"name": "Set Geoserver URL Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var adminSettingsJSON = JSON.parse(environment.adminSettings);",
									"",
									"adminSettingsJSON.systemSettings={};",
									"adminSettingsJSON.systemSettings.geoserverUrl = \"http://testurl.com/\";",
									"",
									"postman.setEnvironmentVariable(\"adminSettings\", JSON.stringify(adminSettingsJSON));",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{adminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin/save"
					},
					"response": []
				},
				{
					"name": "Verify Updated Geoserver URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Geoserver URL has been updated\"] = jsonData.data.systemSettings.geoserverUrl === \"http://testurl.com/\";",
									"",
									"tests[\"Response contains the tool settings\"] = responseBody.has(\"toolSettings\");",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the system settings\"] = responseBody.has(\"systemSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin"
					},
					"response": []
				},
				{
					"name": "Reset Admin Settings to Initial Values",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{initialAdminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin/save"
					},
					"response": []
				},
				{
					"name": "Verify Reset of Admin Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Initial admin settings have been restored\"] = JSON.stringify(jsonData.data) === environment.initialAdminSettings;",
									"",
									"tests[\"Response contains the tool settings\"] = responseBody.has(\"toolSettings\");",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the system settings\"] = responseBody.has(\"systemSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin"
					},
					"response": []
				},
				{
					"name": "Modify Map Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var adminSettingsJSON = JSON.parse(environment.adminSettings);",
									"",
									"adminSettingsJSON.mapSettings.refreshStatus = false;",
									"adminSettingsJSON.mapSettings.scaleBarUnits = \"metric\";",
									"adminSettingsJSON.mapSettings.coordinatesFormat = \"m\";",
									"adminSettingsJSON.mapSettings.mapProjectionId = 2;",
									"adminSettingsJSON.mapSettings.refreshRate = 150;",
									"adminSettingsJSON.mapSettings.displayProjectionId = 1;",
									"",
									"postman.setEnvironmentVariable(\"adminSettings\", JSON.stringify(adminSettingsJSON));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{adminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin/save"
					},
					"response": []
				},
				{
					"name": "Verify Updated Map Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Refresh status setting has been updated\"] = jsonData.data.mapSettings.refreshStatus === false;",
									"tests[\"Scale bar units setting has been updated\"] = jsonData.data.mapSettings.scaleBarUnits === \"metric\";",
									"tests[\"Coordinates format setting has been updated\"] = jsonData.data.mapSettings.coordinatesFormat === \"m\";",
									"tests[\"Map projection setting has been updated\"] = jsonData.data.mapSettings.mapProjectionId === 2;",
									"tests[\"Refresh rate setting has been updated\"] = jsonData.data.mapSettings.refreshRate === 150;",
									"tests[\"Display projection setting has been updated\"] = jsonData.data.mapSettings.displayProjectionId === 1;",
									"",
									"tests[\"Response contains the tool settings\"] = responseBody.has(\"toolSettings\");",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the system settings\"] = responseBody.has(\"systemSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin"
					},
					"response": []
				},
				{
					"name": "Reset Admin Settings to Initial Values",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{initialAdminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin/save"
					},
					"response": []
				},
				{
					"name": "Verify Reset of Admin Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Initial admin settings have been restored\"] = JSON.stringify(jsonData.data) === environment.initialAdminSettings;",
									"",
									"tests[\"Response contains the tool settings\"] = responseBody.has(\"toolSettings\");",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the system settings\"] = responseBody.has(\"systemSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin"
					},
					"response": []
				},
				{
					"name": "Modify Styles Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var adminSettingsJSON = JSON.parse(environment.adminSettings);",
									"",
									"adminSettingsJSON.stylesSettings.positions.style.ROU = \"#000000\";",
									"adminSettingsJSON.stylesSettings.segments.style.lineWidth = \"3\";",
									"adminSettingsJSON.stylesSettings.alarms.size = \"5\";",
									"",
									"",
									"postman.setEnvironmentVariable(\"adminSettings\", JSON.stringify(adminSettingsJSON));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{adminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin/save"
					},
					"response": []
				},
				{
					"name": "Verify Updated Styles Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Position style setting for one country has been updated\"] = jsonData.data.stylesSettings.positions.style.ROU === \"#000000\";",
									"tests[\"Segment line width setting has been updated\"] = jsonData.data.stylesSettings.segments.style.lineWidth === \"3\";",
									"tests[\"Alarms size setting has been updated\"] = jsonData.data.stylesSettings.alarms.size === 5;",
									"",
									"tests[\"Response contains the tool settings\"] = responseBody.has(\"toolSettings\");",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the system settings\"] = responseBody.has(\"systemSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin"
					},
					"response": []
				},
				{
					"name": "Modify Visibility Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var adminSettingsJSON = JSON.parse(environment.adminSettings);",
									"",
									"adminSettingsJSON.visibilitySettings.positions.labels.values = [];",
									"adminSettingsJSON.visibilitySettings.positions.popup.values = [];",
									"adminSettingsJSON.visibilitySettings.positions.table.values = [];",
									"adminSettingsJSON.visibilitySettings.segments.labels.values = [];",
									"adminSettingsJSON.visibilitySettings.segments.popup.values = [];",
									"adminSettingsJSON.visibilitySettings.segments.table.values = [];",
									"adminSettingsJSON.visibilitySettings.tracks.table.values = [];",
									"",
									"",
									"postman.setEnvironmentVariable(\"adminSettings\", JSON.stringify(adminSettingsJSON));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{adminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin/save"
					},
					"response": []
				},
				{
					"name": "Verify Updated Visibility Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Positions popup visibility setting has been updated\"] = jsonData.data.visibilitySettings.positions.popup.hasOwnProperty('values') === false;",
									"tests[\"Positions labels visibility setting has been updated\"] = jsonData.data.visibilitySettings.positions.labels.hasOwnProperty('values') === false;",
									"tests[\"Positions table visibility setting has been updated\"] = jsonData.data.visibilitySettings.positions.table.hasOwnProperty('values') === false;",
									"tests[\"Segments popup visibility setting has been updated\"] = jsonData.data.visibilitySettings.segments.popup.hasOwnProperty('values') === false;",
									"tests[\"Segments labels visibility setting has been updated\"] = jsonData.data.visibilitySettings.segments.labels.hasOwnProperty('values') === false;",
									"tests[\"Segments table visibility setting has been updated\"] = jsonData.data.visibilitySettings.segments.table.hasOwnProperty('values') === false;",
									"tests[\"Tracks table visibility setting has been updated\"] = jsonData.data.visibilitySettings.tracks.table.hasOwnProperty('values') === false;",
									"",
									"tests[\"Response contains the tool settings\"] = responseBody.has(\"toolSettings\");",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the system settings\"] = responseBody.has(\"systemSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin"
					},
					"response": []
				},
				{
					"name": "Reset Admin Settings to Initial Values",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{initialAdminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin/save"
					},
					"response": []
				},
				{
					"name": "Verify Reset of Admin Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Initial admin settings have been restored\"] = JSON.stringify(jsonData.data) === environment.initialAdminSettings;",
									"",
									"tests[\"Response contains the tool settings\"] = responseBody.has(\"toolSettings\");",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the system settings\"] = responseBody.has(\"systemSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin"
					},
					"response": []
				},
				{
					"name": "Modify Layer Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7e9043e-9d8a-4369-99d5-9c3e829b3172",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2474d95a-fa70-4e0f-a151-df3e30418101",
								"type": "text/javascript",
								"exec": [
									"var adminSettingsJSON = JSON.parse(environment.adminSettings);",
									"",
									"adminSettingsJSON.layerSettings = {",
									"    \"baseLayers\": [",
									"      {",
									"        \"serviceLayerId\": \"13\",",
									"        \"order\": 0",
									"      }",
									"    ]",
									"  };",
									"",
									"",
									"",
									"postman.setEnvironmentVariable(\"adminSettings\", JSON.stringify(adminSettingsJSON));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{adminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin/save"
					},
					"response": []
				},
				{
					"name": "Verify Updated Layer Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "778acdcb-e00f-40b8-b869-5f10f3a4e483",
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Background layers have been updated\"] = jsonData.data.layerSettings.baseLayers[0].name === \"FAO\";",
									"tests[\"Port layers have been updated\"] = jsonData.data.layerSettings.hasOwnProperty('portLayers') === false;",
									"tests[\"Area layers have been updated\"] = jsonData.data.layerSettings.hasOwnProperty('areaLayers') === false;",
									"tests[\"Additional Cartographies layers have been updated\"] = jsonData.data.layerSettings.hasOwnProperty('additionalLayers') === false;",
									"",
									"tests[\"Response contains the tool settings\"] = responseBody.has(\"toolSettings\");",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the system settings\"] = responseBody.has(\"systemSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"} catch(e){",
									"    tests[\"unexpected json format\"] = false;",
									"}",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin"
					},
					"response": []
				},
				{
					"name": "Reset Admin Settings to Initial Values",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{initialAdminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin/save"
					},
					"response": []
				},
				{
					"name": "Verify Reset of Admin Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Initial admin settings have been restored\"] = JSON.stringify(jsonData.data) === environment.initialAdminSettings;",
									"",
									"tests[\"Response contains the tool settings\"] = responseBody.has(\"toolSettings\");",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the system settings\"] = responseBody.has(\"systemSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin"
					},
					"response": []
				},
				{
					"name": "Modify Reference Data Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var adminSettingsJSON = JSON.parse(environment.adminSettings);",
									"",
									"adminSettingsJSON.referenceDataSettings = {",
									"    \"EEZ\": {",
									"      \"selection\": \"custom\",",
									"      \"codes\": [",
									"        \"DNK\"",
									"      ]",
									"    },",
									"    \"RFMO\": {",
									"      \"selection\": \"custom\",",
									"      \"codes\": []",
									"    },",
									"    \"GFCM\": {",
									"      \"selection\": \"custom\",",
									"      \"codes\": []",
									"    },",
									"    \"FAO\": {",
									"      \"selection\": \"custom\",",
									"      \"codes\": []",
									"    },",
									"    \"FMZ\": {",
									"      \"selection\": \"custom\",",
									"      \"codes\": []",
									"    },",
									"    \"STATRECT\": {",
									"      \"selection\": \"custom\",",
									"      \"codes\": []",
									"    },",
									"    \"PORT\": {",
									"      \"selection\": \"custom\",",
									"      \"codes\": []",
									"    },",
									"    \"PORTAREA\": {",
									"      \"selection\": \"custom\",",
									"      \"codes\": []",
									"    }",
									"  };",
									"",
									"postman.setEnvironmentVariable(\"adminSettings\", JSON.stringify(adminSettingsJSON));",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{adminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin/save"
					},
					"response": []
				},
				{
					"name": "Verify Updated Reference Data Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"EEZ settings have been updated\"] = jsonData.data.referenceDataSettings.EEZ.selection === \"custom\";",
									"tests[\"EEZ country settings have been updated\"] = jsonData.data.referenceDataSettings.EEZ.codes[0] === \"DNK\";",
									"tests[\"RFMO settings have been updated\"] = jsonData.data.referenceDataSettings.RFMO.selection === \"custom\";",
									"tests[\"GFCM settings have been updated\"] = jsonData.data.referenceDataSettings.GFCM.selection === \"custom\";",
									"tests[\"FAO settings have been updated\"] = jsonData.data.referenceDataSettings.FAO.selection === \"custom\";",
									"tests[\"FMZ settings have been updated\"] = jsonData.data.referenceDataSettings.FMZ.selection === \"custom\";",
									"tests[\"STATRECT settings have been updated\"] = jsonData.data.referenceDataSettings.STATRECT.selection === \"custom\";",
									"tests[\"PORT settings have been updated\"] = jsonData.data.referenceDataSettings.PORT.selection === \"custom\";",
									"tests[\"PORTAREA settings have been updated\"] = jsonData.data.referenceDataSettings.PORTAREA.selection === \"custom\";",
									"",
									"",
									"tests[\"Response contains the tool settings\"] = responseBody.has(\"toolSettings\");",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the system settings\"] = responseBody.has(\"systemSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin"
					},
					"response": []
				},
				{
					"name": "Reset Admin Settings to Initial Values",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{initialAdminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin/save"
					},
					"response": []
				},
				{
					"name": "Verify Reset of Admin Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Initial admin settings have been restored\"] = JSON.stringify(jsonData.data) === environment.initialAdminSettings;",
									"",
									"tests[\"Response contains the tool settings\"] = responseBody.has(\"toolSettings\");",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the system settings\"] = responseBody.has(\"systemSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/admin"
					},
					"response": []
				}
			]
		},
		{
			"name": "04 Preferences - Report",
			"item": [
				{
					"name": "authenticate rep_power",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_power\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "Create Report Map Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"reportMapSettings\", jsonData.data.id);",
									"",
									"tests[\"Check report name\"] = jsonData.data.name === \"Map Configuration Report\";",
									"tests[\"Check report visibility\"] = jsonData.data.visibility === \"private\";",
									"tests[\"Check report author\"] = jsonData.data.createdBy === \"rep_power\";",
									"tests[\"Check report map visibility\"] = jsonData.data.withMap === true;",
									"tests[\"Check report type\"] = jsonData.data.reportType === \"standard\";"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Map Configuration Report\",\n    \"reportType\": \"standard\",\n    \"visibility\": \"private\",\n    \"withMap\": true,\n    \"filterExpression\": {\n        \"common\": {\n            \"positionSelector\": \"last\",\n            \"positionTypeSelector\": \"positions\",\n            \"xValue\": 3\n        },\n        \"assets\": [],\n        \"vms\": {},\n        \"areas\": []\n    },\n    \"mapConfiguration\": {\n        \"coordinatesFormat\": \"dms\",\n        \"displayProjectionId\": 2,\n        \"mapProjectionId\": 1,\n        \"scaleBarUnits\": \"degrees\"\n    }\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Report Map Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Verify coordinates format setting\"] = jsonData.data.mapConfiguration.coordinatesFormat === \"dms\";",
									"tests[\"Verify display projection setting\"] = jsonData.data.mapConfiguration.displayProjectionId === 2;",
									"tests[\"Verify map projection setting\"] = jsonData.data.mapConfiguration.mapProjectionId === 1;",
									"tests[\"Verify scale bar units setting\"] = jsonData.data.mapConfiguration.scaleBarUnits === \"degrees\";",
									"",
									"tests[\"Check report name\"] = jsonData.data.name === \"Map Configuration Report\";",
									"tests[\"Check report visibility\"] = jsonData.data.visibility === \"private\";",
									"tests[\"Check report author\"] = jsonData.data.createdBy === \"rep_power\";",
									"tests[\"Check report map visibility\"] = jsonData.data.withMap === true;",
									"tests[\"Check report type\"] = jsonData.data.reportType === \"standard\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Map Configuration Report\",\n    \"reportType\": \"standard\",\n    \"visibility\": \"private\",\n    \"withMap\": true,\n    \"filterExpression\": {\n        \"common\": {\n            \"positionSelector\": \"last\",\n            \"positionTypeSelector\": \"positions\",\n            \"xValue\": 3\n        },\n        \"assets\": [],\n        \"vms\": {},\n        \"areas\": []\n    },\n    \"mapConfiguration\": {\n        \"coordinatesFormat\": \"dms\",\n        \"displayProjectionId\": 2,\n        \"mapProjectionId\": 1,\n        \"scaleBarUnits\": \"degrees\"\n    }\n}\n"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{reportMapSettings}}"
					},
					"response": []
				},
				{
					"name": "Create Report Style  Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"reportStyleSettings\", jsonData.data.id);",
									"",
									"tests[\"Check report name\"] = jsonData.data.name === \"Style Settings\";",
									"tests[\"Check report visibility\"] = jsonData.data.visibility === \"public\";",
									"tests[\"Check report author\"] = jsonData.data.createdBy === \"rep_power\";",
									"tests[\"Check report map visibility\"] = jsonData.data.withMap === true;",
									"tests[\"Check report type\"] = jsonData.data.reportType === \"standard\";"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Style Settings\",\r\n    \"reportType\": \"standard\",\r\n    \"visibility\": \"public\",\r\n    \"withMap\": true,\r\n    \"filterExpression\": {\r\n        \"common\": {\r\n            \"positionSelector\": \"last\",\r\n            \"positionTypeSelector\": \"positions\",\r\n            \"xValue\": 3\r\n        },\r\n        \"assets\": [],\r\n        \"vms\": {},\r\n        \"areas\": []\r\n    },\r\n    \"mapConfiguration\": {\r\n        \"stylesSettings\": {\r\n            \"positions\": {\r\n                \"attribute\": \"reportedCourse\",\r\n                \"style\": {\r\n                    \"0-12\": \"#6e2c2c\",\r\n                    \"default\": \"#ab2323\"\r\n                }\r\n            },\r\n            \"segments\": {\r\n                \"attribute\": \"speedOverGround\",\r\n                \"style\": {\r\n                    \"lineStyle\": \"solid\",\r\n                    \"lineWidth\": 2,\r\n                    \"0-2\": \"#1a9641\",\r\n                    \"2-5\": \"#a6d96a\",\r\n                    \"5-8\": \"#fdae61\",\r\n                    \"8-10\": \"#d41b1b\",\r\n                    \"default\": \"#d7191c\"\r\n                }\r\n            },\r\n            \"alarms\": {\r\n                \"size\": 4,\r\n                \"open\": \"#FF0000\",\r\n                \"closed\": \"#008000\",\r\n                \"pending\": \"#FFA500\",\r\n                \"none\": \"#198BAF\"\r\n            }\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Report Style Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Verify reported course style\"] = jsonData.data.mapConfiguration.stylesSettings.positions.attribute === \"reportedCourse\";",
									"tests[\"Verify reported course style setting\"] = jsonData.data.mapConfiguration.stylesSettings.positions.style[\"0-12\"] === \"#6e2c2c\";",
									"tests[\"Verify reported course style\"] = jsonData.data.mapConfiguration.stylesSettings.segments.attribute === \"speedOverGround\";",
									"tests[\"Verify speed Over Ground style setting\"] = jsonData.data.mapConfiguration.stylesSettings.segments.style[\"8-10\"] === \"#d41b1b\";",
									"tests[\"Verify alarms style setting\"] = jsonData.data.mapConfiguration.stylesSettings.alarms.size === 4;",
									"",
									"tests[\"Check report name\"] = jsonData.data.name === \"Style Settings\";",
									"tests[\"Check report visibility\"] = jsonData.data.visibility === \"public\";",
									"tests[\"Check report author\"] = jsonData.data.createdBy === \"rep_power\";",
									"tests[\"Check report map visibility\"] = jsonData.data.withMap === true;",
									"tests[\"Check report type\"] = jsonData.data.reportType === \"standard\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Map Configuration Report\",\n    \"reportType\": \"standard\",\n    \"visibility\": \"private\",\n    \"withMap\": true,\n    \"filterExpression\": {\n        \"common\": {\n            \"positionSelector\": \"last\",\n            \"positionTypeSelector\": \"positions\",\n            \"xValue\": 3\n        },\n        \"assets\": [],\n        \"vms\": {},\n        \"areas\": []\n    },\n    \"mapConfiguration\": {\n        \"coordinatesFormat\": \"dms\",\n        \"displayProjectionId\": 2,\n        \"mapProjectionId\": 1,\n        \"scaleBarUnits\": \"degrees\"\n    }\n}\n"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{reportStyleSettings}}"
					},
					"response": []
				},
				{
					"name": "Create Report Visibility Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"reportStyleSettings\", jsonData.data.id);",
									"",
									"tests[\"Check report name\"] = jsonData.data.name === \"Visibility Settings\";",
									"tests[\"Check report visibility\"] = jsonData.data.visibility === \"public\";",
									"tests[\"Check report author\"] = jsonData.data.createdBy === \"rep_power\";",
									"tests[\"Check report map visibility\"] = jsonData.data.withMap === true;",
									"tests[\"Check report type\"] = jsonData.data.reportType === \"standard\";"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Visibility Settings\",\r\n    \"reportType\": \"standard\",\r\n    \"visibility\": \"public\",\r\n    \"withMap\": true,\r\n    \"filterExpression\": {\r\n        \"common\": {\r\n            \"positionSelector\": \"last\",\r\n            \"positionTypeSelector\": \"positions\",\r\n            \"xValue\": 10\r\n        },\r\n        \"assets\": [],\r\n        \"vms\": {},\r\n        \"areas\": []\r\n    },\r\n    \"mapConfiguration\": {\r\n        \"visibilitySettings\": {\r\n            \"positions\": {\r\n                \"table\": {\r\n                    \"values\": [\"fs\"],\r\n                    \"order\": [\"fs\", \"extMark\", \"ircs\", \"cfr\", \"posTime\", \"lon\", \"lat\", \"stat\", \"m_spd\", \"c_spd\", \"crs\", \"msg_tp\", \"act_tp\", \"source\", \"name\"]\r\n                },\r\n                \"popup\": {\r\n                    \"values\": [\"fs\"],\r\n                    \"order\": [\"fs\", \"extMark\", \"ircs\", \"cfr\", \"posTime\", \"crs\", \"c_spd\", \"m_spd\", \"stat\", \"lat\", \"lon\", \"msg_tp\", \"act_tp\", \"source\", \"name\"],\r\n                    \"isAttributeVisible\": true\r\n                },\r\n                \"labels\": {\r\n                    \"values\": [\"fs\"],\r\n                    \"order\": [\"fs\", \"extMark\", \"ircs\", \"cfr\", \"posTime\", \"lon\", \"lat\", \"stat\", \"m_spd\", \"c_spd\", \"crs\", \"msg_tp\", \"act_tp\", \"source\", \"name\"],\r\n                    \"isAttributeVisible\": true\r\n                }\r\n            },\r\n            \"segments\": {\r\n                \"table\": {\r\n                    \"values\": [\"extMark\"],\r\n                    \"order\": [\"extMark\", \"ircs\", \"cfr\", \"dist\", \"cat\", \"crs\", \"spd\", \"dur\", \"fs\", \"name\"]\r\n                },\r\n                \"popup\": {\r\n                    \"values\": [\"extMark\"],\r\n                    \"order\": [\"fs\", \"extMark\", \"ircs\", \"cfr\", \"dist\", \"dur\", \"spd\", \"crs\", \"cat\", \"name\"],\r\n                    \"isAttributeVisible\": true\r\n                },\r\n                \"labels\": {\r\n                    \"values\": [\"ircs\"],\r\n                    \"order\": [\"extMark\", \"ircs\", \"cfr\", \"dist\", \"cat\", \"crs\", \"spd\", \"dur\", \"fs\", \"name\"],\r\n                    \"isAttributeVisible\": true\r\n                }\r\n            },\r\n            \"tracks\": {\r\n                \"table\": {\r\n                    \"values\": [\"dur\"],\r\n                    \"order\": [\"fs\", \"extMark\", \"ircs\", \"cfr\", \"name\", \"dist\", \"dur\", \"timeSea\"]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Report Visibility Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Verify positions popup order\"] = jsonData.data.mapConfiguration.visibilitySettings.positions.popup.values[0] === \"fs\";",
									"tests[\"Verify positions popup number of attributes\"] = jsonData.data.mapConfiguration.visibilitySettings.positions.popup.values.length === 1;",
									"tests[\"Verify positions labels order\"] = jsonData.data.mapConfiguration.visibilitySettings.positions.labels.values[0] === \"fs\";",
									"tests[\"Verify positions labels number of attributes\"] = jsonData.data.mapConfiguration.visibilitySettings.positions.labels.values.length === 1;",
									"tests[\"Verify positions table order\"] = jsonData.data.mapConfiguration.visibilitySettings.positions.table.values[0] === \"fs\";",
									"tests[\"Verify positions table number of attributes\"] = jsonData.data.mapConfiguration.visibilitySettings.positions.table.values.length === 1;",
									"tests[\"Verify segments popup order\"] = jsonData.data.mapConfiguration.visibilitySettings.segments.popup.values[0] === \"extMark\";",
									"tests[\"Verify segments popup number of attributes\"] = jsonData.data.mapConfiguration.visibilitySettings.segments.popup.values.length === 1;",
									"tests[\"Verify segments labels order\"] = jsonData.data.mapConfiguration.visibilitySettings.segments.labels.values[0] === \"ircs\";",
									"tests[\"Verify segments labels number of attributes\"] = jsonData.data.mapConfiguration.visibilitySettings.segments.labels.values.length === 1;",
									"tests[\"Verify segments table order\"] = jsonData.data.mapConfiguration.visibilitySettings.segments.table.values[0] === \"extMark\";",
									"tests[\"Verify segments table number of attributes\"] = jsonData.data.mapConfiguration.visibilitySettings.segments.table.values.length === 1;",
									"",
									"",
									"tests[\"Check report name\"] = jsonData.data.name === \"Visibility Settings\";",
									"tests[\"Check report visibility\"] = jsonData.data.visibility === \"public\";",
									"tests[\"Check report author\"] = jsonData.data.createdBy === \"rep_power\";",
									"tests[\"Check report map visibility\"] = jsonData.data.withMap === true;",
									"tests[\"Check report type\"] = jsonData.data.reportType === \"standard\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Map Configuration Report\",\n    \"reportType\": \"standard\",\n    \"visibility\": \"private\",\n    \"withMap\": true,\n    \"filterExpression\": {\n        \"common\": {\n            \"positionSelector\": \"last\",\n            \"positionTypeSelector\": \"positions\",\n            \"xValue\": 3\n        },\n        \"assets\": [],\n        \"vms\": {},\n        \"areas\": []\n    },\n    \"mapConfiguration\": {\n        \"coordinatesFormat\": \"dms\",\n        \"displayProjectionId\": 2,\n        \"mapProjectionId\": 1,\n        \"scaleBarUnits\": \"degrees\"\n    }\n}\n"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{reportStyleSettings}}"
					},
					"response": []
				},
				{
					"name": "Create Report  Layer Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"try{",
									"    tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"reportLayerSettings\", jsonData.data.id);",
									"",
									"    tests[\"Check report name\"] = jsonData.data.name === \"Layer settings\";",
									"    tests[\"Check report visibility\"] = jsonData.data.visibility === \"public\";",
									"    tests[\"Check report author\"] = jsonData.data.createdBy === \"rep_power\";",
									"    tests[\"Check report map visibility\"] = jsonData.data.withMap === true;",
									"    tests[\"Check report type\"] = jsonData.data.reportType === \"standard\";",
									"}",
									" catch(e){",
									"    tests[\"Body format unexpected\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Layer settings\",\r\n    \"reportType\": \"standard\",\r\n    \"visibility\": \"public\",\r\n    \"withMap\": true,\r\n    \"filterExpression\": {\r\n        \"common\": {\r\n            \"positionSelector\": \"last\",\r\n            \"positionTypeSelector\": \"positions\",\r\n            \"xValue\": 3\r\n        },\r\n        \"assets\": [],\r\n        \"vms\": {},\r\n        \"areas\": []\r\n    },\r\n    \"mapConfiguration\": {\r\n        \"layerSettings\": {\r\n            \"portLayers\": [{\r\n                \"serviceLayerId\": \"3\",\r\n                \"order\": 0\r\n            }],\r\n            \"areaLayers\": [{\r\n                \"serviceLayerId\": \"2\",\r\n                \"areaType\": \"sysarea\",\r\n                \"order\": 0\r\n            }, {\r\n                \"serviceLayerId\": \"13\",\r\n                \"areaType\": \"sysarea\",\r\n                \"order\": 1\r\n            }],\r\n            \"additionalLayers\": [{\r\n                \"serviceLayerId\": \"6\",\r\n                \"order\": 0\r\n            }],\r\n            \"baseLayers\": [{\r\n                \"serviceLayerId\": \"14\",\r\n                \"order\": 0\r\n            }]\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TODO Check Report Layer Settings",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Map Configuration Report\",\n    \"reportType\": \"standard\",\n    \"visibility\": \"private\",\n    \"withMap\": true,\n    \"filterExpression\": {\n        \"common\": {\n            \"positionSelector\": \"last\",\n            \"positionTypeSelector\": \"positions\",\n            \"xValue\": 3\n        },\n        \"assets\": [],\n        \"vms\": {},\n        \"areas\": []\n    },\n    \"mapConfiguration\": {\n        \"coordinatesFormat\": \"dms\",\n        \"displayProjectionId\": 2,\n        \"mapProjectionId\": 1,\n        \"scaleBarUnits\": \"degrees\"\n    }\n}\n"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{reportLayerSettings}}"
					},
					"response": []
				},
				{
					"name": "Create Report  Reference Data Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"reportReferenceSettings\", jsonData.data.id);",
									"",
									"tests[\"Check report name\"] = jsonData.data.name === \"Reference Data\";",
									"tests[\"Check report visibility\"] = jsonData.data.visibility === \"public\";",
									"tests[\"Check report author\"] = jsonData.data.createdBy === \"rep_power\";",
									"tests[\"Check report map visibility\"] = jsonData.data.withMap === true;",
									"tests[\"Check report type\"] = jsonData.data.reportType === \"standard\";"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Reference Data\",\r\n    \"reportType\": \"standard\",\r\n    \"visibility\": \"public\",\r\n    \"withMap\": true,\r\n    \"filterExpression\": {\r\n        \"common\": {\r\n            \"positionSelector\": \"last\",\r\n            \"positionTypeSelector\": \"positions\",\r\n            \"xValue\": 5\r\n        },\r\n        \"assets\": [],\r\n        \"vms\": {},\r\n        \"areas\": []\r\n    },\r\n    \"mapConfiguration\": {\r\n        \"referenceDataSettings\": {\r\n            \"EEZ\": {\r\n                \"selection\": \"custom\",\r\n                \"codes\": [\"GBR\"]\r\n            },\r\n            \"RFMO\": {\r\n                \"selection\": \"custom\",\r\n                \"codes\": []\r\n            },\r\n            \"GFCM\": {\r\n                \"selection\": \"all\",\r\n                \"codes\": []\r\n            },\r\n            \"FAO\": {\r\n                \"selection\": \"all\",\r\n                \"codes\": []\r\n            },\r\n            \"FMZ\": {\r\n                \"selection\": \"all\",\r\n                \"codes\": []\r\n            },\r\n            \"STATRECT\": {\r\n                \"selection\": \"all\",\r\n                \"codes\": []\r\n            },\r\n            \"PORT\": {\r\n                \"selection\": \"all\",\r\n                \"codes\": []\r\n            },\r\n            \"PORTAREA\": {\r\n                \"selection\": \"all\",\r\n                \"codes\": []\r\n            }\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Report Reference Data Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Verify EEZ reference data selection\"] = jsonData.data.mapConfiguration.referenceDataSettings.EEZ.selection === \"custom\";",
									"tests[\"Verify EEZ reference data codes\"] = jsonData.data.mapConfiguration.referenceDataSettings.EEZ.codes[0] === \"GBR\";",
									"",
									"tests[\"Check report name\"] = jsonData.data.name === \"Reference Data\";",
									"tests[\"Check report visibility\"] = jsonData.data.visibility === \"public\";",
									"tests[\"Check report author\"] = jsonData.data.createdBy === \"rep_power\";",
									"tests[\"Check report map visibility\"] = jsonData.data.withMap === true;",
									"tests[\"Check report type\"] = jsonData.data.reportType === \"standard\";"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Map Configuration Report\",\n    \"reportType\": \"standard\",\n    \"visibility\": \"private\",\n    \"withMap\": true,\n    \"filterExpression\": {\n        \"common\": {\n            \"positionSelector\": \"last\",\n            \"positionTypeSelector\": \"positions\",\n            \"xValue\": 3\n        },\n        \"assets\": [],\n        \"vms\": {},\n        \"areas\": []\n    },\n    \"mapConfiguration\": {\n        \"coordinatesFormat\": \"dms\",\n        \"displayProjectionId\": 2,\n        \"mapProjectionId\": 1,\n        \"scaleBarUnits\": \"degrees\"\n    }\n}\n"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{reportReferenceSettings}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "05 Preferences - User",
			"item": [
				{
					"name": "authenticate rep_power",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_power\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "Get User Settings Values",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"postman.setEnvironmentVariable(\"adminSettings\", JSON.stringify(jsonData.data));",
									"postman.setEnvironmentVariable(\"initialAdminSettings\", JSON.stringify(jsonData.data));",
									"",
									"postman.setEnvironmentVariable(\"mapSettingsVar\", JSON.stringify(jsonData.data.mapSettings));",
									"postman.setEnvironmentVariable(\"stylesSettingsVar\", JSON.stringify(jsonData.data.stylesSettings));",
									"postman.setEnvironmentVariable(\"visibilitySettingsVar\", JSON.stringify(jsonData.data.visibilitySettings));",
									"postman.setEnvironmentVariable(\"layerSettingsVar\", JSON.stringify(jsonData.data.layerSettings));",
									"postman.setEnvironmentVariable(\"refDataSettingsVar\", JSON.stringify(jsonData.data.referenceDataSettings));",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user"
					},
					"response": []
				},
				{
					"name": "Modify Map Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var adminSettingsJSON = JSON.parse(environment.adminSettings);",
									"",
									"adminSettingsJSON.mapSettings.refreshStatus = false;",
									"adminSettingsJSON.mapSettings.scaleBarUnits = \"metric\";",
									"adminSettingsJSON.mapSettings.coordinatesFormat = \"m\";",
									"adminSettingsJSON.mapSettings.mapProjectionId = 2;",
									"adminSettingsJSON.mapSettings.refreshRate = 150;",
									"adminSettingsJSON.mapSettings.displayProjectionId = 1;",
									"",
									"postman.setEnvironmentVariable(\"adminSettings\", JSON.stringify(adminSettingsJSON));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{adminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user/save"
					},
					"response": []
				},
				{
					"name": "Verify Updated Map Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Refresh status setting has been updated\"] = jsonData.data.mapSettings.refreshStatus === false;",
									"tests[\"Scale bar units setting has been updated\"] = jsonData.data.mapSettings.scaleBarUnits === \"metric\";",
									"tests[\"Coordinates format setting has been updated\"] = jsonData.data.mapSettings.coordinatesFormat === \"m\";",
									"tests[\"Map projection setting has been updated\"] = jsonData.data.mapSettings.mapProjectionId === 2;",
									"tests[\"Refresh rate setting has been updated\"] = jsonData.data.mapSettings.refreshRate === 150;",
									"tests[\"Display projection setting has been updated\"] = jsonData.data.mapSettings.displayProjectionId === 1;",
									"",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user"
					},
					"response": []
				},
				{
					"name": "Reset User Settings to Initial Values",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{initialAdminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user/save"
					},
					"response": []
				},
				{
					"name": "Verify Reset of User Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Initial admin settings have been restored\"] = JSON.stringify(jsonData.data) === environment.initialAdminSettings;",
									"",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user"
					},
					"response": []
				},
				{
					"name": "Modify Styles Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var adminSettingsJSON = JSON.parse(environment.adminSettings);",
									"",
									"adminSettingsJSON.stylesSettings.positions.style.ROU = \"#000000\";",
									"adminSettingsJSON.stylesSettings.segments.style.lineWidth = \"3\";",
									"adminSettingsJSON.stylesSettings.alarms.size = \"5\";",
									"",
									"",
									"postman.setEnvironmentVariable(\"adminSettings\", JSON.stringify(adminSettingsJSON));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{adminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user/save"
					},
					"response": []
				},
				{
					"name": "Verify Updated Styles Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Position style setting for one country has been updated\"] = jsonData.data.stylesSettings.positions.style.ROU === \"#000000\";",
									"tests[\"Segment line width setting has been updated\"] = jsonData.data.stylesSettings.segments.style.lineWidth === \"3\";",
									"tests[\"Alarms size setting has been updated\"] = jsonData.data.stylesSettings.alarms.size === 5;",
									"",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user"
					},
					"response": []
				},
				{
					"name": "Modify Visibility Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var adminSettingsJSON = JSON.parse(environment.adminSettings);",
									"",
									"adminSettingsJSON.visibilitySettings.positions.labels.values = [];",
									"adminSettingsJSON.visibilitySettings.positions.popup.values = [];",
									"adminSettingsJSON.visibilitySettings.positions.table.values = [];",
									"adminSettingsJSON.visibilitySettings.segments.labels.values = [];",
									"adminSettingsJSON.visibilitySettings.segments.popup.values = [];",
									"adminSettingsJSON.visibilitySettings.segments.table.values = [];",
									"adminSettingsJSON.visibilitySettings.tracks.table.values = [];",
									"",
									"",
									"postman.setEnvironmentVariable(\"adminSettings\", JSON.stringify(adminSettingsJSON));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{adminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user/save"
					},
					"response": []
				},
				{
					"name": "Verify Updated Visibility Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Positions popup visibility setting has been updated\"] = jsonData.data.visibilitySettings.positions.popup.hasOwnProperty('values') === false;",
									"tests[\"Positions labels visibility setting has been updated\"] = jsonData.data.visibilitySettings.positions.labels.hasOwnProperty('values') === false;",
									"tests[\"Positions table visibility setting has been updated\"] = jsonData.data.visibilitySettings.positions.table.hasOwnProperty('values') === false;",
									"tests[\"Segments popup visibility setting has been updated\"] = jsonData.data.visibilitySettings.segments.popup.hasOwnProperty('values') === false;",
									"tests[\"Segments labels visibility setting has been updated\"] = jsonData.data.visibilitySettings.segments.labels.hasOwnProperty('values') === false;",
									"tests[\"Segments table visibility setting has been updated\"] = jsonData.data.visibilitySettings.segments.table.hasOwnProperty('values') === false;",
									"tests[\"Tracks table visibility setting has been updated\"] = jsonData.data.visibilitySettings.tracks.table.hasOwnProperty('values') === false;",
									"",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user"
					},
					"response": []
				},
				{
					"name": "Reset User Settings to Initial Values",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{initialAdminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user/save"
					},
					"response": []
				},
				{
					"name": "Verify Reset of User Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Initial admin settings have been restored\"] = JSON.stringify(jsonData.data) === environment.initialAdminSettings;",
									"",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user"
					},
					"response": []
				},
				{
					"name": "Modify Layer Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var adminSettingsJSON = JSON.parse(environment.adminSettings);",
									"",
									"adminSettingsJSON.layerSettings = {",
									"    \"baseLayers\": [",
									"      {",
									"        \"serviceLayerId\": \"14\",",
									"        \"order\": 0",
									"      }",
									"    ]",
									"  };",
									"",
									"postman.setEnvironmentVariable(\"adminSettings\", JSON.stringify(adminSettingsJSON));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{adminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user/save"
					},
					"response": []
				},
				{
					"name": "Verify Updated Layer Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Background layers have been updated\"] = jsonData.data.layerSettings.baseLayers[0].name === \"Countries\";",
									"tests[\"Port layers have been updated\"] = jsonData.data.layerSettings.hasOwnProperty('portLayers') === false;",
									"tests[\"Area layers have been updated\"] = jsonData.data.layerSettings.hasOwnProperty('areaLayers') === false;",
									"tests[\"Additional Cartographies layers have been updated\"] = jsonData.data.layerSettings.hasOwnProperty('additionalLayers') === false;",
									"",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"} catch(e){",
									"    tests[\"unexpected json format\"] = false;",
									"}",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user"
					},
					"response": []
				},
				{
					"name": "Reset User Settings to Initial Values",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{initialAdminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user/save"
					},
					"response": []
				},
				{
					"name": "Verify Reset of Admin Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Initial admin settings have been restored\"] = JSON.stringify(jsonData.data) === environment.initialAdminSettings;",
									"",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user"
					},
					"response": []
				},
				{
					"name": "Modify Reference Data Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var adminSettingsJSON = JSON.parse(environment.adminSettings);",
									"",
									"adminSettingsJSON.referenceDataSettings = {",
									"    \"EEZ\": {",
									"      \"selection\": \"custom\",",
									"      \"codes\": [",
									"        \"DNK\"",
									"      ]",
									"    },",
									"    \"RFMO\": {",
									"      \"selection\": \"custom\",",
									"      \"codes\": []",
									"    },",
									"    \"GFCM\": {",
									"      \"selection\": \"custom\",",
									"      \"codes\": []",
									"    },",
									"    \"FAO\": {",
									"      \"selection\": \"custom\",",
									"      \"codes\": []",
									"    },",
									"    \"FMZ\": {",
									"      \"selection\": \"custom\",",
									"      \"codes\": []",
									"    },",
									"    \"STATRECT\": {",
									"      \"selection\": \"custom\",",
									"      \"codes\": []",
									"    },",
									"    \"PORT\": {",
									"      \"selection\": \"custom\",",
									"      \"codes\": []",
									"    },",
									"    \"PORTAREA\": {",
									"      \"selection\": \"custom\",",
									"      \"codes\": []",
									"    }",
									"  };",
									"",
									"",
									"",
									"postman.setEnvironmentVariable(\"adminSettings\", JSON.stringify(adminSettingsJSON));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{adminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user/save"
					},
					"response": []
				},
				{
					"name": "Verify Updated Reference Data Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"EEZ settings have been updated\"] = jsonData.data.referenceDataSettings.EEZ.selection === \"custom\";",
									"tests[\"EEZ country settings have been updated\"] = jsonData.data.referenceDataSettings.EEZ.codes[0] === \"DNK\";",
									"tests[\"RFMO settings have been updated\"] = jsonData.data.referenceDataSettings.RFMO.selection === \"custom\";",
									"tests[\"GFCM settings have been updated\"] = jsonData.data.referenceDataSettings.GFCM.selection === \"custom\";",
									"tests[\"FAO settings have been updated\"] = jsonData.data.referenceDataSettings.FAO.selection === \"custom\";",
									"tests[\"FMZ settings have been updated\"] = jsonData.data.referenceDataSettings.FMZ.selection === \"custom\";",
									"tests[\"STATRECT settings have been updated\"] = jsonData.data.referenceDataSettings.STATRECT.selection === \"custom\";",
									"tests[\"PORT settings have been updated\"] = jsonData.data.referenceDataSettings.PORT.selection === \"custom\";",
									"tests[\"PORTAREA settings have been updated\"] = jsonData.data.referenceDataSettings.PORTAREA.selection === \"custom\";",
									"",
									"",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user"
					},
					"response": []
				},
				{
					"name": "Reset User Settings to Initial Values",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{initialAdminSettings}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user/save"
					},
					"response": []
				},
				{
					"name": "Verify Reset of User Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Initial admin settings have been restored\"] = JSON.stringify(jsonData.data) === environment.initialAdminSettings;",
									"",
									"tests[\"Response contains the style settings\"] = responseBody.has(\"stylesSettings\");",
									"tests[\"Response contains the layer settings\"] = responseBody.has(\"layerSettings\");",
									"tests[\"Response contains the map settings\"] = responseBody.has(\"mapSettings\");",
									"tests[\"Response contains the visibility settings\"] = responseBody.has(\"visibilitySettings\");",
									"tests[\"Response contains the reference data settings\"] = responseBody.has(\"referenceDataSettings\");",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/config/user"
					},
					"response": []
				}
			]
		},
		{
			"name": "06 ReportSharingTests",
			"item": [
				{
					"name": "01 USER PREPARATION",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"usm_admin\",\n   \"password\": \"password\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/"
					},
					"response": []
				},
				{
					"name": "01 authenticate usm_admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"usm_admin\",\n   \"password\": \"password\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "01 get roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"",
									"for (var i = 0; i < data.length; i++) {",
									"    var feature = data[i];",
									"    ",
									"    if (feature.name === 'rep_power_role') {",
									"        postman.setGlobalVariable(\"rep_power_role_id\", feature.roleId);",
									"        ",
									"    } else if (feature.name === 'rep_share_role') {",
									"        postman.setGlobalVariable(\"rep_share_role_id\", feature.roleId);",
									"        ",
									"    } else if (feature.name === 'rep_private_role') {",
									"        postman.setGlobalVariable(\"rep_private_role_id\", feature.roleId);",
									"    }",
									"}",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"Body contains results\"] = responseBody.has(\"results\");",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains roles ids\"] = responseBody.has(\"roleId\");",
									"tests[\"Response contains update features attribute\"] = responseBody.has(\"updateFeatures\");",
									"tests[\"Response contains features attribute\"] = responseBody.has(\"features\");",
									"tests[\"Response contains roles description\"] = responseBody.has(\"description\");",
									"tests[\"Response contains status of the roles\"] = responseBody.has(\"status\");",
									"tests[\"Response contains names of the roles\"] = responseBody.has(\"name\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_share\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/roles"
					},
					"response": []
				},
				{
					"name": "01 get features",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"var featureIDs = [];",
									"",
									"for (var i = 0; i < data.length; i++) {",
									"    if(!(data[i].name === \"MANAGE_ALL_REPORTS\")){",
									"        featureIDs.push(data[i].featureId);",
									"    }",
									"}",
									"",
									"postman.setGlobalVariable(\"features\",  featureIDs.join());",
									"",
									"tests[\"Body contains results\"] = responseBody.has(\"results\");",
									"",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains roles ids\"] = responseBody.has(\"roleId\");",
									"tests[\"Response contains features attribute\"] = responseBody.has(\"features\");",
									"tests[\"Response contains roles description\"] = responseBody.has(\"description\");",
									"tests[\"Response contains status of the roles\"] = responseBody.has(\"status\");",
									"tests[\"Response contains names of the groups\"] = responseBody.has(\"group\");",
									"tests[\"Response containsthe feature id's\"] = responseBody.has(\"featureId\");",
									"tests[\"Response contains names of the applications\"] = responseBody.has(\"applicationName\");",
									"tests[\"Response contains the list of the roles\"] = responseBody.has(\"roles\");",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_share\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/applications/features"
					},
					"response": []
				},
				{
					"name": "01 get datasets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"var datasetsIDs = [];",
									"",
									"for (var i = 0; i < data.length; i++) {",
									"    datasetsIDs.push(data[i].datasetId);",
									"}",
									"",
									"postman.setGlobalVariable(\"dataSets\",  datasetsIDs.join());",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"Body contains results\"] = responseBody.has(\"results\");",
									"tests[\"Response contains the scopes of the datasets\"] = responseBody.has(\"scopes\");",
									"tests[\"Response contains the applications of the datasets\"] = responseBody.has(\"application\");",
									"tests[\"Response contains the categories of the datasets\"] = responseBody.has(\"category\");",
									"tests[\"Response contains the dataset id of the datasets\"] = responseBody.has(\"datasetId\");",
									"tests[\"Response contains the discriminator of the datasets\"] = responseBody.has(\"discriminator\");",
									"tests[\"Response contains the description of the datasets\"] = responseBody.has(\"description\");",
									"tests[\"Response contains the name of the datasets\"] = responseBody.has(\"name\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_share\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/scopes/datasets"
					},
					"response": []
				},
				{
					"name": "01 edit_rep_power_role_features",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"features\": [{{features}}],\r\n\t\"roleId\": {{rep_power_role_id}},\r\n\t\"status\": \"E\",\r\n\t\"name\": \"rep_power_role\"\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/roles"
					},
					"response": []
				},
				{
					"name": "01 edit_rep_share_role_features",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"features\": [{{features}}],\r\n\t\"roleId\": {{rep_share_role_id}},\r\n\t\"status\": \"E\",\r\n\t\"name\": \"rep_share_role\"\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/roles"
					},
					"response": []
				},
				{
					"name": "01 edit_rep_private_role_features",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"features\": [{{features}}],\r\n\t\"roleId\": {{rep_private_role_id}},\r\n\t\"status\": \"E\",\r\n\t\"name\": \"rep_private_role\"\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/roles"
					},
					"response": []
				},
				{
					"name": "01 get scopes",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"for (var i = 0; i < data.length; i++) {",
									"    var scope = data[i];",
									"",
									"    if(scope.name === 'EC'){",
									"        postman.setGlobalVariable(\"EC_SCOPE_ID\", scope.scopeId);",
									"        postman.setGlobalVariable(\"EC_ACTIVE_FROM\", scope.activeFrom);",
									"        postman.setGlobalVariable(\"EC_ACTIVE_TO\", scope.activeTo);",
									"        ",
									"    }",
									"    if(scope.name === \"DG_MARE\"){",
									"        postman.setGlobalVariable(\"DG_MARE_SCOPE_ID\", scope.scopeId);",
									"        postman.setGlobalVariable(\"DG_MARE_ACTIVE_FROM\", scope.activeFrom);",
									"        postman.setGlobalVariable(\"DG_MARE_ACTIVE_TO\", scope.activeTo);",
									"    }",
									"}",
									"tests[\"Response contains results\"] = responseBody.has(\"results\");",
									"",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains active from date\"] = responseBody.has(\"activeFrom\");",
									"tests[\"Response contains active to date\"] = responseBody.has(\"activeTo\");",
									"tests[\"Response contains access to data from date\"] = responseBody.has(\"dataFrom\");",
									"tests[\"Response contains access to data to date\"] = responseBody.has(\"dataTo\");",
									"tests[\"Response contains update datasets attribute\"] = responseBody.has(\"updateDatasets\");",
									"tests[\"Response contains datasets attribute\"] = responseBody.has(\"dataSets\");",
									"tests[\"Response contains scope id's\"] = responseBody.has(\"scopeId\");",
									"tests[\"Response contains status attribute\"] = responseBody.has(\"status\");",
									"tests[\"Response contains scope names\"] = responseBody.has(\"name\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_share\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/scopes"
					},
					"response": []
				},
				{
					"name": "01 edit_EC_datasets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains active from date\"] = responseBody.has(\"activeFrom\");",
									"tests[\"Response contains active to date\"] = responseBody.has(\"activeTo\");",
									"tests[\"Response contains access to data from date\"] = responseBody.has(\"dataFrom\");",
									"tests[\"Response contains access to data to date\"] = responseBody.has(\"dataTo\");",
									"tests[\"Response contains update datasets attribute\"] = responseBody.has(\"updateDatasets\");",
									"tests[\"Response contains datasets attribute\"] = responseBody.has(\"dataSets\");",
									"tests[\"Response contains scope id's\"] = responseBody.has(\"scopeId\");",
									"tests[\"Response contains status attribute\"] = responseBody.has(\"status\");",
									"tests[\"Response contains scope names\"] = responseBody.has(\"name\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"updateDatasets\": true,\r\n\t\"status\": \"E\",\r\n\t\"name\": \"EC\",\r\n\t\"activeFrom\": \"{{EC_ACTIVE_FROM}}\",\r\n\t\"activeTo\": \"{{EC_ACTIVE_TO}}\",\r\n\t\"scopeId\": {{EC_SCOPE_ID}},\r\n\t\"dataSets\": [{{dataSets}}]\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/scopes"
					},
					"response": []
				},
				{
					"name": "01 edit_DG_MARE_datasets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains active from date\"] = responseBody.has(\"activeFrom\");",
									"tests[\"Response contains active to date\"] = responseBody.has(\"activeTo\");",
									"tests[\"Response contains access to data from date\"] = responseBody.has(\"dataFrom\");",
									"tests[\"Response contains access to data to date\"] = responseBody.has(\"dataTo\");",
									"tests[\"Response contains update datasets attribute\"] = responseBody.has(\"updateDatasets\");",
									"tests[\"Response contains datasets attribute\"] = responseBody.has(\"dataSets\");",
									"tests[\"Response contains scope id's\"] = responseBody.has(\"scopeId\");",
									"tests[\"Response contains status attribute\"] = responseBody.has(\"status\");",
									"tests[\"Response contains scope names\"] = responseBody.has(\"name\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"updateDatasets\": true,\r\n\t\"status\": \"E\",\r\n\t\"name\": \"EC\",\r\n\t\"activeFrom\": \"{{EC_ACTIVE_FROM}}\",\r\n\t\"activeTo\": \"{{EC_ACTIVE_TO}}\",\r\n\t\"scopeId\": {{EC_SCOPE_ID}},\r\n\t\"dataSets\": [{{dataSets}}]\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/scopes"
					},
					"response": []
				},
				{
					"name": "02 SAME USER SAME SCOPE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"updateDatasets\": true,\r\n\t\"status\": \"E\",\r\n\t\"name\": \"EC\",\r\n\t\"activeFrom\": \"{{EC_ACTIVE_FROM}}\",\r\n\t\"activeTo\": \"{{EC_ACTIVE_TO}}\",\r\n\t\"scopeId\": {{EC_SCOPE_ID}},\r\n\t\"dataSets\": [{{dataSets}}]\r\n}"
						},
						"url": "{{hostname}}:{{port}}"
					},
					"response": []
				},
				{
					"name": "02 authenticate rep_power",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_power\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "02 Create Private Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"postman.setGlobalVariable(\"privateReportId\", jsonData.data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"private\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 5\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "02 Create ScopeReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"postman.setGlobalVariable(\"scopeReportId\", jsonData.data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"scope\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 5\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "02 Create PublicReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"postman.setGlobalVariable(\"publicReportId\", jsonData.data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"public\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 5\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "02 List Contains Reports",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody).data;",
									"",
									"var privateRepFound = false;",
									"var scopeRepFound = false;",
									"var publicRepFound = false;",
									"",
									"for(var i=0; i<data.length; i++){",
									"    if(data[i].id == globals.privateReportId){",
									"        privateRepFound = true;",
									"    }",
									"    ",
									"    if(data[i].id == globals.scopeReportId){",
									"        scopeRepFound = true;",
									"    }",
									"    if(data[i].id == globals.publicReportId){",
									"        publicRepFound = true;",
									"    }",
									"}",
									"",
									"tests[\"Report list contains private report\"] = privateRepFound;",
									"tests[\"Report list contains scope report\"] = scopeRepFound;",
									"tests[\"Report list contains public report\"] = publicRepFound;",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/list"
					},
					"response": []
				},
				{
					"name": "02 GetReport_Private",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{privateReportId}}"
					},
					"response": []
				},
				{
					"name": "02 GetReport_Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{publicReportId}}"
					},
					"response": []
				},
				{
					"name": "02 GetReport_Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{scopeReportId}}"
					},
					"response": []
				},
				{
					"name": "02 EditReport_Private",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"tests[\"Body contains corrected name\"] = responseBody.has(\"Edited\");",
									"tests[\"Body contains corrected description\"] = responseBody.has(\"edited\");"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"id\":{{privateReportId}} ,\r\n   \"name\":\"Edited\",\r\n   \"desc\":\"edited\",\r\n   \"visibility\":\"private\",\r\n   \"withMap\":true\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{privateReportId}}?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								"{{privateReportId}}"
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "02 EditReport_Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"tests[\"Body contains corrected name\"] = responseBody.has(\"Edited\");",
									"tests[\"Body contains corrected description\"] = responseBody.has(\"edited\");"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"id\":{{scopeReportId}} ,\r\n   \"name\":\"Edited\",\r\n   \"desc\":\"edited\",\r\n   \"visibility\":\"public\",\r\n   \"withMap\":true\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{scopeReportId}}?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								"{{scopeReportId}}"
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "02 EditReport_Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"tests[\"Body contains corrected name\"] = responseBody.has(\"Edited\");",
									"tests[\"Body contains corrected description\"] = responseBody.has(\"edited\");"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"id\":{{publicReportId}} ,\r\n   \"name\":\"Edited\",\r\n   \"desc\":\"edited\",\r\n   \"visibility\":\"public\",\r\n   \"withMap\":true\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{publicReportId}}?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								"{{publicReportId}}"
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "02 RunReport-Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{scopeReportId}}"
					},
					"response": []
				},
				{
					"name": "02 RunReport-Private",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{privateReportId}}"
					},
					"response": []
				},
				{
					"name": "02 RunReport-Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{publicReportId}}"
					},
					"response": []
				},
				{
					"name": "02 ShareReport-Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/share/{{scopeReportId}}/SCOPE"
					},
					"response": []
				},
				{
					"name": "02 ShareReport-Private",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/share/{{privateReportId}}/PRIVATE"
					},
					"response": []
				},
				{
					"name": "02 ShareReport-Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/share/{{publicReportId}}/PUBLIC"
					},
					"response": []
				},
				{
					"name": "02 DeletePrivateReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{privateReportId}}"
					},
					"response": []
				},
				{
					"name": "02 DeleteScopeReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{scopeReportId}}"
					},
					"response": []
				},
				{
					"name": "02 DeletePublicReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{publicReportId}}"
					},
					"response": []
				},
				{
					"name": "03 SAME USER DIFFERENT SCOPE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"updateDatasets\": true,\r\n\t\"status\": \"E\",\r\n\t\"name\": \"EC\",\r\n\t\"activeFrom\": \"{{EC_ACTIVE_FROM}}\",\r\n\t\"activeTo\": \"{{EC_ACTIVE_TO}}\",\r\n\t\"scopeId\": {{EC_SCOPE_ID}},\r\n\t\"dataSets\": [{{dataSets}}]\r\n}"
						},
						"url": "{{hostname}}:{{port}}"
					},
					"response": []
				},
				{
					"name": "03 ChangeScope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"--------------\"] = true"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"updateDatasets\": true,\r\n\t\"status\": \"E\",\r\n\t\"name\": \"EC\",\r\n\t\"activeFrom\": \"{{EC_ACTIVE_FROM}}\",\r\n\t\"activeTo\": \"{{EC_ACTIVE_TO}}\",\r\n\t\"scopeId\": {{EC_SCOPE_ID}},\r\n\t\"dataSets\": [{{dataSets}}]\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/config/rest/globals"
					},
					"response": []
				},
				{
					"name": "03 Create Private Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"postman.setGlobalVariable(\"privateReportId\", jsonData.data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"private\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 5\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "03 Create ScopeReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"postman.setGlobalVariable(\"scopeReportId\", jsonData.data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"scope\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 5\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "03 Create PublicReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"postman.setGlobalVariable(\"publicReportId\", jsonData.data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"public\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 5\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "03 List Contains Reports",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody).data;",
									"",
									"var privateRepFound = false;",
									"var scopeRepFound = false;",
									"var publicRepFound = false;",
									"",
									"for(var i=0; i<data.length; i++){",
									"    if(data[i].id == globals.privateReportId){",
									"        privateRepFound = true;",
									"    }",
									"    ",
									"    if(data[i].id == globals.scopeReportId){",
									"        scopeRepFound = true;",
									"    }",
									"    if(data[i].id == globals.publicReportId){",
									"        publicRepFound = true;",
									"    }",
									"}",
									"",
									"tests[\"Report list contains private report\"] = !privateRepFound;",
									"tests[\"Report list contains scope report\"] = !scopeRepFound;",
									"tests[\"Report list contains public report\"] = publicRepFound;",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/list"
					},
					"response": []
				},
				{
					"name": "03 GetReport_Private",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{privateReportId}}"
					},
					"response": []
				},
				{
					"name": "03 GetReport_Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{scopeReportId}}"
					},
					"response": []
				},
				{
					"name": "03 GetReport_Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{publicReportId}}"
					},
					"response": []
				},
				{
					"name": "03 EditReport_Private",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"id\":{{privateReportId}} ,\r\n   \"name\":\"Edited\",\r\n   \"desc\":\"edited\",\r\n   \"visibility\":\"private\",\r\n   \"withMap\":true\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{privateReportId}}?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								"{{privateReportId}}"
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "03 EditReport_Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"id\":{{scopeReportId}} ,\r\n   \"name\":\"Edited\",\r\n   \"desc\":\"edited\",\r\n   \"visibility\":\"public\",\r\n   \"withMap\":true\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{scopeReportId}}?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								"{{scopeReportId}}"
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "03 EditReport_Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"tests[\"Body contains corrected name\"] = responseBody.has(\"Edited\");",
									"tests[\"Body contains corrected description\"] = responseBody.has(\"edited\");"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"id\":{{publicReportId}} ,\r\n   \"name\":\"Edited\",\r\n   \"desc\":\"edited\",\r\n   \"visibility\":\"public\",\r\n   \"withMap\":true\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{publicReportId}}?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								"{{publicReportId}}"
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "03 RunReport-Private",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{privateReportId}}"
					},
					"response": []
				},
				{
					"name": "03 RunReport-Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{scopeReportId}}"
					},
					"response": []
				},
				{
					"name": "03 RunReport-Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{publicReportId}}"
					},
					"response": []
				},
				{
					"name": "03 ShareReport-Private",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/share/{{privateReportId}}/PRIVATE"
					},
					"response": []
				},
				{
					"name": "03 ShareReport-Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/share/{{scopeReportId}}/SCOPE"
					},
					"response": []
				},
				{
					"name": "03 ShareReport-Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/share/{{publicReportId}}/PUBLIC"
					},
					"response": []
				},
				{
					"name": "03 DeletePrivateReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{privateReportId}}"
					},
					"response": []
				},
				{
					"name": "03 DeleteScopeReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{scopeReportId}}"
					},
					"response": []
				},
				{
					"name": "03 DeletePublicReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{publicReportId}}"
					},
					"response": []
				},
				{
					"name": "04 DIFFERENT USER SAME SCOPE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"updateDatasets\": true,\r\n\t\"status\": \"E\",\r\n\t\"name\": \"EC\",\r\n\t\"activeFrom\": \"{{EC_ACTIVE_FROM}}\",\r\n\t\"activeTo\": \"{{EC_ACTIVE_TO}}\",\r\n\t\"scopeId\": {{EC_SCOPE_ID}},\r\n\t\"dataSets\": [{{dataSets}}]\r\n}"
						},
						"url": "{{hostname}}:{{port}}"
					},
					"response": []
				},
				{
					"name": "04 ChangeUserSameScope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"--------------\"] = true"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"updateDatasets\": true,\r\n\t\"status\": \"E\",\r\n\t\"name\": \"EC\",\r\n\t\"activeFrom\": \"{{EC_ACTIVE_FROM}}\",\r\n\t\"activeTo\": \"{{EC_ACTIVE_TO}}\",\r\n\t\"scopeId\": {{EC_SCOPE_ID}},\r\n\t\"dataSets\": [{{dataSets}}]\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/config/rest/globals"
					},
					"response": []
				},
				{
					"name": "04 Create Private Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"postman.setGlobalVariable(\"privateReportId\", jsonData.data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"private\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 5\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "04 Create ScopeReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"postman.setGlobalVariable(\"scopeReportId\", jsonData.data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"scope\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 5\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "04 Create PublicReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"postman.setGlobalVariable(\"publicReportId\", jsonData.data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"public\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 5\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "04 authenticate rep_share",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_share\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "04 List Contains Reports",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody).data;",
									"",
									"var privateRepFound = false;",
									"var scopeRepFound = false;",
									"var publicRepFound = false;",
									"",
									"for(var i=0; i<data.length; i++){",
									"    if(data[i].id == globals.privateReportId){",
									"        privateRepFound = true;",
									"    }",
									"    ",
									"    if(data[i].id == globals.scopeReportId){",
									"        scopeRepFound = true;",
									"    }",
									"    if(data[i].id == globals.publicReportId){",
									"        publicRepFound = true;",
									"    }",
									"}",
									"",
									"tests[\"Report list contains private report\"] = !privateRepFound;",
									"tests[\"Report list contains scope report\"] = scopeRepFound;",
									"tests[\"Report list contains public report\"] = publicRepFound;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/list"
					},
					"response": []
				},
				{
					"name": "04 GetReport_Private",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{privateReportId}}"
					},
					"response": []
				},
				{
					"name": "04 GetReport_Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"json valid\"] = true;",
									"} catch(e){",
									"    tests[\"json valid\"] = false;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:::{{port}}/{{comPath}}/reporting/rest/report/{{scopeReportId}}"
					},
					"response": []
				},
				{
					"name": "04 GetReport_Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"json valid\"] = true;",
									"} catch(e){",
									"    tests[\"json valid\"] = false;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:::{{port}}/{{comPath}}/reporting/rest/report/{{publicReportId}}"
					},
					"response": []
				},
				{
					"name": "04 EditReport_Private",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"id\":9,\r\n   \"name\":\"Last Positions\",\r\n   \"desc\":\"5dcf1d28-d269-470d-a9ad-8d9a6850b7d2\",\r\n   \"visibility\":\"private\",\r\n   \"withMap\":true,\r\n   \"filterExpression\":{  \r\n      \"common\":{  \r\n         \"id\":27,\r\n         \"startDate\":\"2015-07-26T08:30:18\",\r\n         \"endDate\":\"2017-07-15T09:10:18\",\r\n         \"positionSelector\":\"last\",\r\n         \"positionTypeSelector\":\"positions\",\r\n         \"xValue\":50\r\n      },\r\n      \"assets\":[  \r\n\r\n      ],\r\n      \"vms\":{  \r\n\r\n      },\r\n      \"fa\":{  \r\n         \"reportType\":[  \r\n            \"NOTIFICATION\"\r\n         ],\r\n         \"activityType\":[  \r\n            \"DEPARTURE\",\r\n            \"LANDING\"\r\n         ],\r\n         \"master\":\"rep_power\",\r\n         \"port\":\"PORT1\",\r\n         \"gear\":\"GNS\",\r\n         \"weight\":{  \r\n            \"min\":2,\r\n            \"unit\":\"kg\"\r\n         }\r\n      },\r\n      \"areas\":[  \r\n\r\n      ]\r\n   },\r\n   \"mapConfiguration\":{  \r\n      \"spatialConnectId\":9,\r\n      \"layerSettings\":{  \r\n         \"portLayers\":[  \r\n\r\n         ],\r\n         \"areaLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"2\",\r\n               \"areaType\":\"sysarea\",\r\n               \"order\":0\r\n            },\r\n            {  \r\n               \"serviceLayerId\":\"1\",\r\n               \"areaType\":\"sysarea\",\r\n               \"order\":1\r\n            }\r\n         ],\r\n         \"additionalLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"6\",\r\n               \"order\":0\r\n            }\r\n         ],\r\n         \"baseLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"5\",\r\n               \"order\":0\r\n            }\r\n         ]\r\n      }\r\n   }\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{privateReportId}}?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								"{{privateReportId}}"
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "04 EditReport_Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Check EndDate\"] = jsonData.data.filterExpression.common.endDate === \"2017-07-15T09:10:18\";",
									"    tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"",
									"} catch(e){",
									"    tests[\"Body format unexpected\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"id\":9,\r\n   \"name\":\"Last Positions\",\r\n   \"desc\":\"5dcf1d28-d269-470d-a9ad-8d9a6850b7d2\",\r\n   \"visibility\":\"private\",\r\n   \"withMap\":true,\r\n   \"filterExpression\":{  \r\n      \"common\":{  \r\n         \"id\":27,\r\n         \"startDate\":\"2015-07-26T08:30:18\",\r\n         \"endDate\":\"2017-07-15T09:10:18\",\r\n         \"positionSelector\":\"last\",\r\n         \"positionTypeSelector\":\"positions\",\r\n         \"xValue\":50\r\n      },\r\n      \"assets\":[  \r\n\r\n      ],\r\n      \"vms\":{  \r\n\r\n      },\r\n      \"fa\":{  \r\n         \"reportType\":[  \r\n            \"NOTIFICATION\"\r\n         ],\r\n         \"activityType\":[  \r\n            \"DEPARTURE\",\r\n            \"LANDING\"\r\n         ],\r\n         \"master\":\"rep_power\",\r\n         \"port\":\"PORT1\",\r\n         \"gear\":\"GNS\",\r\n         \"weight\":{  \r\n            \"min\":2,\r\n            \"unit\":\"kg\"\r\n         }\r\n      },\r\n      \"areas\":[  \r\n\r\n      ]\r\n   },\r\n   \"mapConfiguration\":{  \r\n      \"spatialConnectId\":9,\r\n      \"layerSettings\":{  \r\n         \"portLayers\":[  \r\n\r\n         ],\r\n         \"areaLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"2\",\r\n               \"areaType\":\"sysarea\",\r\n               \"order\":0\r\n            },\r\n            {  \r\n               \"serviceLayerId\":\"1\",\r\n               \"areaType\":\"sysarea\",\r\n               \"order\":1\r\n            }\r\n         ],\r\n         \"additionalLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"6\",\r\n               \"order\":0\r\n            }\r\n         ],\r\n         \"baseLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"5\",\r\n               \"order\":0\r\n            }\r\n         ]\r\n      }\r\n   }\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{scopeReportId}}?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								"{{scopeReportId}}"
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "04 EditReport_Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Check EndDate\"] = jsonData.data.filterExpression.common.endDate === \"2017-07-15T09:10:18\";",
									"    tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"",
									"} catch(e){",
									"    tests[\"Body format unexpected\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"id\":9,\r\n   \"name\":\"Last Positions\",\r\n   \"desc\":\"5dcf1d28-d269-470d-a9ad-8d9a6850b7d2\",\r\n   \"visibility\":\"private\",\r\n   \"withMap\":true,\r\n   \"filterExpression\":{  \r\n      \"common\":{  \r\n         \"id\":27,\r\n         \"startDate\":\"2015-07-26T08:30:18\",\r\n         \"endDate\":\"2017-07-15T09:10:18\",\r\n         \"positionSelector\":\"last\",\r\n         \"positionTypeSelector\":\"positions\",\r\n         \"xValue\":50\r\n      },\r\n      \"assets\":[  \r\n\r\n      ],\r\n      \"vms\":{  \r\n\r\n      },\r\n      \"fa\":{  \r\n         \"reportType\":[  \r\n            \"NOTIFICATION\"\r\n         ],\r\n         \"activityType\":[  \r\n            \"DEPARTURE\",\r\n            \"LANDING\"\r\n         ],\r\n         \"master\":\"rep_power\",\r\n         \"port\":\"PORT1\",\r\n         \"gear\":\"GNS\",\r\n         \"weight\":{  \r\n            \"min\":2,\r\n            \"unit\":\"kg\"\r\n         }\r\n      },\r\n      \"areas\":[  \r\n\r\n      ]\r\n   },\r\n   \"mapConfiguration\":{  \r\n      \"spatialConnectId\":9,\r\n      \"layerSettings\":{  \r\n         \"portLayers\":[  \r\n\r\n         ],\r\n         \"areaLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"2\",\r\n               \"areaType\":\"sysarea\",\r\n               \"order\":0\r\n            },\r\n            {  \r\n               \"serviceLayerId\":\"1\",\r\n               \"areaType\":\"sysarea\",\r\n               \"order\":1\r\n            }\r\n         ],\r\n         \"additionalLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"6\",\r\n               \"order\":0\r\n            }\r\n         ],\r\n         \"baseLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"5\",\r\n               \"order\":0\r\n            }\r\n         ]\r\n      }\r\n   }\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{publicReportId}}?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								"{{publicReportId}}"
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "04 RunReport-Private",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{privateReportId}}"
					},
					"response": []
				},
				{
					"name": "04 RunReport-Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{scopeReportId}}"
					},
					"response": []
				},
				{
					"name": "04 RunReport-Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{publicReportId}}"
					},
					"response": []
				},
				{
					"name": "04 ShareReport-Private",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/share/{{privateReportId}}/PRIVATE"
					},
					"response": []
				},
				{
					"name": "04 ShareReport-Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 403\"] = responseCode.code === 403;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/share/{{scopeReportId}}/SCOPE"
					},
					"response": []
				},
				{
					"name": "04 ShareReport-Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 403\"] = responseCode.code === 403;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/share/{{publicReportId}}/PUBLIC"
					},
					"response": []
				},
				{
					"name": "04 DeletePrivateReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 403\"] = responseCode.code === 403;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{privateReportId}}"
					},
					"response": []
				},
				{
					"name": "04 DeleteScopeReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 403\"] = responseCode.code === 403;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{scopeReportId}}"
					},
					"response": []
				},
				{
					"name": "04 DeletePublicReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 403\"] = responseCode.code === 403;",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{publicReportId}}"
					},
					"response": []
				},
				{
					"name": "05 DIFFERENT USER DIFFERENT SCOPE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"updateDatasets\": true,\r\n\t\"status\": \"E\",\r\n\t\"name\": \"EC\",\r\n\t\"activeFrom\": \"{{EC_ACTIVE_FROM}}\",\r\n\t\"activeTo\": \"{{EC_ACTIVE_TO}}\",\r\n\t\"scopeId\": {{EC_SCOPE_ID}},\r\n\t\"dataSets\": [{{dataSets}}]\r\n}"
						},
						"url": "{{hostname}}:{{port}}"
					},
					"response": []
				},
				{
					"name": "05 ChangeUserChangeScope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"--------------\"] = true"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"updateDatasets\": true,\r\n\t\"status\": \"E\",\r\n\t\"name\": \"EC\",\r\n\t\"activeFrom\": \"{{EC_ACTIVE_FROM}}\",\r\n\t\"activeTo\": \"{{EC_ACTIVE_TO}}\",\r\n\t\"scopeId\": {{EC_SCOPE_ID}},\r\n\t\"dataSets\": [{{dataSets}}]\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/config/rest/globals"
					},
					"response": []
				},
				{
					"name": "05 authenticate rep_power",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_power\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "05 Create Private Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"postman.setGlobalVariable(\"privateReportId\", jsonData.data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"private\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 5\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "05 Create ScopeReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"postman.setGlobalVariable(\"scopeReportId\", jsonData.data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"scope\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 5\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "05 Create PublicReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"postman.setGlobalVariable(\"publicReportId\", jsonData.data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"public\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 5\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "05 authenticate rep_share",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_share\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "05 List Contains Reports",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody).data;",
									"",
									"var privateRepFound = false;",
									"var scopeRepFound = false;",
									"var publicRepFound = false;",
									"",
									"for(var i=0; i<data.length; i++){",
									"    if(data[i].id == globals.privateReportId){",
									"        privateRepFound = true;",
									"    }",
									"    ",
									"    if(data[i].id == globals.scopeReportId){",
									"        scopeRepFound = true;",
									"    }",
									"    if(data[i].id == globals.publicReportId){",
									"        publicRepFound = true;",
									"    }",
									"}",
									"",
									"tests[\"Report list contains private report\"] = !privateRepFound;",
									"tests[\"Report list contains scope report\"] = !scopeRepFound;",
									"tests[\"Report list contains public report\"] = publicRepFound;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/list"
					},
					"response": []
				},
				{
					"name": "05 GetReport_Private",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{privateReportId}}"
					},
					"response": []
				},
				{
					"name": "05 GetReport_Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{scopeReportId}}"
					},
					"response": []
				},
				{
					"name": "05 GetReport_Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"json valid\"] = true;",
									"} catch(e){",
									"    tests[\"json valid\"] = false;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{hostname}}:::{{port}}/{{comPath}}/reporting/rest/report/{{publicReportId}}"
					},
					"response": []
				},
				{
					"name": "05 EditReport_Private",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 401\"] = responseCode.code === 401;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"id\":9,\r\n   \"name\":\"Last Positions\",\r\n   \"desc\":\"5dcf1d28-d269-470d-a9ad-8d9a6850b7d2\",\r\n   \"visibility\":\"private\",\r\n   \"withMap\":true,\r\n   \"filterExpression\":{  \r\n      \"common\":{  \r\n         \"id\":27,\r\n         \"startDate\":\"2015-07-26T08:30:18\",\r\n         \"endDate\":\"2017-07-15T09:10:18\",\r\n         \"positionSelector\":\"last\",\r\n         \"positionTypeSelector\":\"positions\",\r\n         \"xValue\":50\r\n      },\r\n      \"assets\":[  \r\n\r\n      ],\r\n      \"vms\":{  \r\n\r\n      },\r\n      \"fa\":{  \r\n         \"reportType\":[  \r\n            \"NOTIFICATION\"\r\n         ],\r\n         \"activityType\":[  \r\n            \"DEPARTURE\",\r\n            \"LANDING\"\r\n         ],\r\n         \"master\":\"rep_power\",\r\n         \"port\":\"PORT1\",\r\n         \"gear\":\"GNS\",\r\n         \"weight\":{  \r\n            \"min\":2,\r\n            \"unit\":\"kg\"\r\n         }\r\n      },\r\n      \"areas\":[  \r\n\r\n      ]\r\n   },\r\n   \"mapConfiguration\":{  \r\n      \"spatialConnectId\":9,\r\n      \"layerSettings\":{  \r\n         \"portLayers\":[  \r\n\r\n         ],\r\n         \"areaLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"2\",\r\n               \"areaType\":\"sysarea\",\r\n               \"order\":0\r\n            },\r\n            {  \r\n               \"serviceLayerId\":\"1\",\r\n               \"areaType\":\"sysarea\",\r\n               \"order\":1\r\n            }\r\n         ],\r\n         \"additionalLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"6\",\r\n               \"order\":0\r\n            }\r\n         ],\r\n         \"baseLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"5\",\r\n               \"order\":0\r\n            }\r\n         ]\r\n      }\r\n   }\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{privateReportId}}?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								"{{privateReportId}}"
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "05 EditReport_Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "scopeName",
								"value": "DG_MARE"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"id\":9,\r\n   \"name\":\"Last Positions\",\r\n   \"desc\":\"5dcf1d28-d269-470d-a9ad-8d9a6850b7d2\",\r\n   \"visibility\":\"private\",\r\n   \"withMap\":true,\r\n   \"filterExpression\":{  \r\n      \"common\":{  \r\n         \"id\":27,\r\n         \"startDate\":\"2015-07-26T08:30:18\",\r\n         \"endDate\":\"2017-07-15T09:10:18\",\r\n         \"positionSelector\":\"last\",\r\n         \"positionTypeSelector\":\"positions\",\r\n         \"xValue\":50\r\n      },\r\n      \"assets\":[  \r\n\r\n      ],\r\n      \"vms\":{  \r\n\r\n      },\r\n      \"fa\":{  \r\n         \"reportType\":[  \r\n            \"NOTIFICATION\"\r\n         ],\r\n         \"activityType\":[  \r\n            \"DEPARTURE\",\r\n            \"LANDING\"\r\n         ],\r\n         \"master\":\"rep_power\",\r\n         \"port\":\"PORT1\",\r\n         \"gear\":\"GNS\",\r\n         \"weight\":{  \r\n            \"min\":2,\r\n            \"unit\":\"kg\"\r\n         }\r\n      },\r\n      \"areas\":[  \r\n\r\n      ]\r\n   },\r\n   \"mapConfiguration\":{  \r\n      \"spatialConnectId\":9,\r\n      \"layerSettings\":{  \r\n         \"portLayers\":[  \r\n\r\n         ],\r\n         \"areaLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"2\",\r\n               \"areaType\":\"sysarea\",\r\n               \"order\":0\r\n            },\r\n            {  \r\n               \"serviceLayerId\":\"1\",\r\n               \"areaType\":\"sysarea\",\r\n               \"order\":1\r\n            }\r\n         ],\r\n         \"additionalLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"6\",\r\n               \"order\":0\r\n            }\r\n         ],\r\n         \"baseLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"5\",\r\n               \"order\":0\r\n            }\r\n         ]\r\n      }\r\n   }\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{scopeReportId}}?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								"{{scopeReportId}}"
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "05 EditReport_Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 403\"] = responseCode.code === 403;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "scopeName",
								"value": "DG_MARE"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"id\":9,\r\n   \"name\":\"Last Positions\",\r\n   \"desc\":\"5dcf1d28-d269-470d-a9ad-8d9a6850b7d2\",\r\n   \"visibility\":\"private\",\r\n   \"withMap\":true,\r\n   \"filterExpression\":{  \r\n      \"common\":{  \r\n         \"id\":27,\r\n         \"startDate\":\"2015-07-26T08:30:18\",\r\n         \"endDate\":\"2017-07-15T09:10:18\",\r\n         \"positionSelector\":\"last\",\r\n         \"positionTypeSelector\":\"positions\",\r\n         \"xValue\":50\r\n      },\r\n      \"assets\":[  \r\n\r\n      ],\r\n      \"vms\":{  \r\n\r\n      },\r\n      \"fa\":{  \r\n         \"reportType\":[  \r\n            \"NOTIFICATION\"\r\n         ],\r\n         \"activityType\":[  \r\n            \"DEPARTURE\",\r\n            \"LANDING\"\r\n         ],\r\n         \"master\":\"rep_power\",\r\n         \"port\":\"PORT1\",\r\n         \"gear\":\"GNS\",\r\n         \"weight\":{  \r\n            \"min\":2,\r\n            \"unit\":\"kg\"\r\n         }\r\n      },\r\n      \"areas\":[  \r\n\r\n      ]\r\n   },\r\n   \"mapConfiguration\":{  \r\n      \"spatialConnectId\":9,\r\n      \"layerSettings\":{  \r\n         \"portLayers\":[  \r\n\r\n         ],\r\n         \"areaLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"2\",\r\n               \"areaType\":\"sysarea\",\r\n               \"order\":0\r\n            },\r\n            {  \r\n               \"serviceLayerId\":\"1\",\r\n               \"areaType\":\"sysarea\",\r\n               \"order\":1\r\n            }\r\n         ],\r\n         \"additionalLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"6\",\r\n               \"order\":0\r\n            }\r\n         ],\r\n         \"baseLayers\":[  \r\n            {  \r\n               \"serviceLayerId\":\"5\",\r\n               \"order\":0\r\n            }\r\n         ]\r\n      }\r\n   }\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{publicReportId}}?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								"{{publicReportId}}"
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "05 RunReport-Private",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{privateReportId}}"
					},
					"response": []
				},
				{
					"name": "05 RunReport-Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{scopeReportId}}"
					},
					"response": []
				},
				{
					"name": "05 RunReport-Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{publicReportId}}"
					},
					"response": []
				},
				{
					"name": "05 ShareReport-Private",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/share/{{privateReportId}}/PRIVATE"
					},
					"response": []
				},
				{
					"name": "05 ShareReport-Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/share/{{scopeReportId}}/SCOPE"
					},
					"response": []
				},
				{
					"name": "05 ShareReport-Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 403\"] = responseCode.code === 403;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/share/{{publicReportId}}/PUBLIC"
					},
					"response": []
				},
				{
					"name": "05 DeletePrivateReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{privateReportId}}"
					},
					"response": []
				},
				{
					"name": "05 DeleteScopeReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{scopeReportId}}"
					},
					"response": []
				},
				{
					"name": "05 DeletePublicReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 403\"] = responseCode.code === 403;",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{publicReportId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "07 ReportWithAllFilters",
			"item": [
				{
					"name": "authenticate rep_power",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_power\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "Create User Area",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"userAreaId\", jsonData.data);",
									"",
									"tests[\"User Area Id = \" + jsonData.data] = jsonData.data !== 0;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n        \"type\": \"MultiPolygon\",\r\n          \"coordinates\": [\r\n            [\r\n                [\r\n                    [-99.028, 46.985], [-99.028, 50.979],\r\n                    [-82.062, 50.979], [-82.062, 47.002],\r\n                    [-99.028, 46.985]\r\n                ]\r\n            ],\r\n            [\r\n                [\r\n                    [-109.028, 36.985], [-109.028, 40.979],\r\n                    [-102.062, 40.979], [-102.062, 37.002],\r\n                    [-109.028, 36.985]\r\n                ]\r\n             ]\r\n          ]\r\n  },\r\n  \"properties\": {\r\n    \"name\": \"FilterArea-{{$guid}}\",\r\n    \"description\": \"Test description 2\",\r\n    \"startDate\": \"2015-10-11T13:02:23\",\r\n    \"endDate\": \"2015-10-11T13:02:23\",\r\n    \"subType\": \"ABC\",\r\n    \"isShared\": \"true\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/userarea"
					},
					"response": []
				},
				{
					"name": "SearchAssets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody).data;",
									"    var assets = jsonData.asset;",
									"    var n = assets.length;",
									"    ",
									"    var assetArray = [];",
									"    for (var i = 0; i < 2; i++) {",
									"        var cleanAsset = {};",
									"        var j = Math.floor(Math.random()*n);",
									"        var asset = assets[j];",
									"        ",
									"        assets.pop(assets[j]);",
									"        ",
									"        cleanAsset[\"name\"] = asset.name;",
									"        cleanAsset[\"guid\"] = asset.assetId.guid;",
									"        cleanAsset[\"type\"] = \"asset\";",
									"        ",
									"        assetArray.push(cleanAsset);",
									"    }",
									"    postman.setGlobalVariable(\"filterAssetList\", JSON.stringify(assetArray));",
									"}catch(e){",
									"    tests[\"JSON format\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"pagination\": {\r\n\t\t\"page\": 1,\r\n\t\t\"listSize\": 1000\r\n\t},\r\n\t\"assetSearchCriteria\": {\r\n\t\t\"isDynamic\": false,\r\n\t\t\"criterias\": [{\r\n\t\t\t\t\"key\": \"FLAG_STATE\",\r\n\t\t\t\t\"value\": \"rou*\"\r\n\t\t\t}, {\r\n\t\t\t\t\"key\": \"EXTERNAL_MARKING\",\r\n\t\t\t\t\"value\": \"rou*\"\r\n\t\t\t}, {\r\n\t\t\t\t\"key\": \"NAME\",\r\n\t\t\t\t\"value\": \"rou*\"\r\n\t\t\t}, {\r\n\t\t\t\t\"key\": \"IRCS\",\r\n\t\t\t\t\"value\": \"rou*\"\r\n\t\t\t}, {\r\n\t\t\t\t\"key\": \"CFR\",\r\n\t\t\t\t\"value\": \"rou*\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}\r\n"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/asset/rest/asset/list"
					},
					"response": []
				},
				{
					"name": "SearchAreas",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var areas = JSON.parse(responseBody).data;",
									"    var n = areas.length;",
									"    ",
									"    var areaArray = [];",
									"    for (var i = 0; i < 3; i++) {",
									"        var cleanArea = {};",
									"        var area = areas[Math.floor(Math.random()*n)];",
									"        ",
									"        cleanArea[\"areaType\"] = area.areaType;",
									"        cleanArea[\"gid\"] = area.gid;",
									"        ",
									"        areaArray.push(cleanArea);",
									"    }",
									"    postman.setGlobalVariable(\"filterAreaList\", JSON.stringify(areaArray));",
									"    console.log(globals.filterAreaList);",
									"    ",
									"}catch(e){",
									"    tests[\"json format\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"filter\":\"a\",\"areaType\":\"EEZ\"}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/area/byfilter"
					},
					"response": []
				},
				{
					"name": "SearchUserAreas",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var areas = JSON.parse(responseBody).data;",
									"    var areaArray = JSON.parse(globals.filterAreaList);",
									"    var n = areas.length;",
									"    ",
									"    var cleanArea = {};",
									"    var area = areas[Math.floor(Math.random()*n)];",
									"    ",
									"        ",
									"    cleanArea[\"areaType\"] = area.areaType;",
									"    cleanArea[\"gid\"] = area.gid;",
									"    ",
									"    areaArray.push(cleanArea);",
									"",
									"    postman.setGlobalVariable(\"filterAreaList\", JSON.stringify(areaArray));",
									"    console.log(globals.filterAreaList);",
									"    ",
									"}catch(e){",
									"    tests[\"json format\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"filter\":\"FilterArea\"}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/userarea/byfilter"
					},
					"response": []
				},
				{
					"name": "Create ReportWithAllFiltersEnabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var report = JSON.parse(responseBody).data;",
									"    ",
									"    postman.setGlobalVariable(\"allFiltersReportId\", report.id);",
									"    ",
									"    var assets = JSON.parse(globals.filterAssetList);",
									"    var areas = JSON.parse(globals.filterAreaList);",
									"",
									"    tests[\"name\"] = report.name === \"Report-AllFilters\";",
									"    ",
									"    var commonFilters = report.filterExpression.common;",
									"    tests[\"Common filters set correctly\"] = commonFilters.positionSelector === \"all\" ",
									"    & commonFilters.startDate === \"2017-04-07T08:46:29\"",
									"    & commonFilters.endDate === \"2017-04-14T08:46:29\";",
									"",
									"    var vmsFilters = report.filterExpression.vms;",
									"    tests[\"VMSPos filters set correctly\"] = vmsFilters.vmsposition.movMinSpeed == 1",
									"    & vmsFilters.vmsposition.movMaxSpeed == 5",
									"    & vmsFilters.vmsposition.movType === \"ENT\"",
									"    & vmsFilters.vmsposition.movActivity === \"ANC\";",
									"    ",
									"    tests[\"VMSSegment filters set correctly\"] = vmsFilters.vmssegment.segMinSpeed == 1",
									"    & vmsFilters.vmssegment.segMaxSpeed == 5",
									"    & vmsFilters.vmssegment.segMaxDuration == 5",
									"    & vmsFilters.vmssegment.segMinDuration == 1",
									"    & vmsFilters.vmssegment.segCategory === \"IN_PORT\";",
									"    ",
									"    tests[\"VMSTrack filters set correctly\"] = vmsFilters.tracks.trkMinTime == 1",
									"    & vmsFilters.tracks.trkMaxTime == 5",
									"    & vmsFilters.tracks.trkMaxDuration == 5",
									"    & vmsFilters.tracks.trkMinDuration == 1;",
									"",
									"    var reportAreas = report.filterExpression.areas;",
									"    if(areas.length != reportAreas.length){",
									"        tests[\"Areas filter not correct\"] = false;",
									"    }",
									"    for (var i = 0; i < reportAreas.length; i++) {",
									"        var found = false;",
									"            for (var j = 0; j < areas.length; j++) {",
									"                if(reportAreas[i].gid == areas[j].gid){",
									"                    found = true;",
									"                }",
									"            }",
									"        tests[\"Area filter \" + i] = found;",
									"    }",
									"",
									"    var reportAssets = report.filterExpression.assets;",
									"    if(assets.length != reportAssets.length){",
									"        tests[\"Assets filter not correct\"] = false;",
									"    }",
									"    ",
									"    for (var i = 0; i < reportAssets.length; i++) {",
									"        var found = false;",
									"            for (var j = 0; j < assets.length; j++) {",
									"                if(reportAssets[i].guid == assets[j].guid){",
									"                    found = true;",
									"                }",
									"            }",
									"        tests[\"Asset filter \" + i] = found;",
									"    }",
									"",
									"",
									"",
									"} catch(e){",
									"    tests[\"JSON format test\"] = false;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Report-AllFilters\",\r\n\t\"desc\": \"test description\",\r\n\t\"visibility\": \"public\",\r\n\t\"withMap\": true,\r\n\t\"filterExpression\": {\r\n\t\t\"common\": {\r\n\t\t\t\"startDate\": \"2017-04-07T08:46:29\",\r\n\t\t\t\"endDate\": \"2017-04-14T08:46:29\",\r\n\t\t\t\"positionSelector\": \"all\"\r\n\t\t},\r\n\t\t\"assets\": {{filterAssetList}},\r\n\t\t\"vms\": {\r\n\t\t\t\"vmsposition\": {\r\n\t\t\t\t\"movMinSpeed\": 1,\r\n\t\t\t\t\"movMaxSpeed\"\r\n\t\t\t\t: 5,\r\n\t\t\t\t\"movType\": \"ENT\",\r\n\t\t\t\t\"movActivity\": \"ANC\",\r\n\t\t\t\t\"movsources\": [\"IRIDIUM\"],\r\n\t\t\t\t\"type\": \"vmspos\"\r\n\t\t\t},\r\n\t\t\t\"vmssegment\": {\r\n\t\t\t\t\"segMinSpeed\"\r\n\t\t\t\t: 1,\r\n\t\t\t\t\"segMaxSpeed\": 5,\r\n\t\t\t\t\"segCategory\": \"IN_PORT\",\r\n\t\t\t\t\"segMinDuration\": 1,\r\n\t\t\t\t\"segMaxDuration\": 5,\r\n\t\t\t\t\"type\": \"vmsseg\"\r\n\t\t\t},\r\n\t\t\t\"vmstrack\"\r\n\t\t\t: {\r\n\t\t\t\t\"trkMinTime\": 1,\r\n\t\t\t\t\"trkMaxTime\": 5,\r\n\t\t\t\t\"trkMinDuration\": 1,\r\n\t\t\t\t\"trkMaxDuration\": 5,\r\n\t\t\t\t\"type\": \"vmstrack\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"areas\": {{filterAreaList}}\r\n\t},\r\n\t\"mapConfiguration\"\r\n\t: {\r\n\t\t\"stylesSettings\": {\r\n\t\t\t\"positions\": {\r\n\t\t\t\t\"attribute\": \"reportedSpeed\",\r\n\t\t\t\t\"style\": {\r\n\t\t\t\t\t\"0.00001-5\": \"#895e25\",\r\n\t\t\t\t\t\"default\"\r\n\t\t\t\t\t: \"#ceb28b\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"segments\": {\r\n\t\t\t\t\"attribute\": \"speedOverGround\",\r\n\t\t\t\t\"style\": {\r\n\t\t\t\t\t\"lineStyle\": \"solid\",\r\n\t\t\t\t\t\"lineWidth\": 2,\r\n\t\t\t\t\t\"0-2\"\r\n\t\t\t\t\t: \"#1a9641\",\r\n\t\t\t\t\t\"2-5\": \"#a6d96a\",\r\n\t\t\t\t\t\"5-8\": \"#fdae61\",\r\n\t\t\t\t\t\"default\": \"#d7191c\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"alarms\": {\r\n\t\t\t\t\"size\": 2,\r\n\t\t\t\t\"open\": \"#FF0000\",\r\n\t\t\t\t\"closed\": \"#008000\",\r\n\t\t\t\t\"pending\": \"#FFA500\",\r\n\t\t\t\t\"none\": \"#198BAF\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"coordinatesFormat\": \"dd\",\r\n\t\t\"displayProjectionId\"\r\n\t\t: 2,\r\n\t\t\"mapProjectionId\": 2,\r\n\t\t\"scaleBarUnits\": \"metric\",\r\n\t\t\"referenceDataSettings\": {\r\n\t\t\t\"EEZ\": {\r\n\t\t\t\t\"selection\": \"all\",\r\n\t\t\t\t\"codes\"\r\n\t\t\t\t: []\r\n\t\t\t},\r\n\t\t\t\"RFMO\": {\r\n\t\t\t\t\"selection\": \"all\",\r\n\t\t\t\t\"codes\": []\r\n\t\t\t},\r\n\t\t\t\"GFCM\": {\r\n\t\t\t\t\"selection\": \"all\",\r\n\t\t\t\t\"codes\": []\r\n\t\t\t},\r\n\t\t\t\"FAO\": {\r\n\t\t\t\t\"selection\": \"all\",\r\n\t\t\t\t\"codes\": []\r\n\t\t\t},\r\n\t\t\t\"FMZ\": {\r\n\t\t\t\t\"selection\": \"all\",\r\n\t\t\t\t\"codes\": []\r\n\t\t\t},\r\n\t\t\t\"STATRECT\": {\r\n\t\t\t\t\"selection\": \"all\",\r\n\t\t\t\t\"codes\": []\r\n\t\t\t},\r\n\t\t\t\"PORT\": {\r\n\t\t\t\t\"selection\"\r\n\t\t\t\t: \"all\",\r\n\t\t\t\t\"codes\": []\r\n\t\t\t},\r\n\t\t\t\"PORTAREA\": {\r\n\t\t\t\t\"selection\": \"all\",\r\n\t\t\t\t\"codes\": []\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "RunReportWithAllFilters",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{allFiltersReportId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "08 SetDefaultReport",
			"item": [
				{
					"name": "authenticate rep_power",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_power\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "Create PublicReport copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"postman.setGlobalVariable(\"reportToSetDefault\", jsonData.data.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"public\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 5\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserContext",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;\r",
									"\r",
									"try {\r",
									"\tvar jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\tvar defaultReports = {};\r",
									"\tvar data = jsonData.contextSet.contexts;\r",
									"\r",
									"\tfor (var i = 0; i < data.length; i++) {\r",
									"\t\tvar context = data[i];\r",
									"\t\tvar scopeName = context.scope.scopeName;\r",
									"\t\tvar preferences = context.preferences.preferences;\r",
									"\r",
									"\t\tfor (var j = 0; j < preferences.length; j++) {\r",
									"\t\t\tpreference = preferences[j];\r",
									"\t\t\tif (preference.optionName === \"DEFAULT_REPORT_ID\") {\r",
									"\t\t\t\tdefaultReports[scopeName] = preference.optionValue;\r",
									"\t\t\t}\r",
									"\t\t}\r",
									"\t}\r",
									"\t\r",
									"\tpostman.setGlobalVariable(\"userDefaultReports\", JSON.stringify(defaultReports));\r",
									"} catch (e) {\r",
									"\ttests[\"json format\"] = false;\r",
									"}\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/userContexts"
					},
					"response": []
				},
				{
					"name": "SetDefaultReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"override\":true}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/default/{{reportToSetDefault}}"
					},
					"response": []
				},
				{
					"name": "GetUserContext-Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;\r",
									"\r",
									"try {\r",
									"\tvar jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\tvar defaultReports = {};\r",
									"\tvar data = jsonData.contextSet.contexts;\r",
									"\r",
									"\tfor (var i = 0; i < data.length; i++) {\r",
									"\t\tvar context = data[i];\r",
									"\t\tvar scopeName = context.scope.scopeName;\r",
									"\t\tvar preferences = context.preferences.preferences;\r",
									"\r",
									"\t\tfor (var j = 0; j < preferences.length; j++) {\r",
									"\t\t\tpreference = preferences[j];\r",
									"\t\t\tif (preference.optionName === \"DEFAULT_REPORT_ID\") {\r",
									"\t\t\t\tdefaultReports[scopeName] = preference.optionValue;\r",
									"\t\t\t}\r",
									"\t\t}\r",
									"\t}\r",
									"\t\r",
									"\tpostman.setGlobalVariable(\"userDefaultReports\", JSON.stringify(defaultReports));\r",
									"\t\r",
									"\ttests[\"Correct report set as default\"] = defaultReports['DG_MARE'] === globals.reportToSetDefault ;\r",
									"\ttests[\"Other scopes not affected\"] = defaultReports['EC'] === JSON.parse(globals.userDefaultReports)[\"EC\"];\r",
									"\t\r",
									"\t\r",
									"} catch (e) {\r",
									"\ttests[\"json format\"] = false;\r",
									"}\r",
									"\r",
									"\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/userContexts"
					},
					"response": []
				},
				{
					"name": "SetDefaultReport - 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"override\":true}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/default/0"
					},
					"response": []
				},
				{
					"name": "GetUserContext-Check0",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;\r",
									"\r",
									"try {\r",
									"\tvar jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\tvar defaultReports = {};\r",
									"\tvar data = jsonData.contextSet.contexts;\r",
									"\r",
									"\tfor (var i = 0; i < data.length; i++) {\r",
									"\t\tvar context = data[i];\r",
									"\t\tvar scopeName = context.scope.scopeName;\r",
									"\t\tvar preferences = context.preferences.preferences;\r",
									"\r",
									"\t\tfor (var j = 0; j < preferences.length; j++) {\r",
									"\t\t\tpreference = preferences[j];\r",
									"\t\t\tif (preference.optionName === \"DEFAULT_REPORT_ID\") {\r",
									"\t\t\t\tdefaultReports[scopeName] = preference.optionValue;\r",
									"\t\t\t}\r",
									"\t\t}\r",
									"\t}\r",
									"\t\r",
									"\ttests[\"Correct report set as default\"] = defaultReports['DG_MARE'] == 0;\r",
									"\ttests[\"Other scopes not affected\"] = defaultReports['EC'] === JSON.parse(globals.userDefaultReports)[\"EC\"];\r",
									"\t\r",
									"\tconsole.log(defaultReports);\r",
									"\tpostman.setGlobalVariable(\"userDefaultReports\", JSON.stringify(defaultReports));\r",
									"\t\r",
									"} catch (e) {\r",
									"\ttests[\"json format\"] = false;\r",
									"}\r",
									"\r",
									"\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/userContexts"
					},
					"response": []
				},
				{
					"name": "SetDefaultReport - IDInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 400\"] = responseCode.code === 400;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"override\":true}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/default/9999"
					},
					"response": []
				},
				{
					"name": "GetUserContext-CheckUnchanged",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;\r",
									"\r",
									"try {\r",
									"\tvar jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\tvar defaultReports = {};\r",
									"\tvar data = jsonData.contextSet.contexts;\r",
									"\r",
									"\tfor (var i = 0; i < data.length; i++) {\r",
									"\t\tvar context = data[i];\r",
									"\t\tvar scopeName = context.scope.scopeName;\r",
									"\t\tvar preferences = context.preferences.preferences;\r",
									"\r",
									"\t\tfor (var j = 0; j < preferences.length; j++) {\r",
									"\t\t\tpreference = preferences[j];\r",
									"\t\t\tif (preference.optionName === \"DEFAULT_REPORT_ID\") {\r",
									"\t\t\t\tdefaultReports[scopeName] = preference.optionValue;\r",
									"\t\t\t}\r",
									"\t\t}\r",
									"\t}\r",
									"\t\r",
									"\tvar previousValues = JSON.parse(globals.userDefaultReports);\r",
									"\t\r",
									"\ttests[\"Correct report set as default\"] = defaultReports['DG_MARE'] == previousValues['DG_MARE'];\r",
									"\ttests[\"Other scopes not affected\"] = defaultReports['EC'] === previousValues['EC'];\r",
									"\t\r",
									"\tconsole.log(defaultReports);\r",
									"\tpostman.setGlobalVariable(\"userDefaultReports\", JSON.stringify(defaultReports));\r",
									"\t\r",
									"} catch (e) {\r",
									"\ttests[\"json format\"] = false;\r",
									"}\r",
									"\r",
									"\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/userContexts"
					},
					"response": []
				},
				{
					"name": "SetDefaultReport - Letters",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 404\"] = responseCode.code === 404;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"override\":true}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/default/lksdjflkjdf"
					},
					"response": []
				},
				{
					"name": "GetUserContext-CheckUnchanged",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;\r",
									"\r",
									"try {\r",
									"\tvar jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\tvar defaultReports = {};\r",
									"\tvar data = jsonData.contextSet.contexts;\r",
									"\r",
									"\tfor (var i = 0; i < data.length; i++) {\r",
									"\t\tvar context = data[i];\r",
									"\t\tvar scopeName = context.scope.scopeName;\r",
									"\t\tvar preferences = context.preferences.preferences;\r",
									"\r",
									"\t\tfor (var j = 0; j < preferences.length; j++) {\r",
									"\t\t\tpreference = preferences[j];\r",
									"\t\t\tif (preference.optionName === \"DEFAULT_REPORT_ID\") {\r",
									"\t\t\t\tdefaultReports[scopeName] = preference.optionValue;\r",
									"\t\t\t}\r",
									"\t\t}\r",
									"\t}\r",
									"\t\r",
									"\tvar previousValues = JSON.parse(globals.userDefaultReports);\r",
									"\t\r",
									"\ttests[\"Correct report set as default\"] = defaultReports['DG_MARE'] == previousValues['DG_MARE'];\r",
									"\ttests[\"Other scopes not affected\"] = defaultReports['EC'] === previousValues['EC'];\r",
									"\t\r",
									"\tconsole.log(defaultReports);\r",
									"\tpostman.setGlobalVariable(\"userDefaultReports\", JSON.stringify(defaultReports));\r",
									"\t\r",
									"} catch (e) {\r",
									"\ttests[\"json format\"] = false;\r",
									"}\r",
									"\r",
									"\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/userContexts"
					},
					"response": []
				},
				{
					"name": "SetDefaultReport - InvalidScope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 401\"] = responseCode.code === 401;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "QWQW"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"override\":true}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/default/{{reportToSetDefault}}"
					},
					"response": []
				},
				{
					"name": "GetUserContext-CheckUnchanged",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;\r",
									"\r",
									"try {\r",
									"\tvar jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\tvar defaultReports = {};\r",
									"\tvar data = jsonData.contextSet.contexts;\r",
									"\r",
									"\tfor (var i = 0; i < data.length; i++) {\r",
									"\t\tvar context = data[i];\r",
									"\t\tvar scopeName = context.scope.scopeName;\r",
									"\t\tvar preferences = context.preferences.preferences;\r",
									"\r",
									"\t\tfor (var j = 0; j < preferences.length; j++) {\r",
									"\t\t\tpreference = preferences[j];\r",
									"\t\t\tif (preference.optionName === \"DEFAULT_REPORT_ID\") {\r",
									"\t\t\t\tdefaultReports[scopeName] = preference.optionValue;\r",
									"\t\t\t}\r",
									"\t\t}\r",
									"\t}\r",
									"\t\r",
									"\tvar previousValues = JSON.parse(globals.userDefaultReports);\r",
									"\t\r",
									"\ttests[\"Correct report set as default\"] = defaultReports['DG_MARE'] == previousValues['DG_MARE'];\r",
									"\ttests[\"Other scopes not affected\"] = defaultReports['EC'] === previousValues['EC'];\r",
									"\t\r",
									"\tconsole.log(defaultReports);\r",
									"\tpostman.setGlobalVariable(\"userDefaultReports\", JSON.stringify(defaultReports));\r",
									"\t\r",
									"} catch (e) {\r",
									"\ttests[\"json format\"] = false;\r",
									"}\r",
									"\r",
									"\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/userContexts"
					},
					"response": []
				},
				{
					"name": "SetDefaultReport - InvalidRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 401\"] = responseCode.code === 401;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"override\":true}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/default/{{reportToSetDefault}}"
					},
					"response": []
				},
				{
					"name": "GetUserContext-CheckUnchanged",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;\r",
									"\r",
									"try {\r",
									"\tvar jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\tvar defaultReports = {};\r",
									"\tvar data = jsonData.contextSet.contexts;\r",
									"\r",
									"\tfor (var i = 0; i < data.length; i++) {\r",
									"\t\tvar context = data[i];\r",
									"\t\tvar scopeName = context.scope.scopeName;\r",
									"\t\tvar preferences = context.preferences.preferences;\r",
									"\r",
									"\t\tfor (var j = 0; j < preferences.length; j++) {\r",
									"\t\t\tpreference = preferences[j];\r",
									"\t\t\tif (preference.optionName === \"DEFAULT_REPORT_ID\") {\r",
									"\t\t\t\tdefaultReports[scopeName] = preference.optionValue;\r",
									"\t\t\t}\r",
									"\t\t}\r",
									"\t}\r",
									"\t\r",
									"\tvar previousValues = JSON.parse(globals.userDefaultReports);\r",
									"\t\r",
									"\ttests[\"Correct report set as default\"] = defaultReports['DG_MARE'] == previousValues['DG_MARE'];\r",
									"\ttests[\"Other scopes not affected\"] = defaultReports['EC'] === previousValues['EC'];\r",
									"\t\r",
									"\tconsole.log(defaultReports);\r",
									"\tpostman.setGlobalVariable(\"userDefaultReports\", JSON.stringify(defaultReports));\r",
									"\t\r",
									"} catch (e) {\r",
									"\ttests[\"json format\"] = false;\r",
									"}\r",
									"\r",
									"\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/userContexts"
					},
					"response": []
				},
				{
					"name": "SetDefaultReport - InvalidToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 403\"] = responseCode.code === 403;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "DG_MARE"
							},
							{
								"key": "roleName",
								"value": "rep_share_role"
							},
							{
								"key": "Authorization",
								"value": "fdsgdfsgdfgdfgfdg"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"override\":true}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/default/{{reportToSetDefault}}"
					},
					"response": []
				},
				{
					"name": "GetUserContext-CheckUnchanged",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;\r",
									"\r",
									"try {\r",
									"\tvar jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\tvar defaultReports = {};\r",
									"\tvar data = jsonData.contextSet.contexts;\r",
									"\r",
									"\tfor (var i = 0; i < data.length; i++) {\r",
									"\t\tvar context = data[i];\r",
									"\t\tvar scopeName = context.scope.scopeName;\r",
									"\t\tvar preferences = context.preferences.preferences;\r",
									"\r",
									"\t\tfor (var j = 0; j < preferences.length; j++) {\r",
									"\t\t\tpreference = preferences[j];\r",
									"\t\t\tif (preference.optionName === \"DEFAULT_REPORT_ID\") {\r",
									"\t\t\t\tdefaultReports[scopeName] = preference.optionValue;\r",
									"\t\t\t}\r",
									"\t\t}\r",
									"\t}\r",
									"\t\r",
									"\tvar previousValues = JSON.parse(globals.userDefaultReports);\r",
									"\t\r",
									"\ttests[\"Correct report set as default\"] = defaultReports['DG_MARE'] == previousValues['DG_MARE'];\r",
									"\ttests[\"Other scopes not affected\"] = defaultReports['EC'] === previousValues['EC'];\r",
									"\t\r",
									"\tconsole.log(defaultReports);\r",
									"\tpostman.setGlobalVariable(\"userDefaultReports\", JSON.stringify(defaultReports));\r",
									"\t\r",
									"} catch (e) {\r",
									"\ttests[\"json format\"] = false;\r",
									"}\r",
									"\r",
									"\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/userContexts"
					},
					"response": []
				}
			]
		},
		{
			"name": "09 Smoke Cycle",
			"item": [
				{
					"name": "authenticate for smoke",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_power\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "Create Last Positions Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"postman.setGlobalVariable(\"LastPositionsReportId\", jsonData.data.id);",
									"postman.setGlobalVariable(\"lastPositionCommonId\", jsonData.data.filterExpression.common.id)",
									"",
									"tests[\"Response body contains report name\"] = responseBody.has(\"name\");",
									"tests[\"Response body contains report visibility\"] = responseBody.has(\"visibility\");",
									"tests[\"Response body contains report creation timestamp\"] = responseBody.has(\"createdOn\");",
									"tests[\"Response body contains report execution timestamp\"] = responseBody.has(\"executedOn\");",
									"tests[\"Response body contains report author\"] = responseBody.has(\"createdBy\");",
									"tests[\"Response body contains report map preference\"] = responseBody.has(\"withMap\");",
									"tests[\"Response body contains report default status\"] = responseBody.has(\"isDefault\");",
									"tests[\"Response body contains report type\"] = responseBody.has(\"reportType\");",
									"tests[\"Response body contains report editable status\"] = responseBody.has(\"editable\");",
									"tests[\"Response body contains report deletable status\"] = responseBody.has(\"deletable\");",
									"tests[\"Response body contains report position selector parameter\"] = responseBody.has(\"positionSelector\");",
									"tests[\"Response body contains report start date\"] = responseBody.has(\"startDate\");",
									"tests[\"Response body contains report end date\"] = responseBody.has(\"endDate\");",
									"tests[\"Response body contains report vms filtering parameters\"] = responseBody.has(\"vms\");",
									"tests[\"Response body contains report area filtering parameters\"] = responseBody.has(\"areas\");",
									"tests[\"Response body contains report assets\"] = responseBody.has(\"assets\");",
									"tests[\"Response body contains report criteria\"] = responseBody.has(\"criteria\");",
									"",
									"}catch(e){",
									"    tests[\"Body format error\"] = false;",
									"}",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"A nice report\",\n  \"visibility\": \"private\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 50\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Last Positions Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"postman.setGlobalVariable(\"spatialId\", jsonData.data.mapConfiguration.spatialConnectId)",
									"",
									"tests[\"Response body contains report name\"] = responseBody.has(\"name\");",
									"tests[\"Response body contains report visibility\"] = responseBody.has(\"visibility\");",
									"tests[\"Response body contains report creation timestamp\"] = responseBody.has(\"createdOn\");",
									"tests[\"Response body contains report execution timestamp\"] = responseBody.has(\"executedOn\");",
									"tests[\"Response body contains report author\"] = responseBody.has(\"createdBy\");",
									"tests[\"Response body contains report map preference\"] = responseBody.has(\"withMap\");",
									"tests[\"Response body contains report default status\"] = responseBody.has(\"isDefault\");",
									"tests[\"Response body contains report type\"] = responseBody.has(\"reportType\");",
									"tests[\"Response body contains report editable status\"] = responseBody.has(\"editable\");",
									"tests[\"Response body contains report deletable status\"] = responseBody.has(\"deletable\");",
									"tests[\"Response body contains report position selector parameter\"] = responseBody.has(\"positionSelector\");",
									"tests[\"Response body contains report start date\"] = responseBody.has(\"startDate\");",
									"tests[\"Response body contains report end date\"] = responseBody.has(\"endDate\");",
									"tests[\"Response body contains report vms filtering parameters\"] = responseBody.has(\"vms\");",
									"tests[\"Response body contains report area filtering parameters\"] = responseBody.has(\"areas\");",
									"tests[\"Response body contains report assets\"] = responseBody.has(\"assets\");",
									"tests[\"Response body contains report criteria\"] = responseBody.has(\"criteria\");",
									"",
									"}catch(e){",
									"    tests[\"Body format error\"] = false;",
									"}",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Last Positions\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"private\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 50\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{LastPositionsReportId}}?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								"{{LastPositionsReportId}}"
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Last Position Report Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Name has been successfully changed\"] = jsonData.data.name === \"Last Positions Name Changed\";",
									"    tests[\"Check EndDate\"] = jsonData.data.filterExpression.common.endDate === \"2015-07-31T08:30:18\";",
									"    tests[\"Report containts last positions\"] = jsonData.data.filterExpression.common.positionSelector === \"last\";",
									"    ",
									"    ",
									"    tests[\"Response body contains report name\"] = responseBody.has(\"name\");",
									"    tests[\"Response body contains report visibility\"] = responseBody.has(\"visibility\");",
									"    tests[\"Response body contains report creation timestamp\"] = responseBody.has(\"createdOn\");",
									"    tests[\"Response body contains report execution timestamp\"] = responseBody.has(\"executedOn\");",
									"    tests[\"Response body contains report author\"] = responseBody.has(\"createdBy\");",
									"    tests[\"Response body contains report map preference\"] = responseBody.has(\"withMap\");",
									"    tests[\"Response body contains report default status\"] = responseBody.has(\"isDefault\");",
									"    tests[\"Response body contains report type\"] = responseBody.has(\"reportType\");",
									"    tests[\"Response body contains report editable status\"] = responseBody.has(\"editable\");",
									"    tests[\"Response body contains report deletable status\"] = responseBody.has(\"deletable\");",
									"    tests[\"Response body contains report position selector parameter\"] = responseBody.has(\"positionSelector\");",
									"    tests[\"Response body contains report start date\"] = responseBody.has(\"startDate\");",
									"    tests[\"Response body contains report end date\"] = responseBody.has(\"endDate\");",
									"    tests[\"Response body contains report vms filtering parameters\"] = responseBody.has(\"vms\");",
									"    tests[\"Response body contains report area filtering parameters\"] = responseBody.has(\"areas\");",
									"    tests[\"Response body contains report assets\"] = responseBody.has(\"assets\");",
									"    tests[\"Response body contains report criteria\"] = responseBody.has(\"criteria\");",
									"    ",
									"}catch(e){",
									"    tests[\"Body format error\"] = false;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{LastPositionsReportId}},\r\n    \"name\": \"Last Positions Name Changed\",\r\n    \"desc\": \"A nice report\",\r\n    \"reportType\": \"standard\",\r\n    \"visibility\": \"private\",\r\n    \"withMap\": true,\r\n    \"filterExpression\": {\r\n        \"common\": {\r\n            \"id\": {{lastPositionCommonId}},\r\n            \"startDate\": \"2015-07-26T08:30:18\",\r\n            \"endDate\": \"2015-07-31T08:30:18\",\r\n            \"positionSelector\": \"last\",\r\n            \"positionTypeSelector\": \"positions\",\r\n            \"xValue\": 50\r\n        },\r\n        \"assets\": [],\r\n        \"vms\": {},\r\n        \"areas\": []\r\n    },\r\n    \"mapConfiguration\": {\r\n    \t\"spatialConnectId\":{{spatialId}}\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{LastPositionsReportId}}?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								"{{LastPositionsReportId}}"
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Run Last Positions Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report execution contains movements parameter\"] = responseBody.has(\"movements\");",
									"tests[\"Report execution contains segments parameter\"] = responseBody.has(\"segments\");",
									"tests[\"Report execution contains tracks parameter\"] = responseBody.has(\"tracks\");",
									"tests[\"Report execution contains trips parameter\"] = responseBody.has(\"trips\");",
									"tests[\"Report execution contains activities parameter\"] = responseBody.has(\"activities\");",
									"tests[\"Report execution contains criteria parameter\"] = responseBody.has(\"criteria\");",
									"",
									"} catch(e){ tests[\"Body format test\"] = false; }",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{LastPositionsReportId}}"
					},
					"response": []
				},
				{
					"name": "Delete Last Positions Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/{{LastPositionsReportId}}"
					},
					"response": []
				},
				{
					"name": "Check Report List For Deleted Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Report list does not contain deleted report\"] = !(responseBody.has(globals.lastPositionsReportGuid));",
									"tests[\"status code = 200\"+globals.lastPositionsReportGuid] = responseCode.code === 200;",
									"tests[\"Response body contains report name\"] = responseBody.has(\"name\");",
									"tests[\"Response body contains report visibility\"] = responseBody.has(\"visibility\");",
									"tests[\"Response body contains report creation timestamp\"] = responseBody.has(\"createdOn\");",
									"tests[\"Response body contains report execution timestamp\"] = responseBody.has(\"executedOn\");",
									"tests[\"Response body contains report author\"] = responseBody.has(\"createdBy\");",
									"tests[\"Response body contains report map preference\"] = responseBody.has(\"withMap\");",
									"tests[\"Response body contains report default status\"] = responseBody.has(\"isDefault\");",
									"tests[\"Response body contains report type\"] = responseBody.has(\"reportType\");",
									"tests[\"Response body contains report editable status\"] = responseBody.has(\"editable\");",
									"tests[\"Response body contains report deletable status\"] = responseBody.has(\"deletable\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/list"
					},
					"response": []
				},
				{
					"name": "Create EEZ Maps Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report containts EEZ Maps\"] = jsonData.data.filterExpression.areas[0].areaType === \"EEZ\";",
									"postman.setGlobalVariable(\"EEZMapsReportId\", jsonData.data.id);",
									"",
									"tests[\"Response body contains report name\"] = responseBody.has(\"name\");",
									"tests[\"Response body contains report visibility\"] = responseBody.has(\"visibility\");",
									"tests[\"Response body contains report creation timestamp\"] = responseBody.has(\"createdOn\");",
									"tests[\"Response body contains report execution timestamp\"] = responseBody.has(\"executedOn\");",
									"tests[\"Response body contains report author\"] = responseBody.has(\"createdBy\");",
									"tests[\"Response body contains report map preference\"] = responseBody.has(\"withMap\");",
									"tests[\"Response body contains report default status\"] = responseBody.has(\"isDefault\");",
									"tests[\"Response body contains report type\"] = responseBody.has(\"reportType\");",
									"tests[\"Response body contains report editable status\"] = responseBody.has(\"editable\");",
									"tests[\"Response body contains report deletable status\"] = responseBody.has(\"deletable\");",
									"tests[\"Response body contains report position selector parameter\"] = responseBody.has(\"positionSelector\");",
									"tests[\"Response body contains report start date\"] = responseBody.has(\"startDate\");",
									"tests[\"Response body contains report end date\"] = responseBody.has(\"endDate\");",
									"tests[\"Response body contains report vms filtering parameters\"] = responseBody.has(\"vms\");",
									"tests[\"Response body contains report area filtering parameters\"] = responseBody.has(\"areas\");",
									"tests[\"Response body contains report assets\"] = responseBody.has(\"assets\");",
									"tests[\"Response body contains report criteria\"] = responseBody.has(\"criteria\");",
									"",
									"}catch(e){",
									"    tests[\"Body format error\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"EEZ Maps\",\r\n  \"desc\": \"EEZ Maps Report\",\r\n  \"visibility\": \"private\",\r\n  \"withMap\": true,\r\n  \"filterExpression\": {\r\n    \"common\": {\r\n      \"startDate\": \"2015-05-26T09:45:31\",\r\n      \"endDate\": \"2016-06-30T10:05:31\",\r\n      \"positionSelector\": \"all\"\r\n    },\r\n    \"assets\": [],\r\n    \"vms\": {},\r\n    \"areas\": [\r\n      {\r\n        \"gid\": 215,\r\n        \"areaType\": \"EEZ\"\r\n      }\r\n    ]\r\n  },\r\n  \"mapConfiguration\": {}\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Run EEZ Maps Report ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report execution contains movements parameter\"] = responseBody.has(\"movements\");",
									"tests[\"Report execution contains segments parameter\"] = responseBody.has(\"segments\");",
									"tests[\"Report execution contains tracks parameter\"] = responseBody.has(\"tracks\");",
									"tests[\"Report execution contains trips parameter\"] = responseBody.has(\"trips\");",
									"tests[\"Report execution contains activities parameter\"] = responseBody.has(\"activities\");",
									"tests[\"Report execution contains criteria parameter\"] = responseBody.has(\"criteria\");",
									"",
									"} catch(e){ tests[\"Body format test\"] = false; }",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{EEZMapsReportId}}"
					},
					"response": []
				},
				{
					"name": "Create RFMO Maps Report ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report containts RFMO Maps\"] = jsonData.data.filterExpression.areas[0].areaType === \"RFMO\";",
									"postman.setGlobalVariable(\"RFMOMapsReportId\", jsonData.data.id);",
									"",
									"tests[\"Response body contains report name\"] = responseBody.has(\"name\");",
									"tests[\"Response body contains report visibility\"] = responseBody.has(\"visibility\");",
									"tests[\"Response body contains report creation timestamp\"] = responseBody.has(\"createdOn\");",
									"tests[\"Response body contains report execution timestamp\"] = responseBody.has(\"executedOn\");",
									"tests[\"Response body contains report author\"] = responseBody.has(\"createdBy\");",
									"tests[\"Response body contains report map preference\"] = responseBody.has(\"withMap\");",
									"tests[\"Response body contains report default status\"] = responseBody.has(\"isDefault\");",
									"tests[\"Response body contains report type\"] = responseBody.has(\"reportType\");",
									"tests[\"Response body contains report editable status\"] = responseBody.has(\"editable\");",
									"tests[\"Response body contains report deletable status\"] = responseBody.has(\"deletable\");",
									"tests[\"Response body contains report position selector parameter\"] = responseBody.has(\"positionSelector\");",
									"tests[\"Response body contains report start date\"] = responseBody.has(\"startDate\");",
									"tests[\"Response body contains report end date\"] = responseBody.has(\"endDate\");",
									"tests[\"Response body contains report vms filtering parameters\"] = responseBody.has(\"vms\");",
									"tests[\"Response body contains report area filtering parameters\"] = responseBody.has(\"areas\");",
									"tests[\"Response body contains report assets\"] = responseBody.has(\"assets\");",
									"tests[\"Response body contains report criteria\"] = responseBody.has(\"criteria\");",
									"",
									"}catch(e){",
									"    tests[\"Body format error\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"RFMO Maps\",\r\n  \"desc\": \"RFMO Maps Report\",\r\n  \"visibility\": \"private\",\r\n  \"withMap\": true,\r\n  \"filterExpression\": {\r\n    \"common\": {\r\n      \"startDate\": \"2014-07-26T09:50:44\",\r\n      \"endDate\": \"2016-07-31T10:05:44\",\r\n      \"positionSelector\": \"all\"\r\n    },\r\n    \"assets\": [],\r\n    \"vms\": {},\r\n    \"areas\": [\r\n      {\r\n        \"gid\": 13,\r\n        \"areaType\": \"RFMO\"\r\n      }\r\n    ]\r\n  },\r\n  \"mapConfiguration\": {}\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Run RFMO Maps Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report execution contains movements parameter\"] = responseBody.has(\"movements\");",
									"tests[\"Report execution contains segments parameter\"] = responseBody.has(\"segments\");",
									"tests[\"Report execution contains tracks parameter\"] = responseBody.has(\"tracks\");",
									"tests[\"Report execution contains trips parameter\"] = responseBody.has(\"trips\");",
									"tests[\"Report execution contains activities parameter\"] = responseBody.has(\"activities\");",
									"tests[\"Report execution contains criteria parameter\"] = responseBody.has(\"criteria\");",
									"",
									"} catch(e){ tests[\"Body format test\"] = false; }",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{RFMOMapsReportId}}"
					},
					"response": []
				},
				{
					"name": "Create User Area",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"userAreaId\", jsonData.data);",
									"",
									"tests[\"User Area Id = \" + jsonData.data] = jsonData.data !== 0;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n        \"type\": \"MultiPolygon\",\r\n          \"coordinates\": [\r\n            [\r\n                [\r\n                    [-99.028, 46.985], [-99.028, 50.979],\r\n                    [-82.062, 50.979], [-82.062, 47.002],\r\n                    [-99.028, 46.985]\r\n                ]\r\n            ],\r\n            [\r\n                [\r\n                    [-109.028, 36.985], [-109.028, 40.979],\r\n                    [-102.062, 40.979], [-102.062, 37.002],\r\n                    [-109.028, 36.985]\r\n                ]\r\n             ]\r\n          ]\r\n  },\r\n  \"properties\": {\r\n    \"name\": \"{{$guid}}\",\r\n    \"description\": \"Test description 2\",\r\n    \"startDate\": \"2015-10-11T13:02:23\",\r\n    \"endDate\": \"2015-10-11T13:02:23\",\r\n    \"subType\": \"ABC\",\r\n    \"isShared\": \"true\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/spatial/rest/userarea"
					},
					"response": []
				},
				{
					"name": "Create User Area Report ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report contains USER AREA Maps\"] = jsonData.data.filterExpression.areas[0].areaType === \"USERAREA\";",
									"tests[\"Report contains the USER AREA Map we created\"] = jsonData.data.filterExpression.areas[0].areaType === \"USERAREA\";",
									"",
									"postman.setGlobalVariable(\"UserAreaReportId\", jsonData.data.id);",
									"",
									"tests[\"Response body contains report name\"] = responseBody.has(\"name\");",
									"tests[\"Response body contains report visibility\"] = responseBody.has(\"visibility\");",
									"tests[\"Response body contains report creation timestamp\"] = responseBody.has(\"createdOn\");",
									"tests[\"Response body contains report execution timestamp\"] = responseBody.has(\"executedOn\");",
									"tests[\"Response body contains report author\"] = responseBody.has(\"createdBy\");",
									"tests[\"Response body contains report map preference\"] = responseBody.has(\"withMap\");",
									"tests[\"Response body contains report default status\"] = responseBody.has(\"isDefault\");",
									"tests[\"Response body contains report type\"] = responseBody.has(\"reportType\");",
									"tests[\"Response body contains report editable status\"] = responseBody.has(\"editable\");",
									"tests[\"Response body contains report deletable status\"] = responseBody.has(\"deletable\");",
									"tests[\"Response body contains report position selector parameter\"] = responseBody.has(\"positionSelector\");",
									"tests[\"Response body contains report start date\"] = responseBody.has(\"startDate\");",
									"tests[\"Response body contains report end date\"] = responseBody.has(\"endDate\");",
									"tests[\"Response body contains report vms filtering parameters\"] = responseBody.has(\"vms\");",
									"tests[\"Response body contains report area filtering parameters\"] = responseBody.has(\"areas\");",
									"tests[\"Response body contains report assets\"] = responseBody.has(\"assets\");",
									"tests[\"Response body contains report criteria\"] = responseBody.has(\"criteria\");",
									"",
									"}catch(e){",
									"    tests[\"Body format error\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"User Area\",\r\n  \"desc\": \"User Area Report\",\r\n  \"visibility\": \"private\",\r\n  \"withMap\": true,\r\n  \"filterExpression\": {\r\n    \"common\": {\r\n      \"startDate\": \"2015-07-09T09:50:17\",\r\n      \"endDate\": \"2016-07-31T10:15:17\",\r\n      \"positionSelector\": \"all\"\r\n    },\r\n    \"assets\": [],\r\n    \"vms\": {},\r\n    \"areas\": [\r\n      {\r\n        \"gid\": 1,\r\n        \"areaType\": \"USERAREA\"\r\n      }\r\n    ]\r\n  },\r\n  \"mapConfiguration\": {}\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Run User Area Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report execution contains movements parameter\"] = responseBody.has(\"movements\");",
									"tests[\"Report execution contains segments parameter\"] = responseBody.has(\"segments\");",
									"tests[\"Report execution contains tracks parameter\"] = responseBody.has(\"tracks\");",
									"tests[\"Report execution contains trips parameter\"] = responseBody.has(\"trips\");",
									"tests[\"Report execution contains activities parameter\"] = responseBody.has(\"activities\");",
									"tests[\"Report execution contains criteria parameter\"] = responseBody.has(\"criteria\");",
									"",
									"} catch(e){ tests[\"Body format test\"] = false; }",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{UserAreaReportId}}"
					},
					"response": []
				},
				{
					"name": "Create Public Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report visibility is public\"] = jsonData.data.visibility === \"public\";",
									"postman.setGlobalVariable(\"PublicReportId\", jsonData.data.id);",
									"postman.setGlobalVariable(\"PublicReportIdGuid\", jsonData.data.desc)",
									"",
									"tests[\"Response body contains report name\"] = responseBody.has(\"name\");",
									"tests[\"Response body contains report visibility\"] = responseBody.has(\"visibility\");",
									"tests[\"Response body contains report creation timestamp\"] = responseBody.has(\"createdOn\");",
									"tests[\"Response body contains report execution timestamp\"] = responseBody.has(\"executedOn\");",
									"tests[\"Response body contains report author\"] = responseBody.has(\"createdBy\");",
									"tests[\"Response body contains report map preference\"] = responseBody.has(\"withMap\");",
									"tests[\"Response body contains report default status\"] = responseBody.has(\"isDefault\");",
									"tests[\"Response body contains report type\"] = responseBody.has(\"reportType\");",
									"tests[\"Response body contains report editable status\"] = responseBody.has(\"editable\");",
									"tests[\"Response body contains report deletable status\"] = responseBody.has(\"deletable\");",
									"tests[\"Response body contains report position selector parameter\"] = responseBody.has(\"positionSelector\");",
									"tests[\"Response body contains report start date\"] = responseBody.has(\"startDate\");",
									"tests[\"Response body contains report end date\"] = responseBody.has(\"endDate\");",
									"tests[\"Response body contains report vms filtering parameters\"] = responseBody.has(\"vms\");",
									"tests[\"Response body contains report area filtering parameters\"] = responseBody.has(\"areas\");",
									"tests[\"Response body contains report assets\"] = responseBody.has(\"assets\");",
									"tests[\"Response body contains report criteria\"] = responseBody.has(\"criteria\");",
									"",
									"}catch(e){",
									"    tests[\"Body format error\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Public visibility\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"public\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 50\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Run Public Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report execution contains movements parameter\"] = responseBody.has(\"movements\");",
									"tests[\"Report execution contains segments parameter\"] = responseBody.has(\"segments\");",
									"tests[\"Report execution contains tracks parameter\"] = responseBody.has(\"tracks\");",
									"tests[\"Report execution contains trips parameter\"] = responseBody.has(\"trips\");",
									"tests[\"Report execution contains activities parameter\"] = responseBody.has(\"activities\");",
									"tests[\"Report execution contains criteria parameter\"] = responseBody.has(\"criteria\");",
									"",
									"} catch(e){ tests[\"Body format test\"] = false; }",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{PublicReportId}}"
					},
					"response": []
				},
				{
					"name": "Create Private Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report visibility is private\"] = jsonData.data.visibility === \"private\";",
									"postman.setGlobalVariable(\"PrivateReportId\", jsonData.data.id);",
									"postman.setGlobalVariable(\"PrivateReportIdGuid\", jsonData.data.desc)",
									"",
									"tests[\"Response body contains report name\"] = responseBody.has(\"name\");",
									"tests[\"Response body contains report visibility\"] = responseBody.has(\"visibility\");",
									"tests[\"Response body contains report creation timestamp\"] = responseBody.has(\"createdOn\");",
									"tests[\"Response body contains report execution timestamp\"] = responseBody.has(\"executedOn\");",
									"tests[\"Response body contains report author\"] = responseBody.has(\"createdBy\");",
									"tests[\"Response body contains report map preference\"] = responseBody.has(\"withMap\");",
									"tests[\"Response body contains report default status\"] = responseBody.has(\"isDefault\");",
									"tests[\"Response body contains report type\"] = responseBody.has(\"reportType\");",
									"tests[\"Response body contains report editable status\"] = responseBody.has(\"editable\");",
									"tests[\"Response body contains report deletable status\"] = responseBody.has(\"deletable\");",
									"tests[\"Response body contains report position selector parameter\"] = responseBody.has(\"positionSelector\");",
									"tests[\"Response body contains report start date\"] = responseBody.has(\"startDate\");",
									"tests[\"Response body contains report end date\"] = responseBody.has(\"endDate\");",
									"tests[\"Response body contains report vms filtering parameters\"] = responseBody.has(\"vms\");",
									"tests[\"Response body contains report area filtering parameters\"] = responseBody.has(\"areas\");",
									"tests[\"Response body contains report assets\"] = responseBody.has(\"assets\");",
									"tests[\"Response body contains report criteria\"] = responseBody.has(\"criteria\");",
									"",
									"}catch(e){",
									"    tests[\"Body format error\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Private visibility\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"private\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 50\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Run Private Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report execution contains movements parameter\"] = responseBody.has(\"movements\");",
									"tests[\"Report execution contains segments parameter\"] = responseBody.has(\"segments\");",
									"tests[\"Report execution contains tracks parameter\"] = responseBody.has(\"tracks\");",
									"tests[\"Report execution contains trips parameter\"] = responseBody.has(\"trips\");",
									"tests[\"Report execution contains activities parameter\"] = responseBody.has(\"activities\");",
									"tests[\"Report execution contains criteria parameter\"] = responseBody.has(\"criteria\");",
									"",
									"} catch(e){ tests[\"Body format test\"] = false; }",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{PrivateReportId}}"
					},
					"response": []
				},
				{
					"name": "Create Scope Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report visibility is scope\"] = jsonData.data.visibility === \"scope\";",
									"postman.setGlobalVariable(\"ScopeReportId\", jsonData.data.id);",
									"postman.setGlobalVariable(\"ScopeReportIdGuid\", jsonData.data.desc)",
									"",
									"tests[\"Response body contains report name\"] = responseBody.has(\"name\");",
									"tests[\"Response body contains report visibility\"] = responseBody.has(\"visibility\");",
									"tests[\"Response body contains report creation timestamp\"] = responseBody.has(\"createdOn\");",
									"tests[\"Response body contains report execution timestamp\"] = responseBody.has(\"executedOn\");",
									"tests[\"Response body contains report author\"] = responseBody.has(\"createdBy\");",
									"tests[\"Response body contains report map preference\"] = responseBody.has(\"withMap\");",
									"tests[\"Response body contains report default status\"] = responseBody.has(\"isDefault\");",
									"tests[\"Response body contains report type\"] = responseBody.has(\"reportType\");",
									"tests[\"Response body contains report editable status\"] = responseBody.has(\"editable\");",
									"tests[\"Response body contains report deletable status\"] = responseBody.has(\"deletable\");",
									"tests[\"Response body contains report position selector parameter\"] = responseBody.has(\"positionSelector\");",
									"tests[\"Response body contains report start date\"] = responseBody.has(\"startDate\");",
									"tests[\"Response body contains report end date\"] = responseBody.has(\"endDate\");",
									"tests[\"Response body contains report vms filtering parameters\"] = responseBody.has(\"vms\");",
									"tests[\"Response body contains report area filtering parameters\"] = responseBody.has(\"areas\");",
									"tests[\"Response body contains report assets\"] = responseBody.has(\"assets\");",
									"tests[\"Response body contains report criteria\"] = responseBody.has(\"criteria\");",
									"",
									"}catch(e){",
									"    tests[\"Body format error\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n  \"name\": \"Public visibility\",\n  \"desc\": \"{{$guid}}\",\n  \"visibility\": \"scope\",\n  \"withMap\": true,\n  \"filterExpression\": {\n    \"common\": {\n      \"startDate\": \"2015-07-26T08:30:18\",\n      \"endDate\": \"2015-07-31T08:30:18\",\n      \"positionSelector\": \"last\",\n      \"positionTypeSelector\": \"positions\",\n      \"xValue\": 50\n    },\n    \"assets\": [],\n    \"vms\": {},\n    \"areas\": []\n  },\n  \"mapConfiguration\": {}\n}\n"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Run Scope Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report execution contains movements parameter\"] = responseBody.has(\"movements\");",
									"tests[\"Report execution contains segments parameter\"] = responseBody.has(\"segments\");",
									"tests[\"Report execution contains tracks parameter\"] = responseBody.has(\"tracks\");",
									"tests[\"Report execution contains trips parameter\"] = responseBody.has(\"trips\");",
									"tests[\"Report execution contains activities parameter\"] = responseBody.has(\"activities\");",
									"tests[\"Report execution contains criteria parameter\"] = responseBody.has(\"criteria\");",
									"",
									"} catch(e){ tests[\"Body format test\"] = false; }",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{ScopeReportId}}"
					},
					"response": []
				},
				{
					"name": "Create Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"tests[\"Check asset name\"] = jsonData.data.name === \"Test Name\";",
									"tests[\"Check asset country code\"] = jsonData.data.countryCode === \"ROU\";",
									"tests[\"Check asset external marking\"] = jsonData.data.externalMarking === \"ExtTest\";",
									"",
									"} catch(e) {tests[\"Body format test\"] = false; } "
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var randomtext=\"\";",
									"var charset = \"abcdefghijklmnopqrstuvwxyz0123456789\";",
									"",
									"    for( var i=0; i < 8; i++ )",
									"        randomtext += charset.charAt(Math.floor(Math.random() * charset.length));",
									"       ",
									"var uniqueCFR = \"ROU0\"+randomtext;",
									"var uniqueIRCS = randomtext;",
									"",
									"postman.setGlobalVariable(\"assetCFR\", uniqueCFR);",
									"postman.setGlobalVariable(\"assetIRCS\", uniqueIRCS);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\": true,\n    \"source\": \"INTERNAL\",\n    \"cfr\": \"{{assetCFR}}\",\n    \"name\": \"Test Name\",\n    \"countryCode\": \"ROU\",\n    \"imo\": null,\n    \"externalMarking\": \"ExtTest\",\n    \"hasIrcs\": \"Y\",\n    \"ircs\": \"{{assetIRCS}}\",\n    \"hasLicense\": false,\n    \"powerMain\": null,\n    \"grossTonnage\": null,\n    \"grossTonnageUnit\": \"LONDON\",\n    \"contact\": [],\n    \"producer\": {\n        \"code\": null\n    },\n    \"notes\": []\n}\n"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/asset/rest/asset"
					},
					"response": []
				},
				{
					"name": "Create Draft First Position",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"position1_guid\", jsonData.data.guid);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Position is stored as draft\"] = jsonData.data.state === \"DRAFT\";",
									"tests[\"Check asset name\"] = jsonData.data.asset.name === \"Test Name\";",
									"tests[\"Check asset flag state\"] = jsonData.data.asset.flagState === \"ROU\";",
									"tests[\"Check asset external marking\"] = jsonData.data.asset.extMarking === \"ExtTest\";",
									"//tests[\"Check timestamp\"] = jsonData.data.time === \"2017-02-01 16:00:15 +0000\";",
									"tests[\"Check speed\"] = jsonData.data.speed === 10;",
									"tests[\"Check longitude\"] = jsonData.data.position.longitude === 29.970703124999996;",
									"tests[\"Check latitude\"] = jsonData.data.position.latitude === 44.809121700077355;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"speed\": 10,\r\n    \"course\": 15,\r\n    \"time\": \"2017-02-01 16:00:15 +00:00\",\r\n    \"status\": \"010\",\r\n    \"state\": \"DRAFT\",\r\n    \"asset\": {\r\n        \"cfr\": \"{{assetCFR}}\",\r\n        \"name\": \"Test Name\",\r\n        \"extMarking\": \"ExtTest\",\r\n        \"ircs\": \"{{assetIRCS}}\",\r\n        \"flagState\": \"ROU\"\r\n    },\r\n    \"position\": {\r\n        \"longitude\": \"29.970703124999996\",\r\n        \"latitude\": \"44.809121700077355\"\r\n    }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/movement/rest/tempmovement"
					},
					"response": []
				},
				{
					"name": "Create Sent First Position",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Position is sent\"] = jsonData.data.state === \"SENT\";",
									"tests[\"Check asset name\"] = jsonData.data.asset.name === \"Test Name\";",
									"tests[\"Check asset flag state\"] = jsonData.data.asset.flagState === \"ROU\";",
									"tests[\"Check asset external marking\"] = jsonData.data.asset.extMarking === \"ExtTest\";",
									"// tests[\"Check timestamp\"] = jsonData.data.time === \"2017-02-01 16:00:15 +0000\";",
									"tests[\"Check speed\"] = jsonData.data.speed === 10;",
									"tests[\"Check longitude\"] = jsonData.data.position.longitude === 29.970703124999996;",
									"tests[\"Check latitude\"] = jsonData.data.position.latitude === 44.809121700077355;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"guid\": \"{{position1_guid}}\",\r\n    \"speed\": 10,\r\n    \"course\": 15,\r\n    \"time\": \"2017-02-01 16:00:15 +0000\",\r\n    \"updatedTime\": \"2017-02-14 16:01:53 +0000\",\r\n    \"status\": \"010\",\r\n    \"state\": \"DRAFT\",\r\n    \"carrier\": {\r\n        \"cfr\": \"ROU0ptl7ja1t\",\r\n        \"name\": \"Test Name\",\r\n        \"externalMarking\": \"ExtTest\",\r\n        \"ircs\": \"ptl7ja1t\",\r\n        \"flagState\": \"ROU\"\r\n    },\r\n    \"position\": {\r\n        \"longitude\": 29.970703124999998,\r\n        \"latitude\": 44.809121700077358\r\n    }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/movement/rest/tempmovement/send/{{position1_guid}}"
					},
					"response": []
				},
				{
					"name": "Create Draft Second Position",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"position2_guid\", jsonData.data.guid);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Position is stored as draft\"] = jsonData.data.state === \"DRAFT\";",
									"tests[\"Check asset name\"] = jsonData.data.asset.name === \"Test Name\";",
									"tests[\"Check asset flag state\"] = jsonData.data.asset.flagState === \"ROU\";",
									"tests[\"Check asset external marking\"] = jsonData.data.asset.extMarking === \"ExtTest\";",
									"// tests[\"Check timestamp\"] = jsonData.data.time === \"2017-02-01 16:10:15 +0000\";",
									"tests[\"Check speed\"] = jsonData.data.speed === 10;",
									"tests[\"Check longitude\"] = jsonData.data.position.longitude === 29.990703124999996;",
									"tests[\"Check latitude\"] = jsonData.data.position.latitude === 44.909121700077355;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"speed\": 10,\r\n    \"course\": 15,\r\n    \"time\": \"2017-02-01 16:10:15 +00:00\",\r\n    \"status\": \"010\",\r\n    \"state\": \"DRAFT\",\r\n    \"asset\": {\r\n        \"cfr\": \"{{assetCFR}}\",\r\n        \"name\": \"Test Name\",\r\n        \"extMarking\": \"ExtTest\",\r\n        \"ircs\": \"{{assetIRCS}}\",\r\n        \"flagState\": \"ROU\"\r\n    },\r\n    \"position\": {\r\n        \"longitude\": \"29.990703124999996\",\r\n        \"latitude\": \"44.909121700077355\"\r\n    }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/movement/rest/tempmovement"
					},
					"response": []
				},
				{
					"name": "Create Sent Second Position",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Position is sent\"] = jsonData.data.state === \"SENT\";",
									"tests[\"Check asset name\"] = jsonData.data.asset.name === \"Test Name\";",
									"tests[\"Check asset flag state\"] = jsonData.data.asset.flagState === \"ROU\";",
									"tests[\"Check asset external marking\"] = jsonData.data.asset.extMarking === \"ExtTest\";",
									"// tests[\"Check timestamp\"] = jsonData.data.time === \"2017-02-01 16:10:15 +0000\";",
									"tests[\"Check speed\"] = jsonData.data.speed === 10;",
									"tests[\"Check longitude\"] = jsonData.data.position.longitude === 29.990703124999996;",
									"tests[\"Check latitude\"] = jsonData.data.position.latitude === 44.909121700077355;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"guid\": \"{{position2_guid}}\",\r\n    \"speed\": 10,\r\n    \"course\": 15,\r\n    \"time\": \"2017-02-01 16:00:15 +0000\",\r\n    \"updatedTime\": \"2017-02-14 16:01:53 +0000\",\r\n    \"status\": \"010\",\r\n    \"state\": \"DRAFT\",\r\n    \"carrier\": {\r\n        \"cfr\": \"ROU0ptl7ja1t\",\r\n        \"name\": \"Test Name\",\r\n        \"externalMarking\": \"ExtTest\",\r\n        \"ircs\": \"ptl7ja1t\",\r\n        \"flagState\": \"ROU\"\r\n    },\r\n    \"position\": {\r\n        \"longitude\": \"29.990703124999996\",\r\n        \"latitude\": \"44.909121700077355\"\r\n    }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/movement/rest/tempmovement/send/{{position2_guid}}"
					},
					"response": []
				},
				{
					"name": "Check Asset List By CFR",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"List has assets\"] = jsonData.data.asset.length > 0;",
									"",
									"postman.setGlobalVariable(\"vesselName\", jsonData.data.asset[0].name);",
									"tests[\"name = \" + globals.vesselName] = true;",
									"postman.setGlobalVariable(\"vesselGuid\", jsonData.data.asset[0].assetId.guid);",
									"tests[\"name = \" + globals.vesselGuid] = true;",
									"}catch(e){",
									"    tests[\"Parsing format exception\"] = false;",
									"}",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pagination\": {\r\n    \"page\": 1,\r\n    \"listSize\": 100000\r\n  },\r\n  \"assetSearchCriteria\": {\r\n    \"isDynamic\": false,\r\n    \"criterias\": [\r\n           {\r\n        \"key\": \"CFR\",\r\n        \"value\": \"{{assetCFR}}\"\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/asset/rest/asset/list",
						"description": "Search for Assets containing \"A\""
					},
					"response": []
				},
				{
					"name": "Check Asset List By Flag State",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"List has assets\"] = jsonData.data.asset.length > 0;",
									"",
									"postman.setGlobalVariable(\"vesselName\", jsonData.data.asset[0].name);",
									"tests[\"name = \" + globals.vesselName] = true;",
									"postman.setGlobalVariable(\"vesselGuid\", jsonData.data.asset[0].assetId.guid);",
									"tests[\"name = \" + globals.vesselGuid] = true;",
									"}catch(e){",
									"    tests[\"Parsing format exception\"] = false;",
									"}",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pagination\": {\r\n    \"page\": 1,\r\n    \"listSize\": 100000\r\n  },\r\n  \"assetSearchCriteria\": {\r\n    \"isDynamic\": false,\r\n    \"criterias\": [\r\n  {\r\n        \"key\": \"FLAG_STATE\",\r\n        \"value\": \"ROU\"\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/asset/rest/asset/list",
						"description": "Search for Assets from ROU"
					},
					"response": []
				},
				{
					"name": "Check Asset List By External Marking",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"List has assets\"] = jsonData.data.asset.length > 0;",
									"",
									"postman.setGlobalVariable(\"vesselName\", jsonData.data.asset[0].name);",
									"tests[\"name = \" + globals.vesselName] = true;",
									"postman.setGlobalVariable(\"vesselGuid\", jsonData.data.asset[0].assetId.guid);",
									"tests[\"name = \" + globals.vesselGuid] = true;",
									"}catch(e){",
									"    tests[\"Parsing format exception\"] = false;",
									"}",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pagination\": {\r\n    \"page\": 1,\r\n    \"listSize\": 100000\r\n  },\r\n  \"assetSearchCriteria\": {\r\n    \"isDynamic\": false,\r\n    \"criterias\": [\r\n      {\r\n        \"key\": \"EXTERNAL_MARKING\",\r\n        \"value\": \"ExtTest\"\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/asset/rest/asset/list",
						"description": "Search for Assets created from test"
					},
					"response": []
				},
				{
					"name": "Check Asset List By Vessel Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"List has assets\"] = jsonData.data.asset.length > 0;",
									"",
									"postman.setGlobalVariable(\"vesselName\", jsonData.data.asset[0].name);",
									"tests[\"name = \" + globals.vesselName] = true;",
									"postman.setGlobalVariable(\"vesselGuid\", jsonData.data.asset[0].assetId.guid);",
									"tests[\"name = \" + globals.vesselGuid] = true;",
									"}catch(e){",
									"    tests[\"Parsing format exception\"] = false;",
									"}",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pagination\": {\r\n    \"page\": 1,\r\n    \"listSize\": 100000\r\n  },\r\n  \"assetSearchCriteria\": {\r\n    \"isDynamic\": false,\r\n    \"criterias\": [\r\n           {\r\n        \"key\": \"NAME\",\r\n        \"value\": \"Test Name\"\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/asset/rest/asset/list",
						"description": "Search for Assets containing Test names"
					},
					"response": []
				},
				{
					"name": "Check Asset List By IRCS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"List has assets\"] = jsonData.data.asset.length > 0;",
									"",
									"postman.setGlobalVariable(\"vesselName\", jsonData.data.asset[0].name);",
									"tests[\"name = \" + globals.vesselName] = true;",
									"postman.setGlobalVariable(\"vesselGuid\", jsonData.data.asset[0].assetId.guid);",
									"tests[\"name = \" + globals.vesselGuid] = true;",
									"",
									"}catch(e){",
									"    tests[\"Parsing format exception\"] = false;",
									"}",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pagination\": {\r\n    \"page\": 1,\r\n    \"listSize\": 100000\r\n  },\r\n  \"assetSearchCriteria\": {\r\n    \"isDynamic\": false,\r\n    \"criterias\": [\r\n           {\r\n        \"key\": \"IRCS\",\r\n        \"value\": \"{{assetIRCS}}\"\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/asset/rest/asset/list",
						"description": "Search for Assets with test IRCS"
					},
					"response": []
				},
				{
					"name": "Create Vessels Report ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"tests[\"Report containts the specific vessel name\"] = jsonData.data.filterExpression.assets[0].name === globals.vesselName;",
									"tests[\"Report containts the specific vessel guid\"] = jsonData.data.filterExpression.assets[0].guid === globals.vesselGuid;",
									"",
									"postman.setGlobalVariable(\"ReportVesselsId\", jsonData.data.id);",
									"",
									"tests[\"Response body contains report name\"] = responseBody.has(\"name\");",
									"tests[\"Response body contains report visibility\"] = responseBody.has(\"visibility\");",
									"tests[\"Response body contains report creation timestamp\"] = responseBody.has(\"createdOn\");",
									"tests[\"Response body contains report execution timestamp\"] = responseBody.has(\"executedOn\");",
									"tests[\"Response body contains report author\"] = responseBody.has(\"createdBy\");",
									"tests[\"Response body contains report map preference\"] = responseBody.has(\"withMap\");",
									"tests[\"Response body contains report default status\"] = responseBody.has(\"isDefault\");",
									"tests[\"Response body contains report type\"] = responseBody.has(\"reportType\");",
									"tests[\"Response body contains report editable status\"] = responseBody.has(\"editable\");",
									"tests[\"Response body contains report deletable status\"] = responseBody.has(\"deletable\");",
									"tests[\"Response body contains report position selector parameter\"] = responseBody.has(\"positionSelector\");",
									"tests[\"Response body contains report start date\"] = responseBody.has(\"startDate\");",
									"tests[\"Response body contains report end date\"] = responseBody.has(\"endDate\");",
									"tests[\"Response body contains report vms filtering parameters\"] = responseBody.has(\"vms\");",
									"tests[\"Response body contains report area filtering parameters\"] = responseBody.has(\"areas\");",
									"tests[\"Response body contains report assets\"] = responseBody.has(\"assets\");",
									"tests[\"Response body contains report criteria\"] = responseBody.has(\"criteria\");",
									"",
									"}catch(e){",
									"    tests[\"Parsing format exception\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Vessels Report\",\r\n  \"desc\": \"Report containing vessels\",\r\n  \"visibility\": \"private\",\r\n  \"withMap\": true,\r\n  \"filterExpression\": {\r\n    \"common\": {\r\n      \"startDate\": \"2014-07-11T10:30:20\",\r\n      \"endDate\": \"2016-07-22T10:50:20\",\r\n      \"positionSelector\": \"all\"\r\n    },\r\n    \"assets\": [\r\n      {\r\n        \"name\": \"{{vesselName}}\",\r\n        \"guid\": \"{{vesselGuid}}\",\r\n        \"type\": \"asset\"\r\n      }\r\n    ],\r\n    \"vms\": {},\r\n    \"areas\": []\r\n  },\r\n  \"mapConfiguration\": {}\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						},
						"description": "Create report with defined list of vessels\n"
					},
					"response": []
				},
				{
					"name": "Run Vessels Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report execution contains movements parameter\"] = responseBody.has(\"movements\");",
									"tests[\"Report execution contains segments parameter\"] = responseBody.has(\"segments\");",
									"tests[\"Report execution contains tracks parameter\"] = responseBody.has(\"tracks\");",
									"tests[\"Report execution contains trips parameter\"] = responseBody.has(\"trips\");",
									"tests[\"Report execution contains activities parameter\"] = responseBody.has(\"activities\");",
									"tests[\"Report execution contains criteria parameter\"] = responseBody.has(\"criteria\");",
									"",
									"} catch(e){ tests[\"Body format test\"] = false; }",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{ReportVesselsId}}"
					},
					"response": []
				},
				{
					"name": "Create Report  - VMS Filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"",
									"try{",
									"    ",
									"var jsonData = JSON.parse(responseBody)",
									"var vmsFilter = jsonData.data.filterExpression.vms;",
									"",
									"",
									"tests[\"Report containts the specific position filters\"] = ((vmsFilter.vmsposition.movMinSpeed == 1) &&",
									"(vmsFilter.vmsposition.movMaxSpeed == 5) &&",
									"(vmsFilter.vmsposition.movType === \"ENT\") &&",
									"(vmsFilter.vmsposition.movActivity === \"ANC\") &&",
									"(vmsFilter.vmsposition.movsources[0] === \"IRIDIUM\"));",
									"",
									"",
									"tests[\"Report containts the specific segment filters\"] = ((vmsFilter.vmssegment.segMinSpeed == 1) &&",
									"(vmsFilter.vmssegment.segMaxSpeed == 5) &&",
									"(vmsFilter.vmssegment.segMaxDuration == 5) &&",
									"(vmsFilter.vmssegment.segMinDuration == 1) &&",
									"(vmsFilter.vmssegment.segCategory === \"IN_PORT\"));",
									"",
									"",
									"",
									"tests[\"Report containts the specific track filters\"] = ((vmsFilter.tracks.trkMinTime == 1) &&",
									"(vmsFilter.tracks.trkMaxTime == 5) &&",
									"(vmsFilter.tracks.trkMaxDuration == 5) &&",
									"(vmsFilter.tracks.trkMinDuration == 1));",
									"",
									"",
									"postman.setGlobalVariable(\"VMSReportId\", jsonData.data.id);",
									"",
									"tests[\"Response body contains report name\"] = responseBody.has(\"name\");",
									"tests[\"Response body contains report visibility\"] = responseBody.has(\"visibility\");",
									"tests[\"Response body contains report creation timestamp\"] = responseBody.has(\"createdOn\");",
									"tests[\"Response body contains report execution timestamp\"] = responseBody.has(\"executedOn\");",
									"tests[\"Response body contains report author\"] = responseBody.has(\"createdBy\");",
									"tests[\"Response body contains report map preference\"] = responseBody.has(\"withMap\");",
									"tests[\"Response body contains report default status\"] = responseBody.has(\"isDefault\");",
									"tests[\"Response body contains report type\"] = responseBody.has(\"reportType\");",
									"tests[\"Response body contains report editable status\"] = responseBody.has(\"editable\");",
									"tests[\"Response body contains report deletable status\"] = responseBody.has(\"deletable\");",
									"tests[\"Response body contains report position selector parameter\"] = responseBody.has(\"positionSelector\");",
									"tests[\"Response body contains report start date\"] = responseBody.has(\"startDate\");",
									"tests[\"Response body contains report end date\"] = responseBody.has(\"endDate\");",
									"tests[\"Response body contains report vms filtering parameters\"] = responseBody.has(\"vms\");",
									"tests[\"Response body contains report area filtering parameters\"] = responseBody.has(\"areas\");",
									"tests[\"Response body contains report assets\"] = responseBody.has(\"assets\");",
									"tests[\"Response body contains report criteria\"] = responseBody.has(\"criteria\");",
									"",
									"}catch(e){",
									"    tests[\"Parsing format exception\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Vessels Report\",\r\n  \"desc\": \"Report containing vessels\",\r\n  \"visibility\": \"private\",\r\n  \"withMap\": true,\r\n  \"filterExpression\": {\r\n    \"common\": {\r\n      \"startDate\": \"2014-07-11T10:30:20\",\r\n      \"endDate\": \"2016-07-22T10:50:20\",\r\n      \"positionSelector\": \"all\"\r\n    },\r\n    \"assets\": [\r\n      {\r\n        \"name\": \"{{vesselName}}\",\r\n        \"guid\": \"{{vesselGuid}}\",\r\n        \"type\": \"asset\"\r\n      }\r\n    ],\r\n    \"vms\": {\r\n\t\t\t\"vmsposition\": {\r\n\t\t\t\t\"movMinSpeed\": 1,\r\n\t\t\t\t\"movMaxSpeed\"\r\n\t\t\t\t: 5,\r\n\t\t\t\t\"movType\": \"ENT\",\r\n\t\t\t\t\"movActivity\": \"ANC\",\r\n\t\t\t\t\"movsources\": [\"IRIDIUM\"],\r\n\t\t\t\t\"type\": \"vmspos\"\r\n\t\t\t},\r\n\t\t\t\"vmssegment\": {\r\n\t\t\t\t\"segMinSpeed\"\r\n\t\t\t\t: 1,\r\n\t\t\t\t\"segMaxSpeed\": 5,\r\n\t\t\t\t\"segCategory\": \"IN_PORT\",\r\n\t\t\t\t\"segMinDuration\": 1,\r\n\t\t\t\t\"segMaxDuration\": 5,\r\n\t\t\t\t\"type\": \"vmsseg\"\r\n\t\t\t},\r\n\t\t\t\"vmstrack\"\r\n\t\t\t: {\r\n\t\t\t\t\"trkMinTime\": 1,\r\n\t\t\t\t\"trkMaxTime\": 5,\r\n\t\t\t\t\"trkMinDuration\": 1,\r\n\t\t\t\t\"trkMaxDuration\": 5,\r\n\t\t\t\t\"type\": \"vmstrack\"\r\n\t\t\t}\r\n\t\t},\r\n    \"areas\": []\r\n  },\r\n  \"mapConfiguration\": {}\r\n}"
						},
						"url": {
							"raw": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/?projection=DETAILED",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"reporting",
								"rest",
								"report",
								""
							],
							"query": [
								{
									"key": "projection",
									"value": "DETAILED"
								}
							]
						},
						"description": "Create report with defined list of vessels\n"
					},
					"response": []
				},
				{
					"name": "Run VMS Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Report execution contains movements parameter\"] = responseBody.has(\"movements\");",
									"tests[\"Report execution contains segments parameter\"] = responseBody.has(\"segments\");",
									"tests[\"Report execution contains tracks parameter\"] = responseBody.has(\"tracks\");",
									"tests[\"Report execution contains trips parameter\"] = responseBody.has(\"trips\");",
									"tests[\"Report execution contains activities parameter\"] = responseBody.has(\"activities\");",
									"tests[\"Report execution contains criteria parameter\"] = responseBody.has(\"criteria\");",
									"",
									"} catch(e){ tests[\"Body format test\"] = false; }",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"speedUnit\": \"kts\",\r\n  \"distanceUnit\": \"nm\",\r\n  \"additionalProperties\": {\r\n    \"timestamp\": \"2016-07-26T09:59:13\"\r\n  }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/reporting/rest/report/execute/{{VMSReportId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "10 User Rights Cleanup",
			"item": [
				{
					"name": "authenticate usm_admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"usm_admin\",\n   \"password\": \"password\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "get roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"",
									"for (var i = 0; i < data.length; i++) {",
									"    var feature = data[i];",
									"    ",
									"    if (feature.name === 'rep_power_role') {",
									"        postman.setGlobalVariable(\"rep_power_role_id\", feature.roleId);",
									"        ",
									"    } else if (feature.name === 'rep_share_role') {",
									"        postman.setGlobalVariable(\"rep_share_role_id\", feature.roleId);",
									"        ",
									"    } else if (feature.name === 'rep_private_role') {",
									"        postman.setGlobalVariable(\"rep_private_role_id\", feature.roleId);",
									"    }",
									"}",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"Body contains results\"] = responseBody.has(\"results\");",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains roles ids\"] = responseBody.has(\"roleId\");",
									"tests[\"Response contains update features attribute\"] = responseBody.has(\"updateFeatures\");",
									"tests[\"Response contains features attribute\"] = responseBody.has(\"features\");",
									"tests[\"Response contains roles description\"] = responseBody.has(\"description\");",
									"tests[\"Response contains status of the roles\"] = responseBody.has(\"status\");",
									"tests[\"Response contains names of the roles\"] = responseBody.has(\"name\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_share\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/roles"
					},
					"response": []
				},
				{
					"name": "get scopes",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"for (var i = 0; i < data.length; i++) {",
									"    var scope = data[i];",
									"",
									"    if(scope.name === 'EC'){",
									"        postman.setGlobalVariable(\"EC_SCOPE_ID\", scope.scopeId);",
									"        postman.setGlobalVariable(\"EC_ACTIVE_FROM\", scope.activeFrom);",
									"        postman.setGlobalVariable(\"EC_ACTIVE_TO\", scope.activeTo);",
									"        ",
									"    }",
									"    if(scope.name === \"DG_MARE\"){",
									"        postman.setGlobalVariable(\"DG_MARE_SCOPE_ID\", scope.scopeId);",
									"        postman.setGlobalVariable(\"DG_MARE_ACTIVE_FROM\", scope.activeFrom);",
									"        postman.setGlobalVariable(\"DG_MARE_ACTIVE_TO\", scope.activeTo);",
									"    }",
									"}",
									"",
									"tests[\"Response contains results\"] = responseBody.has(\"results\");",
									"",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains active from date\"] = responseBody.has(\"activeFrom\");",
									"tests[\"Response contains active to date\"] = responseBody.has(\"activeTo\");",
									"tests[\"Response contains access to data from date\"] = responseBody.has(\"dataFrom\");",
									"tests[\"Response contains access to data to date\"] = responseBody.has(\"dataTo\");",
									"tests[\"Response contains update datasets attribute\"] = responseBody.has(\"updateDatasets\");",
									"tests[\"Response contains datasets attribute\"] = responseBody.has(\"dataSets\");",
									"tests[\"Response contains scope id's\"] = responseBody.has(\"scopeId\");",
									"tests[\"Response contains status attribute\"] = responseBody.has(\"status\");",
									"tests[\"Response contains scope names\"] = responseBody.has(\"name\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_share\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/scopes"
					},
					"response": []
				},
				{
					"name": "edit_EC_datasets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains active from date\"] = responseBody.has(\"activeFrom\");",
									"tests[\"Response contains active to date\"] = responseBody.has(\"activeTo\");",
									"tests[\"Response contains access to data from date\"] = responseBody.has(\"dataFrom\");",
									"tests[\"Response contains access to data to date\"] = responseBody.has(\"dataTo\");",
									"tests[\"Response contains update datasets attribute\"] = responseBody.has(\"updateDatasets\");",
									"tests[\"Response contains datasets attribute\"] = responseBody.has(\"dataSets\");",
									"tests[\"Response contains scope id's\"] = responseBody.has(\"scopeId\");",
									"tests[\"Response contains status attribute\"] = responseBody.has(\"status\");",
									"tests[\"Response contains scope names\"] = responseBody.has(\"name\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"updateDatasets\": true,\r\n\t\"status\": \"E\",\r\n\t\"name\": \"EC\",\r\n\t\"activeFrom\": \"{{EC_ACTIVE_FROM}}\",\r\n\t\"activeTo\": \"{{EC_ACTIVE_TO}}\",\r\n\t\"scopeId\": {{EC_SCOPE_ID}},\r\n\t\"dataSets\": [34, 18, 29, 33, 14, 47, 50, 41, 38, 8, 26, 30, 52, 48, 51, 3, 46, 7, 42, 100007, 9, 36, 35, 45, 37, 100002, 6, 28, 11, 16, 22, 39, 17, 15, 10, 27, 0, 13, 100008, 32, 20, 19, 31, 44, 43, 25, 49, 4, 24, 5, 1, 2, 23, 40, 100009, 12, 21, 100005, 100011, 100006, 100001, 100010, 100013, 100004, 100000, 100003, 100014, 100012]\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/scopes"
					},
					"response": []
				},
				{
					"name": "edit_DG_MARE_datasets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains active from date\"] = responseBody.has(\"activeFrom\");",
									"tests[\"Response contains active to date\"] = responseBody.has(\"activeTo\");",
									"tests[\"Response contains access to data from date\"] = responseBody.has(\"dataFrom\");",
									"tests[\"Response contains access to data to date\"] = responseBody.has(\"dataTo\");",
									"tests[\"Response contains update datasets attribute\"] = responseBody.has(\"updateDatasets\");",
									"tests[\"Response contains datasets attribute\"] = responseBody.has(\"dataSets\");",
									"tests[\"Response contains scope id's\"] = responseBody.has(\"scopeId\");",
									"tests[\"Response contains status attribute\"] = responseBody.has(\"status\");",
									"tests[\"Response contains scope names\"] = responseBody.has(\"name\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"updateDatasets\": true,\r\n\t\"status\": \"E\",\r\n\t\"name\": \"EC\",\r\n\t\"activeFrom\": \"{{EC_ACTIVE_FROM}}\",\r\n\t\"activeTo\": \"{{EC_ACTIVE_TO}}\",\r\n\t\"scopeId\": {{EC_SCOPE_ID}},\r\n\t\"dataSets\": [34, 18, 29, 33, 14, 47, 50, 41, 38, 8, 26, 30, 52, 48, 51, 3, 46, 7, 42, 100007, 9, 36, 35, 45, 37, 100002, 6, 28, 11, 16, 22, 39, 17, 15, 10, 27, 0, 13, 100008, 32, 20, 19, 31, 44, 43, 25, 49, 4, 24, 5, 1, 2, 23, 40, 100009, 12, 21, 100005, 100011, 100006, 100001, 100010, 100013, 100004, 100000, 100003, 100014, 100012]\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/scopes"
					},
					"response": []
				}
			]
		}
	]
}