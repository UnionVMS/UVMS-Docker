{
	"info": {
		"name": "ActivityQATests",
		"_postman_id": "52ad5e8d-0235-35e0-a09e-17f1291ae92d",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "01 User Rights Cleanup",
			"item": [
				{
					"name": "authenticate usm_admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"usm_admin\",\n   \"password\": \"password\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "get roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"",
									"for (var i = 0; i < data.length; i++) {",
									"    var feature = data[i];",
									"    ",
									"    if (feature.name === 'rep_power_role') {",
									"        postman.setGlobalVariable(\"rep_power_role_id\", feature.roleId);",
									"        ",
									"    } else if (feature.name === 'rep_share_role') {",
									"        postman.setGlobalVariable(\"rep_share_role_id\", feature.roleId);",
									"        ",
									"    } else if (feature.name === 'rep_private_role') {",
									"        postman.setGlobalVariable(\"rep_private_role_id\", feature.roleId);",
									"    }",
									"}",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"Body contains results\"] = responseBody.has(\"results\");",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains roles ids\"] = responseBody.has(\"roleId\");",
									"tests[\"Response contains update features attribute\"] = responseBody.has(\"updateFeatures\");",
									"tests[\"Response contains features attribute\"] = responseBody.has(\"features\");",
									"tests[\"Response contains roles description\"] = responseBody.has(\"description\");",
									"tests[\"Response contains status of the roles\"] = responseBody.has(\"status\");",
									"tests[\"Response contains names of the roles\"] = responseBody.has(\"name\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_share\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/roles"
					},
					"response": []
				},
				{
					"name": "get scopes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"for (var i = 0; i < data.length; i++) {",
									"    var scope = data[i];",
									"",
									"    if(scope.name === 'EC'){",
									"        postman.setGlobalVariable(\"EC_SCOPE_ID\", scope.scopeId);",
									"        postman.setGlobalVariable(\"EC_ACTIVE_FROM\", scope.activeFrom);",
									"        postman.setGlobalVariable(\"EC_ACTIVE_TO\", scope.activeTo);",
									"        ",
									"    }",
									"    if(scope.name === \"DG_MARE\"){",
									"        postman.setGlobalVariable(\"DG_MARE_SCOPE_ID\", scope.scopeId);",
									"        postman.setGlobalVariable(\"DG_MARE_ACTIVE_FROM\", scope.activeFrom);",
									"        postman.setGlobalVariable(\"DG_MARE_ACTIVE_TO\", scope.activeTo);",
									"    }",
									"}",
									"",
									"tests[\"Response contains results\"] = responseBody.has(\"results\");",
									"",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains active from date\"] = responseBody.has(\"activeFrom\");",
									"tests[\"Response contains active to date\"] = responseBody.has(\"activeTo\");",
									"tests[\"Response contains access to data from date\"] = responseBody.has(\"dataFrom\");",
									"tests[\"Response contains access to data to date\"] = responseBody.has(\"dataTo\");",
									"tests[\"Response contains update datasets attribute\"] = responseBody.has(\"updateDatasets\");",
									"tests[\"Response contains datasets attribute\"] = responseBody.has(\"dataSets\");",
									"tests[\"Response contains scope id's\"] = responseBody.has(\"scopeId\");",
									"tests[\"Response contains status attribute\"] = responseBody.has(\"status\");",
									"tests[\"Response contains scope names\"] = responseBody.has(\"name\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_share\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/scopes"
					},
					"response": []
				},
				{
					"name": "edit_EC_datasets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains active from date\"] = responseBody.has(\"activeFrom\");",
									"tests[\"Response contains active to date\"] = responseBody.has(\"activeTo\");",
									"tests[\"Response contains access to data from date\"] = responseBody.has(\"dataFrom\");",
									"tests[\"Response contains access to data to date\"] = responseBody.has(\"dataTo\");",
									"tests[\"Response contains update datasets attribute\"] = responseBody.has(\"updateDatasets\");",
									"tests[\"Response contains datasets attribute\"] = responseBody.has(\"dataSets\");",
									"tests[\"Response contains scope id's\"] = responseBody.has(\"scopeId\");",
									"tests[\"Response contains status attribute\"] = responseBody.has(\"status\");",
									"tests[\"Response contains scope names\"] = responseBody.has(\"name\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"updateDatasets\": true,\r\n\t\"status\": \"E\",\r\n\t\"name\": \"EC\",\r\n\t\"activeFrom\": \"{{EC_ACTIVE_FROM}}\",\r\n\t\"activeTo\": \"{{EC_ACTIVE_TO}}\",\r\n\t\"scopeId\": {{EC_SCOPE_ID}},\r\n\t\"dataSets\": [34, 18, 29, 33, 14, 47, 50, 41, 38, 8, 26, 30, 52, 48, 51, 3, 46, 7, 42, 100007, 9, 36, 35, 45, 37, 100002, 6, 28, 11, 16, 22, 39, 17, 15, 10, 27, 0, 13, 100008, 32, 20, 19, 31, 44, 43, 25, 49, 4, 24, 5, 1, 2, 23, 40, 100009, 12, 21, 100005, 100011, 100006, 100001, 100010, 100013, 100004, 100000, 100003, 100014, 100012]\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/scopes"
					},
					"response": []
				},
				{
					"name": "edit_DG_MARE_datasets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody).results;",
									"tests[\"Response contains active users\"] = responseBody.has(\"activeUsers\");",
									"tests[\"Response contains active from date\"] = responseBody.has(\"activeFrom\");",
									"tests[\"Response contains active to date\"] = responseBody.has(\"activeTo\");",
									"tests[\"Response contains access to data from date\"] = responseBody.has(\"dataFrom\");",
									"tests[\"Response contains access to data to date\"] = responseBody.has(\"dataTo\");",
									"tests[\"Response contains update datasets attribute\"] = responseBody.has(\"updateDatasets\");",
									"tests[\"Response contains datasets attribute\"] = responseBody.has(\"dataSets\");",
									"tests[\"Response contains scope id's\"] = responseBody.has(\"scopeId\");",
									"tests[\"Response contains status attribute\"] = responseBody.has(\"status\");",
									"tests[\"Response contains scope names\"] = responseBody.has(\"name\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "USM-UserManager"
							},
							{
								"key": "scopeName",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"updateDatasets\": true,\r\n\t\"status\": \"E\",\r\n\t\"name\": \"EC\",\r\n\t\"activeFrom\": \"{{EC_ACTIVE_FROM}}\",\r\n\t\"activeTo\": \"{{EC_ACTIVE_TO}}\",\r\n\t\"scopeId\": {{EC_SCOPE_ID}},\r\n\t\"dataSets\": [34, 18, 29, 33, 14, 47, 50, 41, 38, 8, 26, 30, 52, 48, 51, 3, 46, 7, 42, 100007, 9, 36, 35, 45, 37, 100002, 6, 28, 11, 16, 22, 39, 17, 15, 10, 27, 0, 13, 100008, 32, 20, 19, 31, 44, 43, 25, 49, 4, 24, 5, 1, 2, 23, 40, 100009, 12, 21, 100005, 100011, 100006, 100001, 100010, 100013, 100004, 100000, 100003, 100014, 100012]\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/scopes"
					},
					"response": []
				}
			]
		},
		{
			"name": "02 Search Fishing Activities",
			"item": [
				{
					"name": "authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_power\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "Search FA Report Type Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"     tests[\"Fishing Activity Reports have report Type Notification\"] = jsonData.resultList[0].FAReportType === \"NOTIFICATION\";  ",
									"     tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;  ",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"     ",
									"     ",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } ",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pagination\": {\r\n        \"offset\": 0,\r\n        \"pageSize\": 25\r\n    },\r\n    \"sorting\": {\r\n        \"sortBy\": \"ACTIVITY_TYPE\",\r\n        \"reversed\": true\r\n    },\r\n    \"searchCriteriaMap\": {\r\n        \"REPORT_TYPE\": \"NOTIFICATION\"\r\n    },\r\n    \"searchCriteriaMapMultipleValues\": {\r\n        \"PURPOSE\": [\"1\", \"3\", \"5\", \"9\"]\r\n    }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Report Type Declaration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have report Type Declaration\"] = jsonData.resultList[0].FAReportType === \"DECLARATION\";",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;  ",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pagination\": {\r\n        \"offset\": 0,\r\n        \"pageSize\": 25\r\n    },\r\n    \"sorting\": {\r\n        \"sortBy\": \"ACTIVITY_TYPE\",\r\n        \"reversed\": true\r\n    },\r\n    \"searchCriteriaMap\": {\r\n        \"REPORT_TYPE\": \"DECLARATION\"\r\n    },\r\n    \"searchCriteriaMapMultipleValues\": {\r\n        \"PURPOSE\": [\"1\", \"3\", \"5\", \"9\"]\r\n    }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Activity Type Departure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type Departure\"] = jsonData.resultList[0].activityType===\"DEPARTURE\";",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;  ",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":0,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"ACTIVITY_TYPE\":\"DEPARTURE\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Activity Type Arrival",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type ARRIVAL\"] = jsonData.resultList[0].activityType===\"ARRIVAL\";",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;  ",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":0,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"ACTIVITY_TYPE\":\"ARRIVAL\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Activity Type Area Entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type AREA_ENTRY\"] = jsonData.resultList[0].activityType===\"AREA_ENTRY\";",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;  ",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":0,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"ACTIVITY_TYPE\":\"AREA_ENTRY\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Activity Type Area Exit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type AREA_EXIT\"] = jsonData.resultList[0].activityType===\"AREA_EXIT\";",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;  ",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":0,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"ACTIVITY_TYPE\":\"AREA_EXIT\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Activity Type Fishing Operation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type FISHING_OPERATION\"] = jsonData.resultList[0].activityType===\"FISHING_OPERATION\";",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;  ",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":0,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"ACTIVITY_TYPE\":\"FISHING_OPERATION\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Activity Type Landing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type LANDING\"] = jsonData.resultList[0].activityType===\"LANDING\";",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;  ",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"pagination\": {\n\t\t\"offset\": 0,\n\t\t\"pageSize\": 25\n\t},\n\t\"sorting\": {},\n\t\"searchCriteriaMap\": {\n\t\t\"ACTIVITY_TYPE\": \"LANDING\"\n\t},\n\t\"searchCriteriaMapMultipleValues\": {\n\t\t\"PURPOSE\": [\n\t\t\t\"9\",\n\t\t\t\"1\",\n\t\t\t\"5\",\n\t\t\t\"3\"\n\t\t]\n\t}\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Activity Type Discard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type DISCARD\"] = jsonData.resultList[0].activityType===\"DISCARD\";",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":0,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"ACTIVITY_TYPE\":\"DISCARD\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Activity Type Transhipment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type TRANSHIPMENT\"] = jsonData.resultList[0].activityType===\"TRANSHIPMENT\";",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"pagination\": {\n\t\t\"offset\": 0,\n\t\t\"pageSize\": 25\n\t},\n\t\"sorting\": {},\n\t\"searchCriteriaMap\": {\n\t\t\"ACTIVITY_TYPE\": \"TRANSHIPMENT\"\n\t},\n\t\"searchCriteriaMapMultipleValues\": {\n\t\t\"PURPOSE\": [\n\t\t\t\"9\",\n\t\t\t\"1\",\n\t\t\t\"5\",\n\t\t\t\"3\"\n\t\t]\n\t}\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Activity Type Relocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type RELOCATION\"] = jsonData.resultList[0].activityType===\"RELOCATION\";",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain vesselTransportMeansName property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselTransportMeansName\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":1,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"ACTIVITY_TYPE\":\"RELOCATION\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Activity Type Joined Fishing Operation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type JOINED_FISHING_OPERATION\"] = jsonData.resultList[0].activityType===\"JOINED_FISHING_OPERATION\";",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain vesselTransportMeansName property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselTransportMeansName\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":1,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"ACTIVITY_TYPE\":\"JOINED_FISHING_OPERATION\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA From ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"         tests[\"Search From ID results are correct\"] = jsonData.resultList[0].fromId[0]===\"MLT\";",
									"         tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":1,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"FROM\":\"MLT\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA by Vessel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Port returns results\"] = jsonData.resultList[0].vesselTransportMeansName===\"MADONNA DI POMPEI\";",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":1,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"VESSEL\":\"MADONNA DI POMPEI\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA by Species",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Search results have the right Species\"] = (jsonData.resultList[0].speciesCode.indexOf(\"YFT\")>=0);",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } ",
									""
								],
								"id": "97091d34-9eb4-4a49-908e-44c785a15aa3",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":1,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"SPECIES\":\"YFT\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA by Port",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Results have the right Port\"] = jsonData.resultList[0].port[0]===\"SCPOV\";",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"pagination\": {\n\t\t\"offset\": 0,\n\t\t\"pageSize\": 25\n\t},\n\t\"sorting\": {},\n\t\"searchCriteriaMap\": {\n\t\t\"ACTIVITY_TYPE\": \"TRANSHIPMENT\",\n\t\t\"PORT\": \"SCPOV\"\n\t},\n\t\"searchCriteriaMapMultipleValues\": {\n\t\t\"PURPOSE\": [\n\t\t\t\"9\",\n\t\t\t\"1\",\n\t\t\t\"5\",\n\t\t\t\"3\"\n\t\t]\n\t}\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Gear Type PS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Gear is PS\"] = jsonData.resultList[0].fishingGear[0]===\"PS\";",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":0,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"GEAR\":\"PS\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Gear Type Towed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Gear is Towed\"] = jsonData.resultList[0].fishingGear[0]===\"T\";",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":0,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"GEAR\":\"T\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Gear Type Static",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Gear is Static\"] = jsonData.resultList[0].fishingGear[0]===\"S\";",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":0,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"GEAR\":\"S\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Gear Type Mobile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Gear is Mobile\"] = jsonData.resultList[0].fishingGear[0]===\"M\";",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":0,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"GEAR\":\"M\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA by Date Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"         var start = new Date(\"2017-01-01T12:45:56\");",
									"         var end = new Date(\"2017-01-31T12:50:56\");",
									"         var actSt = new Date(jsonData.resultList[0].startDate);",
									"        tests[\"Start Date is correct\"] = (start<=actSt<=end);",
									"        ",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"id": "0149f28d-825b-4dae-936a-ba4ce0576a88",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":0,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"PERIOD_START\":\"2017-01-01T12:45:56\",\r\n      \"PERIOD_END\":\"2017-01-31T12:50:56\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Data Source Flux",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"    tests[\"Data Source is FLUX\"] = jsonData.resultList[0].dataSource===\"FLUX\";",
									"    tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":0,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"SOURCE\":\"FLUX\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Purpose Code Original Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"    tests[\"Fishing Activity Reports have Purpose Code = Original report\"] = jsonData.resultList[0].purposeCode === \"9\";",
									"    tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pagination\": {\r\n        \"offset\": 0,\r\n        \"pageSize\": 25\r\n    },\r\n    \"sorting\": {\r\n        \"sortBy\": \"ACTIVITY_TYPE\",\r\n        \"reversed\": true\r\n    },\r\n    \"searchCriteriaMap\": {},\r\n    \"searchCriteriaMapMultipleValues\": {\r\n        \"PURPOSE\": [\"9\"]\r\n    }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Purpose Code Cancellation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"    tests[\"Fishing Activity Reports have Purpose Code = Cancellation\"] = jsonData.resultList[0].purposeCode === \"1\";",
									"    tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pagination\": {\r\n        \"offset\": 0,\r\n        \"pageSize\": 25\r\n    },\r\n    \"sorting\": {\r\n        \"sortBy\": \"ACTIVITY_TYPE\",\r\n        \"reversed\": true\r\n    },\r\n    \"searchCriteriaMap\": {},\r\n    \"searchCriteriaMapMultipleValues\": {\r\n        \"PURPOSE\": [\"1\"]\r\n    }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Purpose Code Replace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"    tests[\"Fishing Activity Reports have Purpose Code = Replace\"] = jsonData.resultList[0].purposeCode === \"5\";",
									"    tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pagination\": {\r\n        \"offset\": 0,\r\n        \"pageSize\": 25\r\n    },\r\n    \"sorting\": {\r\n        \"sortBy\": \"ACTIVITY_TYPE\",\r\n        \"reversed\": true\r\n    },\r\n    \"searchCriteriaMap\": {},\r\n    \"searchCriteriaMapMultipleValues\": {\r\n        \"PURPOSE\": [\"5\"]\r\n    }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA Purpose Code Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"    tests[\"Fishing Activity Reports have Purpose Code = Delete\"] = jsonData.resultList[0].purposeCode === \"3\";",
									"    tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pagination\": {\r\n        \"offset\": 0,\r\n        \"pageSize\": 25\r\n    },\r\n    \"sorting\": {\r\n        \"sortBy\": \"ACTIVITY_TYPE\",\r\n        \"reversed\": true\r\n    },\r\n    \"searchCriteriaMap\": {},\r\n    \"searchCriteriaMapMultipleValues\": {\r\n        \"PURPOSE\": [\"3\"]\r\n    }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA reports by weight Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        var quantityArray = jsonData.resultList[0].quantity",
									"        var total=0;",
									"        for(var i in quantityArray) { total += quantityArray[i]; }",
									"",
									"        var valueIsInWeightRange = (total > 10)&&(total<1000);",
									"        tests[\"Total weight is in selected range\"] = valueIsInWeightRange;",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"pagination\": {\n\t\t\"offset\": 0,\n\t\t\"pageSize\": 25\n\t},\n\t\"sorting\": {},\n\t\"searchCriteriaMap\": {\n\t\t\"ACTIVITY_TYPE\": \"TRANSHIPMENT\",\n\t\t\"PORT\": \"SCPOV\",\n\t\t\"QUANTITY_MIN\": 10,\n\t\t\"QUANTITY_MAX\": 1000\n\t},\n\t\"searchCriteriaMapMultipleValues\": {\n\t\t\"PURPOSE\": [\n\t\t\t\"9\",\n\t\t\t\"1\",\n\t\t\t\"5\",\n\t\t\t\"3\"\n\t\t]\n\t}\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA reports by Owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"         tests[\"Search By Owner results are correct\"] = jsonData.resultList[0].OWNER.has(\"a\");",
									"         tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pagination\": {\r\n        \"offset\": 0,\r\n        \"pageSize\": 25\r\n    },\r\n    \"sorting\": {\r\n        \"sortBy\": \"ACTIVITY_TYPE\",\r\n        \"reversed\": true\r\n    },\r\n    \"searchCriteriaMap\": {\r\n        \"OWNER\": \"a\"\r\n    },\r\n    \"searchCriteriaMapMultipleValues\": {\r\n        \"PURPOSE\": [\"1\", \"3\", \"5\", \"9\"]\r\n    }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA reports by Master",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        ",
									"        postman.setGlobalVariable(\"firstResultID\", jsonData.resultList[0].fishingActivityId);",
									"        ",
									"         tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"         tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"         tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"         tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"         tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"         tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"         tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"         tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"         tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"         tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"         tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"         tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"         tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"         tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"         tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"         tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pagination\": {\r\n        \"offset\": 0,\r\n        \"pageSize\": 25\r\n    },\r\n    \"sorting\": {\r\n        \"sortBy\": \"ACTIVITY_TYPE\",\r\n        \"reversed\": true\r\n    },\r\n    \"searchCriteriaMap\": {\r\n        \"MASTER\": \"Master D\"\r\n    },\r\n    \"searchCriteriaMapMultipleValues\": {\r\n        \"PURPOSE\": [\"1\", \"3\", \"5\", \"9\"]\r\n    }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Search FA reports by Reported Area",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Reports are from correct area\"] = jsonData.resultList[0].areas.includes(\"51.6\");",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pagination\": {\r\n        \"offset\": 0,\r\n        \"pageSize\": 25\r\n    },\r\n    \"sorting\": {\r\n        \"sortBy\": \"ACTIVITY_TYPE\",\r\n        \"reversed\": true\r\n    },\r\n    \"searchCriteriaMap\": {\r\n        \"AREAS\": \"51.6\"\r\n    },\r\n    \"searchCriteriaMapMultipleValues\": {\r\n        \"PURPOSE\": [\"1\", \"3\", \"5\", \"9\"]\r\n    }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				}
			]
		},
		{
			"name": "03 Fishing Activity Screens",
			"item": [
				{
					"name": "authenticate rep_power",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_power\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "Search FA Area Exit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type AREA_EXIT\"] = jsonData.resultList[0].activityType===\"AREA_EXIT\";",
									"        postman.setEnvironmentVariable(\"areaExitId\", jsonData.resultList[0].fishingActivityId);",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":0,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"ACTIVITY_TYPE\":\"AREA_EXIT\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Verify Area Exit Screen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Activity screen contains activityDetails\"] = responseBody.has(\"activityDetails\");",
									"/*    tests[\"Activity details contain geometry details\"] = jsonData.data.activityDetails.hasOwnProperty(\"geom\");*/",
									"    tests[\"Activity details contain occurrence details\"] = jsonData.data.activityDetails.hasOwnProperty(\"occurrence\");",
									"/*    tests[\"Activity details contain species Target details\"] = jsonData.data.activityDetails.hasOwnProperty(\"speciesTarget\");*/",
									"    tests[\"Activity details contain characteristics details\"] = jsonData.data.activityDetails.hasOwnProperty(\"characteristics\");",
									"    tests[\"Fishing Activity has activity type AREA_EXIT\"] = jsonData.data.activityDetails.type ===\"AREA_EXIT\"; ",
									"    ",
									"    tests[\"Activity screen contains report Details\"] = responseBody.has(\"reportDetails\");",
									"    tests[\"Report details contain report type\"] = jsonData.data.reportDetails.hasOwnProperty(\"type\");",
									"    tests[\"Report details contain report creation Date\"] = jsonData.data.reportDetails.hasOwnProperty(\"creationDate\");",
									"    tests[\"Report details contain report purpose Code\"] = jsonData.data.reportDetails.hasOwnProperty(\"purposeCode\");",
									"/*    tests[\"Report details contain report id\"] = jsonData.data.reportDetails.hasOwnProperty(\"id\");*/",
									"    tests[\"Report details contain report accepted Date\"] = jsonData.data.reportDetails.hasOwnProperty(\"acceptedDate\");",
									"    tests[\"Report details contain related Reports\"] = jsonData.data.reportDetails.hasOwnProperty(\"relatedReports\");",
									"",
									"    tests[\"Activity screen contains catches Details\"] = responseBody.has(\"catches\");",
									"",
									"    tests[\"Activity screen contains area Details\"] = responseBody.has(\"areas\");",
									"    tests[\"Area details contain transmission area details\"] = jsonData.data.areas.hasOwnProperty(\"transmission\");",
									"    tests[\"Transmission area details contain occurence details\"] = jsonData.data.areas.transmission.hasOwnProperty(\"occurence\");",
									"    tests[\"Area details contain crossing area details\"] = jsonData.data.areas.hasOwnProperty(\"crossing\");",
									"    tests[\"Crossing area details contain occurence details\"] = jsonData.data.areas.crossing.hasOwnProperty(\"occurence\");",
									"",
									"    tests[\"Activity screen contains trip Details\"] = responseBody.has(\"tripDetails\");",
									"    ",
									"    // tests[\"Trip details contain vessel Details\"] = jsonData.data.tripDetails.hasOwnProperty(\"vesselDetails\");",
									"    // tests[\"Vessel details contain vessel name\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"name\");",
									"    // tests[\"Vessel details contain vessel country\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"country\");",
									"    // tests[\"Vessel details contain vessel id\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"vesselIds\");",
									"    tests[\"Trip details contain trips list\"] = jsonData.data.tripDetails.hasOwnProperty(\"trips\");",
									"    tests[\"A trip contains trip departure Time\"] = jsonData.data.tripDetails.trips[0].hasOwnProperty(\"departureTime\");",
									"    tests[\"A trip contains trip Id\"] = jsonData.data.tripDetails.trips[0].hasOwnProperty(\"tripId\");",
									"",
									"    tests[\"A trip id contains the actual Id\"] = jsonData.data.tripDetails.trips[0].tripId[0].hasOwnProperty(\"id\");",
									"    tests[\"A trip id contains the scheme Id\"] = jsonData.data.tripDetails.trips[0].tripId[0].hasOwnProperty(\"schemeId\");",
									"/*    tests[\"Trip details contain authorizations\"] = jsonData.data.tripDetails.hasOwnProperty(\"authorizations\");*/",
									"",
									"",
									"",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"id": "64a38c82-14e1-4220-abab-60534d025265",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"activityId\":{{areaExitId}}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/views/areaExit"
					},
					"response": []
				},
				{
					"name": "Search FA Area Entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type AREA_ENTRY\"] = jsonData.resultList[0].activityType===\"AREA_ENTRY\";",
									"        postman.setEnvironmentVariable(\"areaEntryId\", jsonData.resultList[0].fishingActivityId);",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":0,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"ACTIVITY_TYPE\":\"AREA_ENTRY\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Verify Area Entry Screen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Activity screen contains activityDetails\"] = responseBody.has(\"activityDetails\");",
									"/*    tests[\"Activity details contain geometry details\"] = jsonData.data.activityDetails.hasOwnProperty(\"geom\");*/",
									"    tests[\"Activity details contain occurrence details\"] = jsonData.data.activityDetails.hasOwnProperty(\"occurrence\");",
									"/*    tests[\"Activity details contain species Target details\"] = jsonData.data.activityDetails.hasOwnProperty(\"speciesTarget\");",
									"*/    tests[\"Activity details contain characteristics details\"] = jsonData.data.activityDetails.hasOwnProperty(\"characteristics\");",
									"    tests[\"Activity details contain reason details\"] = jsonData.data.activityDetails.hasOwnProperty(\"reason\");",
									"    tests[\"Fishing Activity has activity type AREA_ENTRY\"] = jsonData.data.activityDetails.type ===\"AREA_ENTRY\"; ",
									"    ",
									"    tests[\"Activity screen contains report Details\"] = responseBody.has(\"reportDetails\");",
									"    tests[\"Report details contain report type\"] = jsonData.data.reportDetails.hasOwnProperty(\"type\");",
									"    tests[\"Report details contain report creation Date\"] = jsonData.data.reportDetails.hasOwnProperty(\"creationDate\");",
									"    tests[\"Report details contain report purpose Code\"] = jsonData.data.reportDetails.hasOwnProperty(\"purposeCode\");",
									"/*    tests[\"Report details contain report id\"] = jsonData.data.reportDetails.hasOwnProperty(\"id\");*/",
									"    tests[\"Report details contain report accepted Date\"] = jsonData.data.reportDetails.hasOwnProperty(\"acceptedDate\");",
									"    tests[\"Report details contain related Reports\"] = jsonData.data.reportDetails.hasOwnProperty(\"relatedReports\");",
									"",
									"    tests[\"Activity screen contains catches Details\"] = responseBody.has(\"catches\");",
									"",
									"    tests[\"Activity screen contains area Details\"] = responseBody.has(\"areas\");",
									"    tests[\"Area details contain transmission area details\"] = jsonData.data.areas.hasOwnProperty(\"transmission\");",
									"    tests[\"Transmission area details contain occurence details\"] = jsonData.data.areas.transmission.hasOwnProperty(\"occurence\");",
									"    tests[\"Area details contain crossing area details\"] = jsonData.data.areas.hasOwnProperty(\"crossing\");",
									"    tests[\"Crossing area details contain occurence details\"] = jsonData.data.areas.crossing.hasOwnProperty(\"occurence\");",
									"",
									"    tests[\"Activity screen contains trip Details\"] = responseBody.has(\"tripDetails\");",
									"    // tests[\"Trip details contain vessel Details\"] = jsonData.data.tripDetails.hasOwnProperty(\"vesselDetails\");",
									"    // tests[\"Vessel details contain vessel name\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"name\");",
									"    // tests[\"Vessel details contain vessel country\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"country\");",
									"    // tests[\"Vessel details contain vessel id\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"vesselIds\");",
									"    tests[\"Trip details contain trips list\"] = jsonData.data.tripDetails.hasOwnProperty(\"trips\");",
									"    tests[\"A trip contains trip departure Time\"] = jsonData.data.tripDetails.trips[0].hasOwnProperty(\"departureTime\");",
									"    tests[\"A trip contains trip Id\"] = jsonData.data.tripDetails.trips[0].hasOwnProperty(\"tripId\");",
									"",
									"    tests[\"A trip id contains the actual Id\"] = jsonData.data.tripDetails.trips[0].tripId[0].hasOwnProperty(\"id\");",
									"    tests[\"A trip id contains the scheme Id\"] = jsonData.data.tripDetails.trips[0].tripId[0].hasOwnProperty(\"schemeId\");",
									"/*    tests[\"Trip details contain authorizations\"] = jsonData.data.tripDetails.hasOwnProperty(\"authorizations\");*/",
									"",
									"",
									"",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"id": "1b34d415-36a1-4a40-a43a-1c0878c4e351",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"activityId\":{{areaEntryId}}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/views/areaEntry"
					},
					"response": []
				},
				{
					"name": "Search FA Discard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type DISCARD\"] = jsonData.resultList[0].activityType===\"DISCARD\";",
									"        postman.setEnvironmentVariable(\"discardId\", jsonData.resultList[0].fishingActivityId);",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"pagination\": {\n\t\t\"offset\": 0,\n\t\t\"pageSize\": 25\n\t},\n\t\"sorting\": {\n\t\t\"sortBy\": \"ACTIVITY_TYPE\",\n\t\t\"reversed\": true\n\t},\n\t\"searchCriteriaMap\": {\n\t\t\"ACTIVITY_TYPE\": \"DISCARD\"\n\t},\n\t\"searchCriteriaMapMultipleValues\": {\n\t\t\"PURPOSE\": [\n\t\t\t\"9\",\n\t\t\t\"1\",\n\t\t\t\"5\",\n\t\t\t\"3\"\n\t\t]\n\t}\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Verify Discard Screen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Activity screen contains activityDetails\"] = responseBody.has(\"activityDetails\");",
									"    tests[\"Activity details contain geometry details\"] = jsonData.data.activityDetails.hasOwnProperty(\"geom\");",
									"    tests[\"Activity details contain occurrence details\"] = jsonData.data.activityDetails.hasOwnProperty(\"occurrence\");",
									"    tests[\"Activity details contain characteristics details\"] = jsonData.data.activityDetails.hasOwnProperty(\"characteristics\");",
									"/*    tests[\"Activity details contain reason details\"] = jsonData.data.activityDetails.hasOwnProperty(\"reason\");*/",
									"    tests[\"Fishing Activity has activity type DISCARD\"] = jsonData.data.activityDetails.type ===\"DISCARD\"; ",
									"    ",
									"    tests[\"Activity screen contains report Details\"] = responseBody.has(\"reportDetails\");",
									"    tests[\"Report details contain report type\"] = jsonData.data.reportDetails.hasOwnProperty(\"type\");",
									"    tests[\"Report details contain report creation Date\"] = jsonData.data.reportDetails.hasOwnProperty(\"creationDate\");",
									"    tests[\"Report details contain report purpose Code\"] = jsonData.data.reportDetails.hasOwnProperty(\"purposeCode\");",
									"/*    tests[\"Report details contain report id\"] = jsonData.data.reportDetails.hasOwnProperty(\"id\");*/",
									"    tests[\"Report details contain report accepted Date\"] = jsonData.data.reportDetails.hasOwnProperty(\"acceptedDate\");",
									"    tests[\"Report details contain related Reports\"] = jsonData.data.reportDetails.hasOwnProperty(\"relatedReports\");",
									"",
									"    tests[\"Activity screen contains catches Details\"] = responseBody.has(\"catches\");",
									"    tests[\"Activity screen contains processing Products Details\"] = responseBody.has(\"processingProducts\");",
									"",
									"",
									"    tests[\"Activity screen contains location Details\"] = responseBody.has(\"locations\");",
									"    tests[\"Locations contain structured Addresses\"] = jsonData.data.locations[0].hasOwnProperty(\"structuredAddresses\");",
									"/*    tests[\"Locations contain identifier\"] = jsonData.data.locations[0].hasOwnProperty(\"identifier\");*/",
									"/*    tests[\"Locations identifiers contain id\"] = jsonData.data.locations[0].identifier.hasOwnProperty(\"id\");",
									"    tests[\"Locations identifiers contain schemeId\"] = jsonData.data.locations[0].identifier.hasOwnProperty(\"schemeId\");*/",
									"",
									"",
									"    tests[\"Activity screen contains trip Details\"] = responseBody.has(\"tripDetails\");",
									"    // tests[\"Trip details contain vessel Details\"] = jsonData.data.tripDetails.hasOwnProperty(\"vesselDetails\");",
									"    // tests[\"Vessel details contain vessel name\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"name\");",
									"    // tests[\"Vessel details contain vessel country\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"country\");",
									"    // tests[\"Vessel details contain vessel id\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"vesselIds\");",
									"    tests[\"Trip details contain trips list\"] = jsonData.data.tripDetails.hasOwnProperty(\"trips\");",
									"    tests[\"A trip contains trip departure Time\"] = jsonData.data.tripDetails.trips[0].hasOwnProperty(\"departureTime\");",
									"    tests[\"A trip contains trip Id\"] = jsonData.data.tripDetails.trips[0].hasOwnProperty(\"tripId\");",
									"",
									"    tests[\"A trip id contains the actual Id\"] = jsonData.data.tripDetails.trips[0].tripId[0].hasOwnProperty(\"id\");",
									"    tests[\"A trip id contains the scheme Id\"] = jsonData.data.tripDetails.trips[0].tripId[0].hasOwnProperty(\"schemeId\");",
									"/*    tests[\"Trip details contain authorizations\"] = jsonData.data.tripDetails.hasOwnProperty(\"authorizations\");*/",
									"",
									"",
									"",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"id": "d61fc458-c6c9-4b82-ac60-7f0d6039d11f",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"activityId\":{{discardId}}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/views/discard"
					},
					"response": []
				},
				{
					"name": "Search FA Transhipment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type TRANSHIPMENT\"] = jsonData.resultList[0].activityType===\"TRANSHIPMENT\";",
									"        postman.setEnvironmentVariable(\"transhipmentId\", jsonData.resultList[0].fishingActivityId);",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"pagination\": {\n\t\t\"offset\": 0,\n\t\t\"pageSize\": 25\n\t},\n\t\"sorting\": {},\n\t\"searchCriteriaMap\": {\n\t\t\"ACTIVITY_TYPE\": \"TRANSHIPMENT\"\n\t},\n\t\"searchCriteriaMapMultipleValues\": {\n\t\t\"PURPOSE\": [\n\t\t\t\"9\",\n\t\t\t\"1\",\n\t\t\t\"5\",\n\t\t\t\"3\"\n\t\t]\n\t}\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Verify Transhipment Screen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Activity screen contains activityDetails\"] = responseBody.has(\"activityDetails\");",
									"/*    tests[\"Activity details contain geometry details\"] = jsonData.data.activityDetails.hasOwnProperty(\"geom\");",
									"    tests[\"Activity details contain occurrence details\"] = jsonData.data.activityDetails.hasOwnProperty(\"occurrence\");*/",
									"    tests[\"Activity details contain characteristics details\"] = jsonData.data.activityDetails.hasOwnProperty(\"characteristics\");",
									"/*    tests[\"Activity details contain reason details\"] = jsonData.data.activityDetails.hasOwnProperty(\"reason\");*/",
									"    tests[\"Fishing Activity has activity type TRANSHIPMENT\"] = jsonData.data.activityDetails.type ===\"TRANSHIPMENT\"; ",
									"    ",
									"    tests[\"Activity screen contains report Details\"] = responseBody.has(\"reportDetails\");",
									"    tests[\"Report details contain report type\"] = jsonData.data.reportDetails.hasOwnProperty(\"type\");",
									"    tests[\"Report details contain report creation Date\"] = jsonData.data.reportDetails.hasOwnProperty(\"creationDate\");",
									"    tests[\"Report details contain report purpose Code\"] = jsonData.data.reportDetails.hasOwnProperty(\"purposeCode\");",
									"/*    tests[\"Report details contain report id\"] = jsonData.data.reportDetails.hasOwnProperty(\"id\");*/",
									"    tests[\"Report details contain report accepted Date\"] = jsonData.data.reportDetails.hasOwnProperty(\"acceptedDate\");",
									"    tests[\"Report details contain related Reports\"] = jsonData.data.reportDetails.hasOwnProperty(\"relatedReports\");",
									"",
									"    tests[\"Activity screen contains catches Details\"] = responseBody.has(\"catches\");",
									"    tests[\"Activity screen contains processing Products Details\"] = responseBody.has(\"processingProducts\");",
									"",
									"",
									"    tests[\"Activity screen contains location Details\"] = responseBody.has(\"locations\");",
									"    tests[\"Locations contain structured Addresses\"] = jsonData.data.locations[0].hasOwnProperty(\"structuredAddresses\");",
									"    tests[\"Locations contain identifier\"] = jsonData.data.locations[0].hasOwnProperty(\"identifier\");",
									"    tests[\"Locations identifiers contain id\"] = jsonData.data.locations[0].identifier.hasOwnProperty(\"id\");",
									"    tests[\"Locations identifiers contain schemeId\"] = jsonData.data.locations[0].identifier.hasOwnProperty(\"schemeId\");",
									"",
									"",
									"    tests[\"Activity screen contains trip Details\"] = responseBody.has(\"tripDetails\");",
									"    // tests[\"Trip details contain vessel Details\"] = jsonData.data.tripDetails.hasOwnProperty(\"vesselDetails\");",
									"    // tests[\"Vessel details contain vessel name\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"name\");",
									"    // tests[\"Vessel details contain vessel country\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"country\");",
									"    // tests[\"Vessel details contain vessel id\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"vesselIds\");",
									"    tests[\"Trip details contain trips list\"] = jsonData.data.tripDetails.hasOwnProperty(\"trips\");",
									"    tests[\"A trip contains trip Id\"] = jsonData.data.tripDetails.trips[0].hasOwnProperty(\"tripId\");",
									"",
									"    tests[\"A trip id contains the actual Id\"] = jsonData.data.tripDetails.trips[0].tripId[0].hasOwnProperty(\"id\");",
									"    tests[\"A trip id contains the scheme Id\"] = jsonData.data.tripDetails.trips[0].tripId[0].hasOwnProperty(\"schemeId\");",
									"/*    tests[\"Trip details contain authorizations\"] = jsonData.data.tripDetails.hasOwnProperty(\"authorizations\");*/",
									"",
									"",
									"",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"id": "9c6cbeb2-8a42-4348-a2bb-d6ab1b5bb110",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"activityId\":{{transhipmentId}}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/views/discard"
					},
					"response": []
				},
				{
					"name": "Search FA Departure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type TRANSHIPMENT\"] = jsonData.resultList[0].activityType===\"DEPARTURE\";",
									"        postman.setEnvironmentVariable(\"departureId\", jsonData.resultList[0].fishingActivityId);",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":0,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"ACTIVITY_TYPE\":\"DEPARTURE\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Verify Departure Screen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Activity screen contains activityDetails\"] = responseBody.has(\"activityDetails\");",
									"/*    tests[\"Activity details contain geometry details\"] = jsonData.data.activityDetails.hasOwnProperty(\"geom\");",
									"    tests[\"Activity details contain occurrence details\"] = jsonData.data.activityDetails.hasOwnProperty(\"occurrence\");*/",
									"    tests[\"Activity details contain characteristics details\"] = jsonData.data.activityDetails.hasOwnProperty(\"characteristics\");",
									"/*    tests[\"Activity details contain reason details\"] = jsonData.data.activityDetails.hasOwnProperty(\"reason\");*/",
									"    tests[\"Fishing Activity has activity type DEPARTURE\"] = jsonData.data.activityDetails.type ===\"DEPARTURE\"; ",
									"    ",
									"    tests[\"Activity screen contains report Details\"] = responseBody.has(\"reportDetails\");",
									"    tests[\"Report details contain report type\"] = jsonData.data.reportDetails.hasOwnProperty(\"type\");",
									"    tests[\"Report details contain report creation Date\"] = jsonData.data.reportDetails.hasOwnProperty(\"creationDate\");",
									"    tests[\"Report details contain report purpose Code\"] = jsonData.data.reportDetails.hasOwnProperty(\"purposeCode\");",
									"/*    tests[\"Report details contain report id\"] = jsonData.data.reportDetails.hasOwnProperty(\"id\");*/",
									"    tests[\"Report details contain report accepted Date\"] = jsonData.data.reportDetails.hasOwnProperty(\"acceptedDate\");",
									"    tests[\"Report details contain related Reports\"] = jsonData.data.reportDetails.hasOwnProperty(\"relatedReports\");",
									"",
									"    tests[\"Activity screen contains catches Details\"] = responseBody.has(\"catches\");",
									"    tests[\"Activity screen contains processing Products Details\"] = responseBody.has(\"processingProducts\");",
									"",
									"",
									"    tests[\"Activity screen contains location Details\"] = responseBody.has(\"locations\");",
									"    tests[\"Locations contain structured Addresses\"] = jsonData.data.locations[0].hasOwnProperty(\"structuredAddresses\");",
									"    tests[\"Locations contain identifier\"] = jsonData.data.locations[0].hasOwnProperty(\"identifier\");",
									"    tests[\"Locations identifiers contain id\"] = jsonData.data.locations[0].identifier.hasOwnProperty(\"id\");",
									"    tests[\"Locations identifiers contain schemeId\"] = jsonData.data.locations[0].identifier.hasOwnProperty(\"schemeId\");",
									"",
									"",
									"    tests[\"Activity screen contains trip Details\"] = responseBody.has(\"tripDetails\");",
									"    // tests[\"Trip details contain vessel Details\"] = jsonData.data.tripDetails.hasOwnProperty(\"vesselDetails\");",
									"    // tests[\"Vessel details contain vessel name\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"name\");",
									"    // tests[\"Vessel details contain vessel country\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"country\");",
									"    // tests[\"Vessel details contain vessel id\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"vesselIds\");",
									"    tests[\"Trip details contain trips list\"] = jsonData.data.tripDetails.hasOwnProperty(\"trips\");",
									"    tests[\"A trip contains trip Id\"] = jsonData.data.tripDetails.trips[0].hasOwnProperty(\"tripId\");",
									"",
									"    tests[\"A trip id contains the actual Id\"] = jsonData.data.tripDetails.trips[0].tripId[0].hasOwnProperty(\"id\");",
									"    tests[\"A trip id contains the scheme Id\"] = jsonData.data.tripDetails.trips[0].tripId[0].hasOwnProperty(\"schemeId\");",
									"/*    tests[\"Trip details contain authorizations\"] = jsonData.data.tripDetails.hasOwnProperty(\"authorizations\");*/",
									"",
									"",
									"",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"id": "2f041ac6-7553-4781-9e56-35855469e383",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"activityId\":{{departureId}}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/views/departure"
					},
					"response": []
				},
				{
					"name": "Search FA Arrival",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type ARRIVAL\"] = jsonData.resultList[0].activityType===\"ARRIVAL\";",
									"        postman.setEnvironmentVariable(\"arrivalId\", jsonData.resultList[0].fishingActivityId);",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n      \"offset\":0,\r\n      \"pageSize\":25\r\n   },\r\n   \"sorting\":{  \r\n      \"sortBy\":\"ACTIVITY_TYPE\",\r\n      \"reversed\":true\r\n   },\r\n   \"searchCriteriaMap\":{  \r\n      \"ACTIVITY_TYPE\":\"ARRIVAL\"\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"1\",\r\n         \"3\",\r\n         \"5\",\r\n         \"9\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Verify Departure Screen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Activity screen contains activityDetails\"] = responseBody.has(\"activityDetails\");",
									"/*    tests[\"Activity details contain geometry details\"] = jsonData.data.activityDetails.hasOwnProperty(\"geom\");",
									"    tests[\"Activity details contain occurrence details\"] = jsonData.data.activityDetails.hasOwnProperty(\"occurrence\");*/",
									"    tests[\"Activity details contain characteristics details\"] = jsonData.data.activityDetails.hasOwnProperty(\"characteristics\");",
									"/*    tests[\"Activity details contain reason details\"] = jsonData.data.activityDetails.hasOwnProperty(\"reason\");*/",
									"    tests[\"Fishing Activity has activity type ARRIVAL\"] = jsonData.data.activityDetails.type ===\"ARRIVAL\"; ",
									"    ",
									"    tests[\"Activity screen contains report Details\"] = responseBody.has(\"reportDetails\");",
									"    tests[\"Report details contain report type\"] = jsonData.data.reportDetails.hasOwnProperty(\"type\");",
									"    tests[\"Report details contain report creation Date\"] = jsonData.data.reportDetails.hasOwnProperty(\"creationDate\");",
									"    tests[\"Report details contain report purpose Code\"] = jsonData.data.reportDetails.hasOwnProperty(\"purposeCode\");",
									"/*    tests[\"Report details contain report id\"] = jsonData.data.reportDetails.hasOwnProperty(\"id\");*/",
									"    tests[\"Report details contain report accepted Date\"] = jsonData.data.reportDetails.hasOwnProperty(\"acceptedDate\");",
									"    tests[\"Report details contain related Reports\"] = jsonData.data.reportDetails.hasOwnProperty(\"relatedReports\");",
									"",
									"    tests[\"Activity screen contains catches Details\"] = responseBody.has(\"catches\");",
									"    tests[\"Activity screen contains processing Products Details\"] = responseBody.has(\"processingProducts\");",
									"",
									"",
									"    tests[\"Activity screen contains location Details\"] = responseBody.has(\"locations\");",
									"    tests[\"Locations contain structured Addresses\"] = jsonData.data.locations[0].hasOwnProperty(\"structuredAddresses\");",
									"    tests[\"Locations contain identifier\"] = jsonData.data.locations[0].hasOwnProperty(\"identifier\");",
									"    tests[\"Locations identifiers contain id\"] = jsonData.data.locations[0].identifier.hasOwnProperty(\"id\");",
									"    tests[\"Locations identifiers contain schemeId\"] = jsonData.data.locations[0].identifier.hasOwnProperty(\"schemeId\");",
									"",
									"",
									"    tests[\"Activity screen contains trip Details\"] = responseBody.has(\"tripDetails\");",
									"    // tests[\"Trip details contain vessel Details\"] = jsonData.data.tripDetails.hasOwnProperty(\"vesselDetails\");",
									"    // tests[\"Vessel details contain vessel name\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"name\");",
									"    // tests[\"Vessel details contain vessel country\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"country\");",
									"    // tests[\"Vessel details contain vessel id\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"vesselIds\");",
									"    tests[\"Trip details contain trips list\"] = jsonData.data.tripDetails.hasOwnProperty(\"trips\");",
									"    tests[\"A trip contains trip Id\"] = jsonData.data.tripDetails.trips[0].hasOwnProperty(\"tripId\");",
									"",
									"    tests[\"A trip id contains the actual Id\"] = jsonData.data.tripDetails.trips[0].tripId[0].hasOwnProperty(\"id\");",
									"    tests[\"A trip id contains the scheme Id\"] = jsonData.data.tripDetails.trips[0].tripId[0].hasOwnProperty(\"schemeId\");",
									"/*    tests[\"Trip details contain authorizations\"] = jsonData.data.tripDetails.hasOwnProperty(\"authorizations\");*/",
									"",
									"",
									"",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"id": "af40ae36-f8cd-4976-b6c1-480ccb841f53",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"activityId\":{{arrivalId}}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/views/notification"
					},
					"response": []
				},
				{
					"name": "Search FA FOP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type FISHING_OPERATION\"] = jsonData.resultList[0].activityType===\"FISHING_OPERATION\";",
									"        postman.setEnvironmentVariable(\"fishingoperationId\", jsonData.resultList[0].fishingActivityId);",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"pagination\": {\n\t\t\"offset\": 0,\n\t\t\"pageSize\": 25\n\t},\n\t\"sorting\": {},\n\t\"searchCriteriaMap\": {\n\t\t\"ACTIVITY_TYPE\": \"FISHING_OPERATION\"\n\t},\n\t\"searchCriteriaMapMultipleValues\": {\n\t\t\"PURPOSE\": [\n\t\t\t\"9\",\n\t\t\t\"1\",\n\t\t\t\"5\",\n\t\t\t\"3\"\n\t\t]\n\t}\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Verify FOP screen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Activity screen contains activityDetails\"] = responseBody.has(\"activityDetails\");",
									"/*    tests[\"Activity details contain geometry details\"] = jsonData.data.activityDetails.hasOwnProperty(\"geom\");",
									"    tests[\"Activity details contain occurrence details\"] = jsonData.data.activityDetails.hasOwnProperty(\"occurrence\");*/",
									"    tests[\"Activity details contain characteristics details\"] = jsonData.data.activityDetails.hasOwnProperty(\"characteristics\");",
									"/*    tests[\"Activity details contain reason details\"] = jsonData.data.activityDetails.hasOwnProperty(\"reason\");*/",
									"    tests[\"Fishing Activity has activity type FISHING_OPERATION\"] = jsonData.data.activityDetails.type ===\"FISHING_OPERATION\"; ",
									"    ",
									"    tests[\"Activity screen contains report Details\"] = responseBody.has(\"reportDetails\");",
									"    tests[\"Report details contain report type\"] = jsonData.data.reportDetails.hasOwnProperty(\"type\");",
									"    tests[\"Report details contain report creation Date\"] = jsonData.data.reportDetails.hasOwnProperty(\"creationDate\");",
									"    tests[\"Report details contain report purpose Code\"] = jsonData.data.reportDetails.hasOwnProperty(\"purposeCode\");",
									"/*    tests[\"Report details contain report id\"] = jsonData.data.reportDetails.hasOwnProperty(\"id\");*/",
									"    tests[\"Report details contain report accepted Date\"] = jsonData.data.reportDetails.hasOwnProperty(\"acceptedDate\");",
									"    tests[\"Report details contain related Reports\"] = jsonData.data.reportDetails.hasOwnProperty(\"relatedReports\");",
									"",
									"    tests[\"Activity screen contains catches Details\"] = responseBody.has(\"catches\");",
									"    tests[\"Activity screen contains processing Products Details\"] = responseBody.has(\"processingProducts\");",
									"",
									"",
									"    tests[\"Activity screen contains location Details\"] = responseBody.has(\"locations\");",
									"    tests[\"Locations contain structured Addresses\"] = jsonData.data.locations[0].hasOwnProperty(\"structuredAddresses\");",
									"    // tests[\"Locations contain identifier\"] = jsonData.data.locations[0].hasOwnProperty(\"identifier\");",
									"    // tests[\"Locations identifiers contain id\"] = jsonData.data.locations[0].identifier.hasOwnProperty(\"id\");",
									"    // tests[\"Locations identifiers contain schemeId\"] = jsonData.data.locations[0].identifier.hasOwnProperty(\"schemeId\");",
									"",
									"",
									"    tests[\"Activity screen contains trip Details\"] = responseBody.has(\"tripDetails\");",
									"    // tests[\"Trip details contain vessel Details\"] = jsonData.data.tripDetails.hasOwnProperty(\"vesselDetails\");",
									"    // tests[\"Vessel details contain vessel name\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"name\");",
									"    // tests[\"Vessel details contain vessel country\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"country\");",
									"    // tests[\"Vessel details contain vessel id\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"vesselIds\");",
									"    tests[\"Trip details contain trips list\"] = jsonData.data.tripDetails.hasOwnProperty(\"trips\");",
									"    tests[\"A trip contains trip Id\"] = jsonData.data.tripDetails.trips[0].hasOwnProperty(\"tripId\");",
									"",
									"    tests[\"A trip id contains the actual Id\"] = jsonData.data.tripDetails.trips[0].tripId[0].hasOwnProperty(\"id\");",
									"    tests[\"A trip id contains the scheme Id\"] = jsonData.data.tripDetails.trips[0].tripId[0].hasOwnProperty(\"schemeId\");",
									"/*    tests[\"Trip details contain authorizations\"] = jsonData.data.tripDetails.hasOwnProperty(\"authorizations\");*/",
									"",
									"",
									"",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"id": "eb5e10a7-38e9-4eb9-82ab-5b20597c1aaa",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"activityId\":{{fishingoperationId}}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/views/fishingoperation"
					},
					"response": []
				},
				{
					"name": "Search FA Landing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response contains results list\"] = responseBody.has(\"resultList\");",
									"    tests[\"Response contains total items count\"] = responseBody.has(\"totalItemsCount\");",
									"",
									"    if (jsonData.totalItemsCount>0){",
									"        tests[\"Fishing Activity Reports have activity type LANDING\"] = jsonData.resultList[0].activityType===\"LANDING\";",
									"        postman.setEnvironmentVariable(\"landingId\", jsonData.resultList[0].fishingActivityId);",
									"        tests[\"Search results contain uniqueReportIdList property\"] = jsonData.resultList[0].hasOwnProperty(\"uniqueReportIdList\") === true;  ",
									"     tests[\"Search results contain fluxReportId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportId\") === true;  ",
									"     tests[\"Search results contain fluxReportSchemeId property\"] = jsonData.resultList[0].uniqueReportIdList[0].hasOwnProperty(\"fluxReportSchemeId\") === true;",
									"     tests[\"Search results contain fishingActivityId property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingActivityId\") === true;",
									"     tests[\"Search results contain faReportID property\"] = jsonData.resultList[0].hasOwnProperty(\"faReportID\") === true;",
									"     tests[\"Search results contain activityType property\"] = jsonData.resultList[0].hasOwnProperty(\"activityType\") === true;",
									"/*     tests[\"Search results contain occurence property\"] = jsonData.resultList[0].hasOwnProperty(\"occurence\") === true;",
									"*/     tests[\"Search results contain purposeCode property\"] = jsonData.resultList[0].hasOwnProperty(\"purposeCode\") === true;",
									"     tests[\"Search results contain dataSource property\"] = jsonData.resultList[0].hasOwnProperty(\"dataSource\") === true;",
									"     tests[\"Search results contain fromId property\"] = jsonData.resultList[0].hasOwnProperty(\"fromId\") === true;",
									"     tests[\"Search results contain vesselIdTypes property\"] = jsonData.resultList[0].hasOwnProperty(\"vesselIdTypes\") === true;",
									"     tests[\"Search results contain areas property\"] = jsonData.resultList[0].hasOwnProperty(\"areas\") === true;",
									"     tests[\"Search results contain port property\"] = jsonData.resultList[0].hasOwnProperty(\"port\") === true;",
									"     tests[\"Search results contain fishingGear property\"] = jsonData.resultList[0].hasOwnProperty(\"fishingGear\") === true;",
									"     tests[\"Search results contain quantity property\"] = jsonData.resultList[0].hasOwnProperty(\"quantity\") === true;",
									"     tests[\"Search results contain hasCorrection property\"] = jsonData.resultList[0].hasOwnProperty(\"hasCorrection\") === true;",
									"    }",
									"    else{",
									"      tests[\"No results found with criteria\"] = true;   ",
									"    }",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"pagination\": {\n\t\t\"offset\": 0,\n\t\t\"pageSize\": 25\n\t},\n\t\"sorting\": {},\n\t\"searchCriteriaMap\": {\n\t\t\"ACTIVITY_TYPE\": \"LANDING\"\n\t},\n\t\"searchCriteriaMapMultipleValues\": {\n\t\t\"PURPOSE\": [\n\t\t\t\"9\",\n\t\t\t\"1\",\n\t\t\t\"5\",\n\t\t\t\"3\"\n\t\t]\n\t}\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/list"
					},
					"response": []
				},
				{
					"name": "Verify Landing screen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"status code = 200\"] = responseCode.code === 200;",
									"",
									"try{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Activity screen contains activityDetails\"] = responseBody.has(\"activityDetails\");",
									"/*    tests[\"Activity details contain geometry details\"] = jsonData.data.activityDetails.hasOwnProperty(\"geom\");",
									"    tests[\"Activity details contain occurrence details\"] = jsonData.data.activityDetails.hasOwnProperty(\"occurrence\");*/",
									"    tests[\"Activity details contain characteristics details\"] = jsonData.data.activityDetails.hasOwnProperty(\"characteristics\");",
									"/*    tests[\"Activity details contain reason details\"] = jsonData.data.activityDetails.hasOwnProperty(\"reason\");*/",
									"    tests[\"Fishing Activity has activity type LANDING\"] = jsonData.data.activityDetails.type ===\"LANDING\"; ",
									"    ",
									"    tests[\"Activity screen contains report Details\"] = responseBody.has(\"reportDetails\");",
									"    tests[\"Report details contain report type\"] = jsonData.data.reportDetails.hasOwnProperty(\"type\");",
									"    tests[\"Report details contain report creation Date\"] = jsonData.data.reportDetails.hasOwnProperty(\"creationDate\");",
									"    tests[\"Report details contain report purpose Code\"] = jsonData.data.reportDetails.hasOwnProperty(\"purposeCode\");",
									"/*    tests[\"Report details contain report id\"] = jsonData.data.reportDetails.hasOwnProperty(\"id\");*/",
									"    tests[\"Report details contain report accepted Date\"] = jsonData.data.reportDetails.hasOwnProperty(\"acceptedDate\");",
									"    tests[\"Report details contain related Reports\"] = jsonData.data.reportDetails.hasOwnProperty(\"relatedReports\");",
									"",
									"    tests[\"Activity screen contains catches Details\"] = responseBody.has(\"catches\");",
									"    tests[\"Activity screen contains processing Products Details\"] = responseBody.has(\"processingProducts\");",
									"",
									"",
									"    tests[\"Activity screen contains location Details\"] = responseBody.has(\"locations\");",
									"    tests[\"Locations contain structured Addresses\"] = jsonData.data.locations[0].hasOwnProperty(\"structuredAddresses\");",
									"    tests[\"Locations contain identifier\"] = jsonData.data.locations[0].hasOwnProperty(\"identifier\");",
									"    tests[\"Locations identifiers contain id\"] = jsonData.data.locations[0].identifier.hasOwnProperty(\"id\");",
									"    tests[\"Locations identifiers contain schemeId\"] = jsonData.data.locations[0].identifier.hasOwnProperty(\"schemeId\");",
									"",
									"",
									"    tests[\"Activity screen contains trip Details\"] = responseBody.has(\"tripDetails\");",
									"    // tests[\"Trip details contain vessel Details\"] = jsonData.data.tripDetails.hasOwnProperty(\"vesselDetails\");",
									"    // tests[\"Vessel details contain vessel name\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"name\");",
									"    // tests[\"Vessel details contain vessel country\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"country\");",
									"    // tests[\"Vessel details contain vessel id\"] = jsonData.data.tripDetails.vesselDetails.hasOwnProperty(\"vesselIds\");",
									"    tests[\"Trip details contain trips list\"] = jsonData.data.tripDetails.hasOwnProperty(\"trips\");",
									"    tests[\"A trip contains trip Id\"] = jsonData.data.tripDetails.trips[0].hasOwnProperty(\"tripId\");",
									"",
									"    tests[\"A trip id contains the actual Id\"] = jsonData.data.tripDetails.trips[0].tripId[0].hasOwnProperty(\"id\");",
									"    tests[\"A trip id contains the scheme Id\"] = jsonData.data.tripDetails.trips[0].tripId[0].hasOwnProperty(\"schemeId\");",
									"/*    tests[\"Trip details contain authorizations\"] = jsonData.data.tripDetails.hasOwnProperty(\"authorizations\");*/",
									"",
									"",
									"",
									"",
									"} catch(e) {tests[\"Body format error\"] = false; } "
								],
								"id": "7dd87a3f-399f-4559-a7f9-1519893d196d",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "scopeName",
								"value": "EC"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"activityId\":{{landingId}}}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/views/landing"
					},
					"response": []
				}
			]
		},
		{
			"name": "04 Catch Threshold",
			"item": [
				{
					"name": "authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_power\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "Set Threshold",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"fishingActivityConfig\":{  \r\n      \"summaryReport\":{  \r\n         \"values\":[  \r\n            \"FAReportType\",\r\n            \"activityType\",\r\n            \"occurrence\",\r\n            \"purposeCode\",\r\n            \"dataSource\",\r\n            \"fromName\",\r\n            \"startDate\",\r\n            \"endDate\",\r\n            \"cfr\",\r\n            \"ircs\",\r\n            \"extMark\",\r\n            \"uvi\",\r\n            \"iccat\",\r\n            \"gfcm\",\r\n            \"areas\",\r\n            \"port\",\r\n            \"fishingGear\",\r\n            \"speciesCode\",\r\n            \"quantity\"\r\n         ],\r\n         \"order\":[  \r\n            \"FAReportType\",\r\n            \"activityType\",\r\n            \"occurrence\",\r\n            \"purposeCode\",\r\n            \"dataSource\",\r\n            \"fromName\",\r\n            \"startDate\",\r\n            \"endDate\",\r\n            \"cfr\",\r\n            \"ircs\",\r\n            \"extMark\",\r\n            \"uvi\",\r\n            \"iccat\",\r\n            \"gfcm\",\r\n            \"areas\",\r\n            \"port\",\r\n            \"fishingGear\",\r\n            \"speciesCode\",\r\n            \"quantity\"\r\n         ]\r\n      }\r\n   },\r\n   \"catchThresholds\":{  \r\n      \"critical\":20,\r\n      \"warning\":10\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/config/admin"
					},
					"response": []
				},
				{
					"name": "Check Thresholds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"checkThresholds\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.catchThresholds.critical).to.eql(20);",
									"    pm.expect(jsonData.data.catchThresholds.warning).to.eql(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"fishingActivityConfig\":{  \r\n      \"summaryReport\":{  \r\n         \"values\":[  \r\n            \"FAReportType\",\r\n            \"activityType\",\r\n            \"occurrence\",\r\n            \"purposeCode\",\r\n            \"dataSource\",\r\n            \"fromName\",\r\n            \"startDate\",\r\n            \"endDate\",\r\n            \"cfr\",\r\n            \"ircs\",\r\n            \"extMark\",\r\n            \"uvi\",\r\n            \"iccat\",\r\n            \"gfcm\",\r\n            \"areas\",\r\n            \"port\",\r\n            \"fishingGear\",\r\n            \"speciesCode\",\r\n            \"quantity\"\r\n         ],\r\n         \"order\":[  \r\n            \"FAReportType\",\r\n            \"activityType\",\r\n            \"occurrence\",\r\n            \"purposeCode\",\r\n            \"dataSource\",\r\n            \"fromName\",\r\n            \"startDate\",\r\n            \"endDate\",\r\n            \"cfr\",\r\n            \"ircs\",\r\n            \"extMark\",\r\n            \"uvi\",\r\n            \"iccat\",\r\n            \"gfcm\",\r\n            \"areas\",\r\n            \"port\",\r\n            \"fishingGear\",\r\n            \"speciesCode\",\r\n            \"quantity\"\r\n         ]\r\n      }\r\n   },\r\n   \"catchThresholds\":{  \r\n      \"critical\":20,\r\n      \"warning\":10\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/config/admin"
					},
					"response": []
				}
			]
		},
		{
			"name": "05 Fishing Trip",
			"item": [
				{
					"name": "authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_power\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "Search all FA Trips",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try{",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response body is proper\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"fishingTripIdList\");",
									"    pm.expect(pm.response.text()).to.include(\"fishingActivityList\");",
									"    pm.expect(pm.response.text()).to.include(\"totalCountOfRecords\");",
									"",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"number of results is \" + jsonData.data.totalCountOfRecords] = true;",
									"",
									"",
									"if (jsonData.data.totalCountOfRecords > 0 ){",
									"    ",
									"    postman.setEnvironmentVariable(\"firstTripId\", jsonData.data.fishingTripIdList[0].tripId);",
									"    tests[\"first trip id is \" + environment.firstTripId] = environment.firstTripId === jsonData.data.fishingTripIdList[0].tripId;",
									"    ",
									"    postman.setEnvironmentVariable(\"tripActivity\", jsonData.data.fishingTripIdList[0].firstFishingActivity);",
									"    tests[\"first trip ACTIVITY_TYPE is \" + environment.tripActivity] = environment.tripActivity === jsonData.data.fishingTripIdList[0].firstFishingActivity;",
									"    ",
									"    postman.setEnvironmentVariable(\"tripFlagState\", jsonData.data.fishingTripIdList[0].flagState);",
									"    tests[\"first trip flag state is \" + environment.tripFlagState] = environment.tripFlagState === jsonData.data.fishingTripIdList[0].flagState;",
									"    ",
									"    postman.setEnvironmentVariable(\"tripStartDateMiliseconds\", jsonData.data.fishingTripIdList[0].firstFishingActivityDateTime);",
									"    var startDate = new Date(jsonData.data.fishingTripIdList[0].firstFishingActivityDateTime);",
									"    var startDateISO = startDate.toISOString().substring(0,19);",
									"    postman.setEnvironmentVariable(\"tripStartDate\", startDateISO);",
									"    ",
									"    tests[\"first trip start date is \" + environment.tripStartDate] = true;",
									"",
									"    postman.setEnvironmentVariable(\"tripEndDateMiliseconds\", jsonData.data.fishingTripIdList[0].lastFishingActivityDateTime);",
									"    var endDate = new Date(jsonData.data.fishingTripIdList[0].lastFishingActivityDateTime);",
									"    var endDateISO = startDate.toISOString().substring(0,19);",
									"    postman.setEnvironmentVariable(\"tripEndDate\", endDateISO);",
									"    ",
									"    tests[\"first trip end date is \" + environment.tripEndDate] = true;",
									"",
									"}",
									"",
									"} catch(e){tests[\"Unexpected failure\"] = false;}"
								],
								"id": "ba78e782-9d3e-4e89-b5f4-995afc095eaa",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"pagination\":{  \r\n   },\r\n   \"sorting\":{  \r\n   },\r\n   \"searchCriteriaMap\":{  \r\n\r\n   },\r\n   \"searchCriteriaMapMultipleValues\":{  \r\n      \"PURPOSE\":[  \r\n         \"9\",\r\n         \"1\",\r\n         \"5\",\r\n         \"3\"\r\n      ]\r\n   }\r\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/listTrips"
					},
					"response": []
				},
				{
					"name": "Search FA Trips by Trip id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try{",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response body is proper\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"fishingTripIdList\");",
									"    pm.expect(pm.response.text()).to.include(\"fishingActivityList\");",
									"    pm.expect(pm.response.text()).to.include(\"totalCountOfRecords\");",
									"",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"number of results is \" + jsonData.data.totalCountOfRecords] = true;",
									"",
									"",
									"if (jsonData.data.totalCountOfRecords > 0 ){",
									"    tests[\"the trip id returned is correct \" + environment.firstTripId] = environment.firstTripId === jsonData.data.fishingTripIdList[0].tripId;",
									"}",
									"} catch(e){tests[\"Unexpected failure\"] = false;}"
								],
								"id": "ccac500e-e65d-4d31-b7dd-f5c83ccbe2ac",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"pagination\":{\"offset\":0,\"pageSize\":20},\n\"sorting\":{},\n\"searchCriteriaMap\":{\n       \"TRIP_ID\" : \"{{firstTripId}}\"\n    },\n\"searchCriteriaMapMultipleValues\":{\"PURPOSE\":[\"9\",\"1\",\"5\",\"3\"]}\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/listTrips"
					},
					"response": []
				},
				{
					"name": "Search FA Trips by Fishing Activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try{",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response body is proper\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"fishingTripIdList\");",
									"    pm.expect(pm.response.text()).to.include(\"fishingActivityList\");",
									"    pm.expect(pm.response.text()).to.include(\"totalCountOfRecords\");",
									"",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"number of results is \" + jsonData.data.totalCountOfRecords] = true;",
									"",
									"",
									"if (jsonData.data.totalCountOfRecords > 0 ){",
									"    tests[\"the trip fishing activity returned is correct \" + environment.tripActivity] = environment.tripActivity === jsonData.data.fishingTripIdList[0].firstFishingActivity;",
									"}",
									"} catch(e){tests[\"Unexpected failure\"] = false;}"
								],
								"id": "5a8aab7a-bdf6-47b7-beb7-5c0974c3dcc0",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"pagination\":{\"offset\":0,\"pageSize\":20},\n\"sorting\":{},\n\"searchCriteriaMap\":{\n        \"ACTIVITY_TYPE\": \"{{tripActivity}}\"\n    },\n\"searchCriteriaMapMultipleValues\":{\"PURPOSE\":[\"9\",\"1\",\"5\",\"3\"]}\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/listTrips"
					},
					"response": []
				},
				{
					"name": "Search FA Trips by Owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try{",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response body is proper\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"fishingTripIdList\");",
									"    pm.expect(pm.response.text()).to.include(\"fishingActivityList\");",
									"    pm.expect(pm.response.text()).to.include(\"totalCountOfRecords\");",
									"",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"number of results is \" + jsonData.data.totalCountOfRecords] = true;",
									"",
									"",
									"if (jsonData.data.totalCountOfRecords > 0 ){",
									"    tests[\"the trip fishing activity returned is correct \" + environment.tripFlagState] = environment.tripFlagState === jsonData.data.fishingTripIdList[0].flagState;",
									"}",
									"} catch(e){tests[\"Unexpected failure\"] = false;}"
								],
								"id": "c3f82520-0764-4154-b9df-38f458f4ab05",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"pagination\":{\"offset\":0,\"pageSize\":20},\n\"sorting\":{},\n\"searchCriteriaMap\":{\n        \"OWNER\": \"{{tripFlagState}}\"\n    },\n\"searchCriteriaMapMultipleValues\":{\"PURPOSE\":[\"9\",\"1\",\"5\",\"3\"]}\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/listTrips"
					},
					"response": []
				},
				{
					"name": "Search FA Trips by Start Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try{",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response body is proper\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"fishingTripIdList\");",
									"    pm.expect(pm.response.text()).to.include(\"fishingActivityList\");",
									"    pm.expect(pm.response.text()).to.include(\"totalCountOfRecords\");",
									"",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"number of results is \" + jsonData.data.totalCountOfRecords] = true;",
									"",
									"",
									"if (jsonData.data.totalCountOfRecords > 0 ){",
									"    tests[\"the trip fishing activity returned is correct \" + environment.tripStartDateMiliseconds] = environment.tripStartDateMiliseconds === jsonData.data.fishingTripIdList[0].firstFishingActivityDateTime.toString();",
									"}",
									"} catch(e){tests[\"Unexpected failure\"] = false;}"
								],
								"id": "ef5dd566-85b3-4a81-bf5b-c5071b158e18",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"pagination\":{\"offset\":0,\"pageSize\":20},\n\"sorting\":{},\n\"searchCriteriaMap\":{\n        \"PERIOD_START\": \"{{tripStartDate}}\"\n    },\n\"searchCriteriaMapMultipleValues\":{\"PURPOSE\":[\"9\",\"1\",\"5\",\"3\"]}\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/listTrips"
					},
					"response": []
				},
				{
					"name": "Search FA Trips by End Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try{",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response body is proper\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"fishingTripIdList\");",
									"    pm.expect(pm.response.text()).to.include(\"fishingActivityList\");",
									"    pm.expect(pm.response.text()).to.include(\"totalCountOfRecords\");",
									"",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"number of results is \" + jsonData.data.totalCountOfRecords] = true;",
									"",
									"",
									"if (jsonData.data.totalCountOfRecords > 0 ){",
									"    tests[\"the trip fishing activity returned is correct \" + environment.tripActivity] = environment.tripActivity === jsonData.data.fishingTripIdList[0].firstFishingActivity.toString();",
									"}",
									"} catch(e){tests[\"Unexpected failure\"] = false;}"
								],
								"id": "af6cc493-2bd2-4708-9477-cb740413aa50",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"pagination\":{\"offset\":0,\"pageSize\":20},\n\"sorting\":{},\n\"searchCriteriaMap\":{\n        \"PERIOD_END\": \"{{tripEndDate}}\"\n    },\n\"searchCriteriaMapMultipleValues\":{\"PURPOSE\":[\"9\",\"1\",\"5\",\"3\"]}\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/activity/rest/fa/listTrips"
					},
					"response": []
				}
			]
		},
		{
			"name": "05 Exchange Filter Tests",
			"item": [
				{
					"name": "authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"authenticated is true\"] = data.authenticated === true;",
									"",
									"postman.setEnvironmentVariable(\"token\", data.jwtoken);",
									"",
									"tests[\"environment token is \" + environment.token] = environment.token === data.jwtoken;",
									"",
									"var jsonData = JSON.parse(responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"userName\": \"rep_power\",\n   \"password\": \"abcd-1234\"\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/usm-administration/rest/authenticate"
					},
					"response": []
				},
				{
					"name": "Search Status SUCCESSFUL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42c875b3-9390-4d30-9fce-f864ebb5abf7",
								"type": "text/javascript",
								"exec": [
									"try {",
									"\tpm.test(\"Status code is 200\", function () {",
									"\t\tpm.response.to.have.status(200);",
									"\t});",
									"",
									"\tvar jsonData = JSON.parse(responseBody).data;",
									"\tif (jsonData.logList.length > 0) {",
									"\t\tpm.test(\"Response body is proper\", function () {",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"id\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"incoming\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"dateRecieved\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"type\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"senderRecipient\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"logList\");",
									"",
									"\t\t});",
									"        tests[\"results are properly filtered by status = \" + jsonData.logList[0].status] = jsonData.logList[0].status == \"SUCCESSFUL\";",
									"\t}",
									"\t",
									"} catch (e) {",
									"\ttests[\"Unexpected failure\"] = false;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"exchangeSearchCriteria\":\n    {\"criterias\":\n        [\n        {\n            \"key\":\"MESSAGE_DIRECTION\",\n            \"value\":\"ALL\"\n            \n        },\n        {\n            \"key\":\"STATUS\",\n            \"value\":\"SUCCESSFUL\"\n            \n        }\n        \n        ],\n        \n        \"isDynamic\":false\n        \n    },\n    \"pagination\":\n    {\n        \"page\":1,\n        \"listSize\":20\n        \n    }\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/exchange/rest/exchange/list"
					},
					"response": []
				},
				{
					"name": "Search Status FAILED",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60768196-fedb-43cc-82d6-b4eb68ea349c",
								"type": "text/javascript",
								"exec": [
									"try {",
									"\tpm.test(\"Status code is 200\", function () {",
									"\t\tpm.response.to.have.status(200);",
									"\t});",
									"",
									"\tvar jsonData = JSON.parse(responseBody).data;",
									"\tif (jsonData.logList.length > 0) {",
									"\t\tpm.test(\"Response body is proper\", function () {",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"id\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"incoming\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"dateRecieved\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"type\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"senderRecipient\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"logList\");",
									"",
									"\t\t});",
									"        tests[\"results are properly filtered by status = \" + jsonData.logList[0].status] = jsonData.logList[0].status == \"FAILED\";",
									"\t}",
									"",
									"} catch (e) {",
									"\ttests[\"Unexpected failure\"] = false;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"exchangeSearchCriteria\":\n    {\"criterias\":\n        [\n        {\n            \"key\":\"MESSAGE_DIRECTION\",\n            \"value\":\"ALL\"\n            \n        },\n        {\n            \"key\":\"STATUS\",\n            \"value\":\"FAILED\"\n            \n        }\n        \n        ],\n        \n        \"isDynamic\":false\n        \n    },\n    \"pagination\":\n    {\n        \"page\":1,\n        \"listSize\":20\n        \n    }\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/exchange/rest/exchange/list"
					},
					"response": []
				},
				{
					"name": "Search Source MANUAL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a7cd077-5b42-47d0-b30b-a5e45c0250aa",
								"type": "text/javascript",
								"exec": [
									"try {",
									"\tpm.test(\"Status code is 200\", function () {",
									"\t\tpm.response.to.have.status(200);",
									"\t});",
									"",
									"\tvar jsonData = JSON.parse(responseBody).data;",
									"\tif (jsonData.logList.length > 0) {",
									"\t\tpm.test(\"Response body is proper\", function () {",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"id\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"incoming\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"dateRecieved\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"type\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"senderRecipient\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"logList\");",
									"",
									"\t\t});",
									"        tests[\"results are properly filtered by source = \" + jsonData.logList[0].source] = jsonData.logList[0].source == \"MANUAL\";",
									"\t}",
									"",
									"} catch (e) {",
									"\ttests[\"Unexpected failure\"] = false;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"exchangeSearchCriteria\":\n    {\"criterias\":\n        [\n        {\n            \"key\":\"MESSAGE_DIRECTION\",\n            \"value\":\"ALL\"\n            \n        },\n        {\n            \"key\":\"SOURCE\",\n            \"value\":\"MANUAL\"\n            \n        }\n        \n        ],\n        \n        \"isDynamic\":false\n        \n    },\n    \"pagination\":\n    {\n        \"page\":1,\n        \"listSize\":20\n        \n    }\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/exchange/rest/exchange/list"
					},
					"response": []
				},
				{
					"name": "Search Type MOVEMENT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0974673-4767-486f-835e-7aafc59ca16f",
								"type": "text/javascript",
								"exec": [
									"try {",
									"\tpm.test(\"Status code is 200\", function () {",
									"\t\tpm.response.to.have.status(200);",
									"\t});",
									"",
									"\tvar jsonData = JSON.parse(responseBody).data;",
									"\tif (jsonData.logList.length > 0) {",
									"\t\tpm.test(\"Response body is proper\", function () {",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"id\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"incoming\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"dateRecieved\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"type\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"senderRecipient\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"logList\");",
									"",
									"\t\t});",
									"        tests[\"results are properly filtered by source = \" + jsonData.logList[0].typeRefType] = jsonData.logList[0].typeRefType == \"MOVEMENT\";",
									"\t}",
									"",
									"} catch (e) {",
									"\ttests[\"Unexpected failure\"] = false;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"exchangeSearchCriteria\":\n    {\"criterias\":\n        [\n        {\n            \"key\":\"MESSAGE_DIRECTION\",\n            \"value\":\"ALL\"\n            \n        },\n        {\n            \"key\":\"TYPE\",\n            \"value\":\"MOVEMENT\"\n            \n        }\n        \n        ],\n        \n        \"isDynamic\":false\n        \n    },\n    \"pagination\":\n    {\n        \"page\":1,\n        \"listSize\":20\n        \n    }\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/exchange/rest/exchange/list"
					},
					"response": []
				},
				{
					"name": "Search Type FA_REPORT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5ecaf78-e8a9-4303-a9a0-22c292e8da55",
								"type": "text/javascript",
								"exec": [
									"try {",
									"\tpm.test(\"Status code is 200\", function () {",
									"\t\tpm.response.to.have.status(200);",
									"\t});",
									"",
									"\tvar jsonData = JSON.parse(responseBody).data;",
									"\tif (jsonData.logList.length > 0) {",
									"\t\tpm.test(\"Response body is proper\", function () {",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"id\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"incoming\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"dateRecieved\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"type\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"senderRecipient\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"logList\");",
									"",
									"\t\t});",
									"        tests[\"results are properly filtered by source = \" + jsonData.logList[0].typeRefType] = jsonData.logList[0].typeRefType == \"FA_REPORT\";",
									"\t}",
									"",
									"} catch (e) {",
									"\ttests[\"Unexpected failure\"] = false;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"exchangeSearchCriteria\":\n    {\"criterias\":\n        [\n        {\n            \"key\":\"MESSAGE_DIRECTION\",\n            \"value\":\"ALL\"\n            \n        },\n        {\n            \"key\":\"TYPE\",\n            \"value\":\"FA_REPORT\"\n            \n        }\n        \n        ],\n        \n        \"isDynamic\":false\n        \n    },\n    \"pagination\":\n    {\n        \"page\":1,\n        \"listSize\":20\n        \n    }\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/exchange/rest/exchange/list"
					},
					"response": []
				},
				{
					"name": "Search Type FA_RESPONSE",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c26952b-74e6-4f14-93f5-72bbcc3841d9",
								"type": "text/javascript",
								"exec": [
									"try {",
									"\tpm.test(\"Status code is 200\", function () {",
									"\t\tpm.response.to.have.status(200);",
									"\t});",
									"",
									"\tvar jsonData = JSON.parse(responseBody).data;",
									"\tif (jsonData.logList.length > 0) {",
									"\t\tpm.test(\"Response body is proper\", function () {",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"id\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"incoming\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"dateRecieved\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"type\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"senderRecipient\");",
									"\t\t\tpm.expect(pm.response.text()).to.include(\"logList\");",
									"",
									"\t\t});",
									"        tests[\"results are properly filtered by type = \" + jsonData.logList[0].typeRefType] = jsonData.logList[0].typeRefType == \"FA_RESPONSE\";",
									"\t}",
									"",
									"} catch (e) {",
									"\ttests[\"Unexpected failure\"] = false;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							},
							{
								"key": "roleName",
								"value": "rep_power_role"
							},
							{
								"key": "scopeName",
								"value": "EC"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"exchangeSearchCriteria\":\n    {\"criterias\":\n        [\n        {\n            \"key\":\"MESSAGE_DIRECTION\",\n            \"value\":\"ALL\"\n            \n        },\n        {\n            \"key\":\"TYPE\",\n            \"value\":\"FA_RESPONSE\"\n            \n        }\n        \n        ],\n        \n        \"isDynamic\":false\n        \n    },\n    \"pagination\":\n    {\n        \"page\":1,\n        \"listSize\":20\n        \n    }\n}"
						},
						"url": "{{hostname}}:{{port}}/{{comPath}}/exchange/rest/exchange/list"
					},
					"response": []
				}
			]
		}
	]
}