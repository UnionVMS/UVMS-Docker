set usm_secretkey=${usm_secretkey}
set cors_allowed_host_regex=${cors_allowed_host_regex}
set uvmsBaseUrl=${uvmsBaseUrl}
set efrUvmsBaseUrl=${efrUvmsBaseUrl}
set uvmsUsername=${uvmsUsername}
set uvmsPassword=${uvmsPassword}
set efrBackendRole=${efrBackendRole}
set notificationServiceEndpoint=${notificationServiceEndpoint}
set priorNotificationMaxAgeInDays=${priorNotificationMaxAgeInDays}
set authLicServiceEndpoint=${authLicServiceEndpoint}

embed-server --server-config=standalone-full.xml


#### System properties

if (outcome != success) of /system-property=jboss.as.management.blocking.timeout:remove
  echo System Property jboss.as.management.blocking.timeout did not exist, creating...
end-if
/system-property=jboss.as.management.blocking.timeout:add(value=1200)

if (outcome != success) of /system-property=db.dialect:remove
  echo System Property db.dialect did not exist, creating...
end-if
/system-property=db.dialect:add(value=postgres)

if (outcome != success) of /system-property=hibernate.dialect:remove
  echo System Property hibernate.dialect did not exist, creating...
end-if
/system-property=hibernate.dialect:add(value=org.hibernate.dialect.PostgreSQL9Dialect)

if (outcome != success) of /system-property=USM.secretKey:remove
  echo System Property USM.secretKey did not exist, creating...
end-if
/system-property=USM.secretKey:add(value=$usm_secretkey)

#### Naming

if (outcome != success) of /subsystem=naming/binding=java\:global\/cors_allowed_host_regex:remove
  echo Binding for cors_allowed_host_regex did not exist, creating...
end-if
/subsystem=naming/binding=java\:global\/cors_allowed_host_regex:add(binding-type=simple, value=$cors_allowed_host_regex, type=java.lang.String)

#### Microprofile config

if (outcome != success) of /subsystem=microprofile-config-smallrye/config-source=props:remove
  echo No MicroProfile Config props existed, creating...
end-if
/subsystem=microprofile-config-smallrye/config-source=props:add(properties={ \
  "uvmsBaseUrl" = $uvmsBaseUrl, \
  "efrUvmsBaseUrl" = $efrUvmsBaseUrl, \
  "uvmsUsername" = $uvmsUsername, \
  "uvmsPassword" = $uvmsPassword, \
  "efrBackendRole" = $efrBackendRole, \
  "notificationServiceEndpoint" = $notificationServiceEndpoint, \
  "priorNotificationMaxAgeInDays" = $priorNotificationMaxAgeInDays, \
  "authLicServiceEndpoint" = $authLicServiceEndpoint \
})

#### Logging

if (outcome != success) of /subsystem=logging/logger=org:remove
  echo No existing logger org, creating...
end-if
/subsystem=logging/logger=org:add(level=WARN)

if (outcome != success) of /subsystem=logging/logger=eu:remove
  echo No existing logger eu, creating...
end-if
/subsystem=logging/logger=eu:add(level=DEBUG)

if (outcome != success) of /subsystem=logging/logger=se:remove
  echo No existing logger se, creating...
end-if
/subsystem=logging/logger=se:add(level=INFO)

if (outcome != success) of /subsystem=logging/logger=se.havochvatten.efr:remove
  echo No existing logger se.havochvatten.efr, creating...
end-if
/subsystem=logging/logger=se.havochvatten.efr:add(level=DEBUG)


stop-embedded-server
